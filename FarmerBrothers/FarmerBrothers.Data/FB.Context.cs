//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FarmerBrothers.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class FarmerBrothersEntities : DbContext
    {
        public FarmerBrothersEntities()
            : base("name=FarmerBrothersEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AgentDispatchLog> AgentDispatchLogs { get; set; }
        public virtual DbSet<AllFBStatu> AllFBStatus { get; set; }
        public virtual DbSet<AMPSList> AMPSLists { get; set; }
        public virtual DbSet<Application> Applications { get; set; }
        public virtual DbSet<BillingItem> BillingItems { get; set; }
        public virtual DbSet<BranchESM> BranchESMs { get; set; }
        public virtual DbSet<BrandName> BrandNames { get; set; }
        public virtual DbSet<CallTypeSymptomSolutionMaster> CallTypeSymptomSolutionMasters { get; set; }
        public virtual DbSet<Category> Categories { get; set; }
        public virtual DbSet<Contact> Contacts { get; set; }
        public virtual DbSet<Contact_PMUploadsALL> Contact_PMUploadsALL { get; set; }
        public virtual DbSet<Contingent> Contingents { get; set; }
        public virtual DbSet<ContingentDetail> ContingentDetails { get; set; }
        public virtual DbSet<ElectricalPhaseList> ElectricalPhaseLists { get; set; }
        public virtual DbSet<EquipType> EquipTypes { get; set; }
        public virtual DbSet<ERFBranchDetail> ERFBranchDetails { get; set; }
        public virtual DbSet<ERFOrderType> ERFOrderTypes { get; set; }
        public virtual DbSet<ErfWorkorderLog> ErfWorkorderLogs { get; set; }
        public virtual DbSet<ESMCCMRSMEscalation> ESMCCMRSMEscalations { get; set; }
        public virtual DbSet<ESMDSMRSM> ESMDSMRSMs { get; set; }
        public virtual DbSet<EstimateEscalation> EstimateEscalations { get; set; }
        public virtual DbSet<FBActivityLog> FBActivityLogs { get; set; }
        public virtual DbSet<FBBillableFeed> FBBillableFeeds { get; set; }
        public virtual DbSet<FbBillableSKU> FbBillableSKUs { get; set; }
        public virtual DbSet<FBCallReason> FBCallReasons { get; set; }
        public virtual DbSet<FBCBE> FBCBEs { get; set; }
        public virtual DbSet<FBClosurePart> FBClosureParts { get; set; }
        public virtual DbSet<FBEquipment> FBEquipments { get; set; }
        public virtual DbSet<FBERFEquipment> FBERFEquipments { get; set; }
        public virtual DbSet<FBERFExpendable> FBERFExpendables { get; set; }
        public virtual DbSet<FBERFPos> FBERFPos { get; set; }
        public virtual DbSet<FBERFTransactionType> FBERFTransactionTypes { get; set; }
        public virtual DbSet<FBExpendable> FBExpendables { get; set; }
        public virtual DbSet<FBFunctionality> FBFunctionalities { get; set; }
        public virtual DbSet<FbPrimaryTechnician> FbPrimaryTechnicians { get; set; }
        public virtual DbSet<FBReport> FBReports { get; set; }
        public virtual DbSet<FBRoleFunction> FBRoleFunctions { get; set; }
        public virtual DbSet<FbRole> FbRoles { get; set; }
        public virtual DbSet<FBSKU> FBSKUs { get; set; }
        public virtual DbSet<FbUserMaster> FbUserMasters { get; set; }
        public virtual DbSet<FBUserReport> FBUserReports { get; set; }
        public virtual DbSet<FbWorkOrderSKU> FbWorkOrderSKUs { get; set; }
        public virtual DbSet<FeastMovement> FeastMovements { get; set; }
        public virtual DbSet<HolidayList> HolidayLists { get; set; }
        public virtual DbSet<IndexCounter> IndexCounters { get; set; }
        public virtual DbSet<Invoice> Invoices { get; set; }
        public virtual DbSet<JDEPaymentTerm> JDEPaymentTerms { get; set; }
        public virtual DbSet<NEMANumberList> NEMANumberLists { get; set; }
        public virtual DbSet<NoAutoEmailZipCode> NoAutoEmailZipCodes { get; set; }
        public virtual DbSet<NoAutomaticEmailContract> NoAutomaticEmailContracts { get; set; }
        public virtual DbSet<NonSerialized> NonSerializeds { get; set; }
        public virtual DbSet<NotesHistory> NotesHistories { get; set; }
        public virtual DbSet<OnCallGroup> OnCallGroups { get; set; }
        public virtual DbSet<PhoneSolveLog> PhoneSolveLogs { get; set; }
        public virtual DbSet<PricingType> PricingTypes { get; set; }
        public virtual DbSet<Privilege> Privileges { get; set; }
        public virtual DbSet<RemovalSurvey> RemovalSurveys { get; set; }
        public virtual DbSet<Sku> Skus { get; set; }
        public virtual DbSet<Solution> Solutions { get; set; }
        public virtual DbSet<State> States { get; set; }
        public virtual DbSet<StateTax> StateTaxes { get; set; }
        public virtual DbSet<Symptom> Symptoms { get; set; }
        public virtual DbSet<SystemInfo> SystemInfoes { get; set; }
        public virtual DbSet<TECH_HIERARCHY> TECH_HIERARCHY { get; set; }
        public virtual DbSet<TechOnCall> TechOnCalls { get; set; }
        public virtual DbSet<TechSchedule> TechSchedules { get; set; }
        public virtual DbSet<ThirdpartyConMaintenanceZonerate> ThirdpartyConMaintenanceZonerates { get; set; }
        public virtual DbSet<ThirdPartyContractMaintenance> ThirdPartyContractMaintenances { get; set; }
        public virtual DbSet<TmpInvTransfer> TmpInvTransfers { get; set; }
        public virtual DbSet<TmpinvTransferNonserialized> TmpinvTransferNonserializeds { get; set; }
        public virtual DbSet<TmpinvTransferSerialized> TmpinvTransferSerializeds { get; set; }
        public virtual DbSet<UnKnownCustomerLog> UnKnownCustomerLogs { get; set; }
        public virtual DbSet<UserApplication> UserApplications { get; set; }
        public virtual DbSet<UserProfile> UserProfiles { get; set; }
        public virtual DbSet<UserType> UserTypes { get; set; }
        public virtual DbSet<Vendor> Vendors { get; set; }
        public virtual DbSet<VoltageList> VoltageLists { get; set; }
        public virtual DbSet<WaterLineList> WaterLineLists { get; set; }
        public virtual DbSet<WorkorderBillingDetail> WorkorderBillingDetails { get; set; }
        public virtual DbSet<WorkOrderBrand> WorkOrderBrands { get; set; }
        public virtual DbSet<WorkorderEquipment> WorkorderEquipments { get; set; }
        public virtual DbSet<WorkorderEquipmentRequested> WorkorderEquipmentRequesteds { get; set; }
        public virtual DbSet<WorkorderImage> WorkorderImages { get; set; }
        public virtual DbSet<WorkorderInstallationSurvey> WorkorderInstallationSurveys { get; set; }
        public virtual DbSet<WorkorderNonAudit> WorkorderNonAudits { get; set; }
        public virtual DbSet<WorkorderReasonlog> WorkorderReasonlogs { get; set; }
        public virtual DbSet<WorkorderSavedSearch> WorkorderSavedSearches { get; set; }
        public virtual DbSet<WorkorderSchedule> WorkorderSchedules { get; set; }
        public virtual DbSet<WorkorderServiceClaim> WorkorderServiceClaims { get; set; }
        public virtual DbSet<WorkorderStatusLog> WorkorderStatusLogs { get; set; }
        public virtual DbSet<WorkorderType> WorkorderTypes { get; set; }
        public virtual DbSet<ZonePriority> ZonePriorities { get; set; }
        public virtual DbSet<TMP_SerialNOReport> TMP_SerialNOReport { get; set; }
        public virtual DbSet<Zip> Zips { get; set; }
        public virtual DbSet<ZoneZip> ZoneZips { get; set; }
        public virtual DbSet<v_AllPMandServiceEventsWithUniqueSerial> v_AllPMandServiceEventsWithUniqueSerial { get; set; }
        public virtual DbSet<v_Contact> v_Contact { get; set; }
        public virtual DbSet<v_ContactServiceHistory> v_ContactServiceHistory { get; set; }
        public virtual DbSet<V_EquipmentCount> V_EquipmentCount { get; set; }
        public virtual DbSet<V_LastOneyearDispatches> V_LastOneyearDispatches { get; set; }
        public virtual DbSet<V_LastOneyearInvoices> V_LastOneyearInvoices { get; set; }
        public virtual DbSet<V_OpenCallTime> V_OpenCallTime { get; set; }
        public virtual DbSet<V_OriginalCallDetails> V_OriginalCallDetails { get; set; }
        public virtual DbSet<VW_FBRoleFunction> VW_FBRoleFunction { get; set; }
        public virtual DbSet<VW_tech_Hierarchy> VW_tech_Hierarchy { get; set; }
        public virtual DbSet<CustomCriteria> CustomCriterias { get; set; }
        public virtual DbSet<FBCustomerServiceDistribution> FBCustomerServiceDistributions { get; set; }
        public virtual DbSet<FBCustomerNote> FBCustomerNotes { get; set; }
        public virtual DbSet<WorkorderDetail> WorkorderDetails { get; set; }
        public virtual DbSet<PricingDetail> PricingDetails { get; set; }
        public virtual DbSet<Erf> Erfs { get; set; }
        public virtual DbSet<WorkOrder> WorkOrders { get; set; }
        public virtual DbSet<CCInvoiceDetail> CCInvoiceDetails { get; set; }
        public virtual DbSet<WorkorderPart> WorkorderParts { get; set; }
        public virtual DbSet<TMP_BlackBerry_NSR> TMP_BlackBerry_NSR { get; set; }
        public virtual DbSet<TMP_BlackBerry_SCFAssetInfo> TMP_BlackBerry_SCFAssetInfo { get; set; }
        public virtual DbSet<TMP_BlackBerry_SCFPartsInfo> TMP_BlackBerry_SCFPartsInfo { get; set; }
        public virtual DbSet<TMP_BlackBerry_SCFInvoiceInfo> TMP_BlackBerry_SCFInvoiceInfo { get; set; }
        public virtual DbSet<NonServiceworkorder> NonServiceworkorders { get; set; }
        public virtual DbSet<NonFBCustomer> NonFBCustomers { get; set; }
    
        public virtual int USP_AfterHoursClosestTechDispatch_Details(string customerZip)
        {
            var customerZipParameter = customerZip != null ?
                new ObjectParameter("CustomerZip", customerZip) :
                new ObjectParameter("CustomerZip", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_AfterHoursClosestTechDispatch_Details", customerZipParameter);
        }
    
        public virtual int USP_AfterHoursTechDispatch_Details(string customerZip, Nullable<int> workOrderId)
        {
            var customerZipParameter = customerZip != null ?
                new ObjectParameter("CustomerZip", customerZip) :
                new ObjectParameter("CustomerZip", typeof(string));
    
            var workOrderIdParameter = workOrderId.HasValue ?
                new ObjectParameter("WorkOrderId", workOrderId) :
                new ObjectParameter("WorkOrderId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_AfterHoursTechDispatch_Details", customerZipParameter, workOrderIdParameter);
        }
    
        public virtual int USP_AutoDispatch_GetDispatchTechID(Nullable<int> workOrderID)
        {
            var workOrderIDParameter = workOrderID.HasValue ?
                new ObjectParameter("WorkOrderID", workOrderID) :
                new ObjectParameter("WorkOrderID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_AutoDispatch_GetDispatchTechID", workOrderIDParameter);
        }
    
        public virtual int USP_AutoDispatchTechDispatch_Details(string customerZip, Nullable<decimal> dealerLatLongFactor)
        {
            var customerZipParameter = customerZip != null ?
                new ObjectParameter("CustomerZip", customerZip) :
                new ObjectParameter("CustomerZip", typeof(string));
    
            var dealerLatLongFactorParameter = dealerLatLongFactor.HasValue ?
                new ObjectParameter("DealerLatLongFactor", dealerLatLongFactor) :
                new ObjectParameter("DealerLatLongFactor", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_AutoDispatchTechDispatch_Details", customerZipParameter, dealerLatLongFactorParameter);
        }
    
        public virtual int USP_ClosestOnCallTechDispatch_Details(string customerZip)
        {
            var customerZipParameter = customerZip != null ?
                new ObjectParameter("CustomerZip", customerZip) :
                new ObjectParameter("CustomerZip", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_ClosestOnCallTechDispatch_Details", customerZipParameter);
        }
    
        public virtual int USP_ClosestTechDispatch_Details(string customerZip)
        {
            var customerZipParameter = customerZip != null ?
                new ObjectParameter("CustomerZip", customerZip) :
                new ObjectParameter("CustomerZip", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_ClosestTechDispatch_Details", customerZipParameter);
        }
    
        public virtual int USP_FBC_Monthly(string startDate, string endDate)
        {
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_FBC_Monthly", startDateParameter, endDateParameter);
        }
    
        public virtual int USP_FBClosure_Parts(string startDate, string endDate, string contactID, string entryNumber)
        {
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var contactIDParameter = contactID != null ?
                new ObjectParameter("ContactID", contactID) :
                new ObjectParameter("ContactID", typeof(string));
    
            var entryNumberParameter = entryNumber != null ?
                new ObjectParameter("EntryNumber", entryNumber) :
                new ObjectParameter("EntryNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_FBClosure_Parts", startDateParameter, endDateParameter, contactIDParameter, entryNumberParameter);
        }
    
        public virtual int USP_FBDispatch_TimeElapsed(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_FBDispatch_TimeElapsed", startDateParameter, endDateParameter);
        }
    
        public virtual int USP_FBServiceEvent_Count(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_FBServiceEvent_Count", startDateParameter, endDateParameter);
        }
    
        public virtual int USP_GetAllPMSchedules(string startDate, string endDate, Nullable<int> contactID)
        {
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var contactIDParameter = contactID.HasValue ?
                new ObjectParameter("ContactID", contactID) :
                new ObjectParameter("ContactID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_GetAllPMSchedules", startDateParameter, endDateParameter, contactIDParameter);
        }
    
        public virtual ObjectResult<USP_GetTechDataByServiceCenterId_Result> USP_GetTechDataByServiceCenterId(Nullable<int> serviceCenterId)
        {
            var serviceCenterIdParameter = serviceCenterId.HasValue ?
                new ObjectParameter("ServiceCenterId", serviceCenterId) :
                new ObjectParameter("ServiceCenterId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetTechDataByServiceCenterId_Result>("USP_GetTechDataByServiceCenterId", serviceCenterIdParameter);
        }
    
        public virtual int USP_GettechDispatch_CountDetails(Nullable<int> techID)
        {
            var techIDParameter = techID.HasValue ?
                new ObjectParameter("techID", techID) :
                new ObjectParameter("techID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_GettechDispatch_CountDetails", techIDParameter);
        }
    
        public virtual int USP_MAFBC_CloseNSR_ViaBlackBerry(Nullable<int> workorderID, string notes, string closureConf)
        {
            var workorderIDParameter = workorderID.HasValue ?
                new ObjectParameter("WorkorderID", workorderID) :
                new ObjectParameter("WorkorderID", typeof(int));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var closureConfParameter = closureConf != null ?
                new ObjectParameter("ClosureConf", closureConf) :
                new ObjectParameter("ClosureConf", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_MAFBC_CloseNSR_ViaBlackBerry", workorderIDParameter, notesParameter, closureConfParameter);
        }
    
        public virtual int USP_MAFBC_CloseWorkOrder_ByBlackBerry()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_MAFBC_CloseWorkOrder_ByBlackBerry");
        }
    
        public virtual int USP_OncallAfterHoursClosestTechDispatch_Details(string customerZip)
        {
            var customerZipParameter = customerZip != null ?
                new ObjectParameter("CustomerZip", customerZip) :
                new ObjectParameter("CustomerZip", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_OncallAfterHoursClosestTechDispatch_Details", customerZipParameter);
        }
    
        public virtual int USP_OncallAfterHoursTechDispatch_Details(string customerZip, Nullable<int> workOrderId)
        {
            var customerZipParameter = customerZip != null ?
                new ObjectParameter("CustomerZip", customerZip) :
                new ObjectParameter("CustomerZip", typeof(string));
    
            var workOrderIdParameter = workOrderId.HasValue ?
                new ObjectParameter("WorkOrderId", workOrderId) :
                new ObjectParameter("WorkOrderId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_OncallAfterHoursTechDispatch_Details", customerZipParameter, workOrderIdParameter);
        }
    
        public virtual int USP_OnCallTechDispatch_Details(string customerZip, Nullable<int> workOrderId)
        {
            var customerZipParameter = customerZip != null ?
                new ObjectParameter("CustomerZip", customerZip) :
                new ObjectParameter("CustomerZip", typeof(string));
    
            var workOrderIdParameter = workOrderId.HasValue ?
                new ObjectParameter("WorkOrderId", workOrderId) :
                new ObjectParameter("WorkOrderId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_OnCallTechDispatch_Details", customerZipParameter, workOrderIdParameter);
        }
    
        public virtual int USP_ProgramStatus_Report(string startDate, string endDate, string varState, string eventStatus, string apptStartDate, string apptEndDate, string arrvStartDate, string arrvEndDate, string complStartDate, string complEndDate, Nullable<int> callTypeID, Nullable<int> jDENO, Nullable<int> pricingParentID)
        {
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var varStateParameter = varState != null ?
                new ObjectParameter("varState", varState) :
                new ObjectParameter("varState", typeof(string));
    
            var eventStatusParameter = eventStatus != null ?
                new ObjectParameter("EventStatus", eventStatus) :
                new ObjectParameter("EventStatus", typeof(string));
    
            var apptStartDateParameter = apptStartDate != null ?
                new ObjectParameter("ApptStartDate", apptStartDate) :
                new ObjectParameter("ApptStartDate", typeof(string));
    
            var apptEndDateParameter = apptEndDate != null ?
                new ObjectParameter("ApptEndDate", apptEndDate) :
                new ObjectParameter("ApptEndDate", typeof(string));
    
            var arrvStartDateParameter = arrvStartDate != null ?
                new ObjectParameter("ArrvStartDate", arrvStartDate) :
                new ObjectParameter("ArrvStartDate", typeof(string));
    
            var arrvEndDateParameter = arrvEndDate != null ?
                new ObjectParameter("ArrvEndDate", arrvEndDate) :
                new ObjectParameter("ArrvEndDate", typeof(string));
    
            var complStartDateParameter = complStartDate != null ?
                new ObjectParameter("ComplStartDate", complStartDate) :
                new ObjectParameter("ComplStartDate", typeof(string));
    
            var complEndDateParameter = complEndDate != null ?
                new ObjectParameter("ComplEndDate", complEndDate) :
                new ObjectParameter("ComplEndDate", typeof(string));
    
            var callTypeIDParameter = callTypeID.HasValue ?
                new ObjectParameter("CallTypeID", callTypeID) :
                new ObjectParameter("CallTypeID", typeof(int));
    
            var jDENOParameter = jDENO.HasValue ?
                new ObjectParameter("JDENO", jDENO) :
                new ObjectParameter("JDENO", typeof(int));
    
            var pricingParentIDParameter = pricingParentID.HasValue ?
                new ObjectParameter("PricingParentID", pricingParentID) :
                new ObjectParameter("PricingParentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_ProgramStatus_Report", startDateParameter, endDateParameter, varStateParameter, eventStatusParameter, apptStartDateParameter, apptEndDateParameter, arrvStartDateParameter, arrvEndDateParameter, complStartDateParameter, complEndDateParameter, callTypeIDParameter, jDENOParameter, pricingParentIDParameter);
        }
    
        public virtual int USP_SuperInvoice_Report(string startDate, string endDate, Nullable<int> pricingParentID, string familyAff, Nullable<int> techID)
        {
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var pricingParentIDParameter = pricingParentID.HasValue ?
                new ObjectParameter("PricingParentID", pricingParentID) :
                new ObjectParameter("PricingParentID", typeof(int));
    
            var familyAffParameter = familyAff != null ?
                new ObjectParameter("FamilyAff", familyAff) :
                new ObjectParameter("FamilyAff", typeof(string));
    
            var techIDParameter = techID.HasValue ?
                new ObjectParameter("TechID", techID) :
                new ObjectParameter("TechID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_SuperInvoice_Report", startDateParameter, endDateParameter, pricingParentIDParameter, familyAffParameter, techIDParameter);
        }
    
        public virtual int USP_SuperInvoice_Report_FB(string startDate, string endDate, Nullable<int> pricingParentID, string familyAff, Nullable<int> techID)
        {
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var pricingParentIDParameter = pricingParentID.HasValue ?
                new ObjectParameter("PricingParentID", pricingParentID) :
                new ObjectParameter("PricingParentID", typeof(int));
    
            var familyAffParameter = familyAff != null ?
                new ObjectParameter("FamilyAff", familyAff) :
                new ObjectParameter("FamilyAff", typeof(string));
    
            var techIDParameter = techID.HasValue ?
                new ObjectParameter("TechID", techID) :
                new ObjectParameter("TechID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_SuperInvoice_Report_FB", startDateParameter, endDateParameter, pricingParentIDParameter, familyAffParameter, techIDParameter);
        }
    
        public virtual int USP_SuperInvoice_ReportDetails(string startDate, string endDate, Nullable<int> pricingParentID, string familyAff, Nullable<int> techID, string eSM, string route, string branch, string region)
        {
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var pricingParentIDParameter = pricingParentID.HasValue ?
                new ObjectParameter("PricingParentID", pricingParentID) :
                new ObjectParameter("PricingParentID", typeof(int));
    
            var familyAffParameter = familyAff != null ?
                new ObjectParameter("FamilyAff", familyAff) :
                new ObjectParameter("FamilyAff", typeof(string));
    
            var techIDParameter = techID.HasValue ?
                new ObjectParameter("TechID", techID) :
                new ObjectParameter("TechID", typeof(int));
    
            var eSMParameter = eSM != null ?
                new ObjectParameter("ESM", eSM) :
                new ObjectParameter("ESM", typeof(string));
    
            var routeParameter = route != null ?
                new ObjectParameter("Route", route) :
                new ObjectParameter("Route", typeof(string));
    
            var branchParameter = branch != null ?
                new ObjectParameter("Branch", branch) :
                new ObjectParameter("Branch", typeof(string));
    
            var regionParameter = region != null ?
                new ObjectParameter("Region", region) :
                new ObjectParameter("Region", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_SuperInvoice_ReportDetails", startDateParameter, endDateParameter, pricingParentIDParameter, familyAffParameter, techIDParameter, eSMParameter, routeParameter, branchParameter, regionParameter);
        }
    
        public virtual int USP_TechDispatch_And_DispatchCount_Details(string customerZip)
        {
            var customerZipParameter = customerZip != null ?
                new ObjectParameter("CustomerZip", customerZip) :
                new ObjectParameter("CustomerZip", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_TechDispatch_And_DispatchCount_Details", customerZipParameter);
        }
    
        public virtual int USP_TechDispatch_Details(string customerZip, Nullable<int> workOrderId)
        {
            var customerZipParameter = customerZip != null ?
                new ObjectParameter("CustomerZip", customerZip) :
                new ObjectParameter("CustomerZip", typeof(string));
    
            var workOrderIdParameter = workOrderId.HasValue ?
                new ObjectParameter("WorkOrderId", workOrderId) :
                new ObjectParameter("WorkOrderId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_TechDispatch_Details", customerZipParameter, workOrderIdParameter);
        }
    
        public virtual int USP_Update_ZonePriority()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_Update_ZonePriority");
        }
    
        [DbFunction("Entities", "get_CommaSeparatedString")]
        public virtual IQueryable<string> get_CommaSeparatedString(string text)
        {
            var textParameter = text != null ?
                new ObjectParameter("text", text) :
                new ObjectParameter("text", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<string>("[Entities].[get_CommaSeparatedString](@text)", textParameter);
        }
    
        public virtual int USP_WO_Search(string serialNumber, string contactID, Nullable<int> eRFID, string workorderCallstatus, string wOEntryStartDate, string wOEntryEndDate, string appointmentFromDate, string appointmentToDate, string workorderCalltypeid, string originalWorkorderid, string customerCity, string customerState, string customerZip, string priorityCode, Nullable<int> followupCallID, string workorderTimeZone, string techid, Nullable<int> serviceCenterId, Nullable<int> workorderID)
        {
            var serialNumberParameter = serialNumber != null ?
                new ObjectParameter("SerialNumber", serialNumber) :
                new ObjectParameter("SerialNumber", typeof(string));
    
            var contactIDParameter = contactID != null ?
                new ObjectParameter("ContactID", contactID) :
                new ObjectParameter("ContactID", typeof(string));
    
            var eRFIDParameter = eRFID.HasValue ?
                new ObjectParameter("ERFID", eRFID) :
                new ObjectParameter("ERFID", typeof(int));
    
            var workorderCallstatusParameter = workorderCallstatus != null ?
                new ObjectParameter("WorkorderCallstatus", workorderCallstatus) :
                new ObjectParameter("WorkorderCallstatus", typeof(string));
    
            var wOEntryStartDateParameter = wOEntryStartDate != null ?
                new ObjectParameter("WOEntryStartDate", wOEntryStartDate) :
                new ObjectParameter("WOEntryStartDate", typeof(string));
    
            var wOEntryEndDateParameter = wOEntryEndDate != null ?
                new ObjectParameter("WOEntryEndDate", wOEntryEndDate) :
                new ObjectParameter("WOEntryEndDate", typeof(string));
    
            var appointmentFromDateParameter = appointmentFromDate != null ?
                new ObjectParameter("AppointmentFromDate", appointmentFromDate) :
                new ObjectParameter("AppointmentFromDate", typeof(string));
    
            var appointmentToDateParameter = appointmentToDate != null ?
                new ObjectParameter("AppointmentToDate", appointmentToDate) :
                new ObjectParameter("AppointmentToDate", typeof(string));
    
            var workorderCalltypeidParameter = workorderCalltypeid != null ?
                new ObjectParameter("WorkorderCalltypeid", workorderCalltypeid) :
                new ObjectParameter("WorkorderCalltypeid", typeof(string));
    
            var originalWorkorderidParameter = originalWorkorderid != null ?
                new ObjectParameter("OriginalWorkorderid", originalWorkorderid) :
                new ObjectParameter("OriginalWorkorderid", typeof(string));
    
            var customerCityParameter = customerCity != null ?
                new ObjectParameter("CustomerCity", customerCity) :
                new ObjectParameter("CustomerCity", typeof(string));
    
            var customerStateParameter = customerState != null ?
                new ObjectParameter("CustomerState", customerState) :
                new ObjectParameter("CustomerState", typeof(string));
    
            var customerZipParameter = customerZip != null ?
                new ObjectParameter("CustomerZip", customerZip) :
                new ObjectParameter("CustomerZip", typeof(string));
    
            var priorityCodeParameter = priorityCode != null ?
                new ObjectParameter("PriorityCode", priorityCode) :
                new ObjectParameter("PriorityCode", typeof(string));
    
            var followupCallIDParameter = followupCallID.HasValue ?
                new ObjectParameter("FollowupCallID", followupCallID) :
                new ObjectParameter("FollowupCallID", typeof(int));
    
            var workorderTimeZoneParameter = workorderTimeZone != null ?
                new ObjectParameter("WorkorderTimeZone", workorderTimeZone) :
                new ObjectParameter("WorkorderTimeZone", typeof(string));
    
            var techidParameter = techid != null ?
                new ObjectParameter("Techid", techid) :
                new ObjectParameter("Techid", typeof(string));
    
            var serviceCenterIdParameter = serviceCenterId.HasValue ?
                new ObjectParameter("ServiceCenterId", serviceCenterId) :
                new ObjectParameter("ServiceCenterId", typeof(int));
    
            var workorderIDParameter = workorderID.HasValue ?
                new ObjectParameter("WorkorderID", workorderID) :
                new ObjectParameter("WorkorderID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_WO_Search", serialNumberParameter, contactIDParameter, eRFIDParameter, workorderCallstatusParameter, wOEntryStartDateParameter, wOEntryEndDateParameter, appointmentFromDateParameter, appointmentToDateParameter, workorderCalltypeidParameter, originalWorkorderidParameter, customerCityParameter, customerStateParameter, customerZipParameter, priorityCodeParameter, followupCallIDParameter, workorderTimeZoneParameter, techidParameter, serviceCenterIdParameter, workorderIDParameter);
        }
    
        public virtual int USP_BillingUpload_Report(string startDate, string endDate)
        {
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_BillingUpload_Report", startDateParameter, endDateParameter);
        }
    }
}
