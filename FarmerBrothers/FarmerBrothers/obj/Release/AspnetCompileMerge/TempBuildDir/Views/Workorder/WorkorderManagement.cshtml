@model FarmerBrothers.Models.WorkorderManagementModel
@{
    ViewBag.Title = "WorkorderManagement";
    Layout = "~/Views/Shared/_Layout.cshtml";

    var serializer = new System.Web.Script.Serialization.JavaScriptSerializer();
    serializer.MaxJsonLength = Int32.MaxValue;
    var jsonClosurePartsModel = serializer.Serialize(Model.CloserPartsOrSKUs);
}

@using FarmerBrothers.Data;
@using Newtonsoft.Json;
@using Syncfusion.MVC.EJ;
@using Syncfusion.EJ;
@using Syncfusion.JavaScript;
@using FarmerBrothers.Models;
<script src="~/Content/jquery.validate.min.js"></script>
<script src="~/Content/jquery.validate.unobtrusive.min.js"></script>


@* Clover Iframe *@
<script src="https://cdn.polyfill.io/v3/polyfill.min.js"></script>
<script src="https://checkout.sandbox.dev.clover.com/sdk.js"></script>
@*<script src="https://checkout.clover.com/sdk.js"></script>*@

<link href="//cdn.syncfusion.com/ej2/ej2-base/styles/material.css" rel="stylesheet" type="text/css" />
<link href="//cdn.syncfusion.com/ej2/ej2-inputs/styles/material.css" rel="stylesheet" type="text/css" />
<link href="//cdn.syncfusion.com/ej2/ej2-dropdowns/styles/material.css" rel="stylesheet" type="text/css" />

<style>
    #StartDateTime_wrapper, #ArrivalDateTime_wrapper, #CompletionDateTime_wrapper {
        opacity: 1;
    }

    #StartDateTime, #ArrivalDateTime, #CompletionDateTime {
        background-color: #eee;
    }

    .e-grid .e-toolbar > .e-horizontal.e-ul {
        vertical-align: middle;
        float: right;
        height: auto;
    }

    a.disabled {
        pointer-events: none;
    }

    .col-xs-1, .col-sm-1, .col-md-1, .col-lg-1, .col-xs-2, .col-sm-2, .col-md-2, .col-lg-2, .col-xs-3, .col-sm-3, .col-md-3, .col-lg-3, .col-xs-4, .col-sm-4, .col-md-4, .col-lg-4, .col-xs-5, .col-sm-5, .col-md-5, .col-lg-5, .col-xs-6, .col-sm-6, .col-md-6, .col-lg-6, .col-xs-7, .col-sm-7, .col-md-7, .col-lg-7, .col-xs-8, .col-sm-8, .col-md-8, .col-lg-8, .col-xs-9, .col-sm-9, .col-md-9, .col-lg-9, .col-xs-10, .col-sm-10, .col-md-10, .col-lg-10, .col-xs-11, .col-sm-11, .col-md-11, .col-lg-11, .col-xs-12, .col-sm-12, .col-md-12, .col-lg-12 {
        position: inherit;
        min-height: 1px;
        padding-right: 15px;
        padding-left: 15px;
    }
</style>

<script type="text/javascript">

    var workOrderOperation = 0;
    var updateUrl = null;
    var SelectedBranches = "";
    var formDirty = false;
    var workOrderStatus = "";
    var files;
    var serverBranchIds = [];
    var serverAssistIds = [];
    var selectedAssistIds = [];
    var selectedResponsibleIds = [];
    var isOpen = false;
    var CurrentUserName = "";
    var estimateHasData = false;
    var finalEstimateHasData = false;
    var isEstimateApprovedChecked = false;
    var completeEstimate = false;
    var trcount =1
    var WODataUpdated = false;

    function onclear() {
        var sign = $("#CustomerSignatureArea").ejSignature("instance");
        sign.clear();
    }


    function onTechSignatureclear() {
        var sign = $("#TechnicianSignatureArea").ejSignature("instance");
        sign.clear();
    }


    $(document).ready(function () {
        //alert("0")
        var TmpCustName = $("#CustomerName").val();
        var TmpCustAdd = $("#Address").val();
        var TmpCustCity = $("#City").val();
        var TmpCustState = $("#State").val();
        var TmpCustZip = $("#ZipCode").val();
        var TmpCustMainCtcNm = $("#MainContactName").val();
        var TmpCustPhone = $("#PhoneNumber").val();
        var TmpCustEmail = $("#MainEmailAddress").val();
        var TmpCallerName = $("#WorkOrder_CallerName").val();
        var TmpContactName = $("#WorkOrder_WorkorderContactName").val();
        var TmpHours = $("#WorkOrder_HoursOfOperation").val();
        var TmpSplClosure = $("#Closure_SpecialClosure").val();
        var TmpPriorityCode = $("#WorkOrder_PriorityCode").val();

        WarrentyRequiredDropdownChange();
        FollowupRequiredChange();

        $(".inputFields").on("change", function(){
            var CustName = $("#CustomerName").val();
            var CustAdd = $("#Address").val();
            var CustCity = $("#City").val();
            var CustState = $("#State").val();
            var CustZip = $("#ZipCode").val();
            var CustMainCtcNm = $("#MainContactName").val();
            var CustPhone = $("#PhoneNumber").val();
            var CustEmail = $("#MainEmailAddress").val();
            var CallerName = $("#WorkOrder_CallerName").val();
            var ContactName = $("#WorkOrder_WorkorderContactName").val();
            var Hours = $("#WorkOrder_HoursOfOperation").val();
            var SplClosure = $("#Closure_SpecialClosure").val();
            var PriorityCode = $("#WorkOrder_PriorityCode").val();

            if(CustName != TmpCustName || CustAdd != TmpCustAdd || CustCity != TmpCustCity || CustState != TmpCustState || CustZip != TmpCustZip
            || CustMainCtcNm != TmpCustMainCtcNm || CustPhone != TmpCustPhone || CustEmail != TmpCustEmail
            || CallerName != TmpCallerName || ContactName != TmpContactName || Hours != TmpHours || SplClosure != TmpSplClosure || PriorityCode != TmpPriorityCode)
            {
                WODataUpdated = true;
            }
            else if($.trim($('#NotesText').val()) != '' || trnsmitOperation == true || DSMOperation == true
                || ESMOperation == true || RSMOperation == true || CCMOperation == true || DarryOperation == true || MikeOperation == true || OtherOperation == true)
            {
                WODataUpdated = true;
            }
            else
            {
                WODataUpdated = false;
            }

            if ($("#CustomerId").val() == "" || $("#CustomerId").val() == "undefined" || $("#CustomerId").val() == null )
            {
                WODataUpdated = false;
            }
        });


        if ($("#EmailCloserButton").length) {
            if ($("#WorkOrder_WorkorderCallstatus").val() == "Accepted"
                || $("#WorkOrder_WorkorderCallstatus").val() == "Completed"
                || $("#WorkOrder_WorkorderCallstatus").val() == "On Site") {
                $('#EmailCloserButton').removeAttr('disabled');
            }
            else {
                $('#EmailCloserButton').toggleClass('hidden');
            }
        }

        if ($("#EmailCloserButton").length) {
            $("#EmailCloserButton").click(function (e) {
                $.ajax({
                    type: "POST",
                    url: "@Url.Action("DispatchEmailCloser", "Workorder")",
                    data: { workOrderId: $("#WorkOrder_WorkorderID").val() }
                }).done(function (jsonResult) {
                    AlertPopup(jsonResult.message);
                });
                e.preventDefault();
            });
        }

        if ($("#ShowAllTech").length) {

            $("#ShowAllTech").change(function () {
                var isChecked = $("#ShowAllTech").is(":checked") ? true : false;
                //alert(isChecked);
                window.location.href = "@Url.Action("WorkorderManagement", "Workorder")" + '?customerId=@Model.Customer.CustomerId&workOrderId=@Model.WorkOrder.WorkorderID&isNewPartsOrder=false&showAllTechs=' + isChecked;
                @*alert(isChecked);
                $.ajax({
                    url: "@Url.Action("WorkorderManagement", "Workorder")"+'/' + @Model.Customer.CustomerId + '/' + @Model.WorkOrder.WorkorderID,
                    type: 'GET',
                    data: { "showAllTechs": isChecked },
                    success: function (jsonResult) {ass

                        if (jsonResult.success == true) {
                            if (jsonResult.data != null) {
                                $("#ClosureAssetsManufacturer").ejDropDownList().data("ejDropDownList").selectItemByText(jsonResult.data.Manufacturer);
                                closureAssetsModelValue = jsonResult.data.Model;
                                //$("#ClosureAssetsModel").ejDropDownList().data("ejDropDownList").selectItemByText(jsonResult.data.Model);
                                $("#ClosureAssetsModel").val(jsonResult.data.Model);
                                $("#ClosureAssetsLocation").val(jsonResult.data.Location);
                            }
                        }
                        else {
                            AlertPopup("|There is a problem to show all Technicians");
                        }
                    }
                })*@
            });

        }

        if ($("#Estimate").length) {

            $("#Estimate").keydown(function (event) {

                //alert(event.keyCode);
                if (event.shiftKey == true) {
                    event.preventDefault();
                }

                if ((event.keyCode >= 48 && event.keyCode <= 57) ||
                    (event.keyCode >= 96 && event.keyCode <= 105) ||
                    event.keyCode == 8 || event.keyCode == 9 || event.keyCode == 37 ||
                    event.keyCode == 39 || event.keyCode == 46 || event.keyCode == 110|| event.keyCode == 190) {

                } else {
                    event.preventDefault();
                }

                var input = event.value;
                if($(this).val().indexOf('.') !== -1 && (event.keyCode == 110|| event.keyCode == 190) && $("#Estimate").val().indexOf('.') < 2)
                    event.preventDefault();
                //if a decimal has been added, disable the "."-button

                if (event.keyCode !=8) {
                    if ($("#Estimate").val().indexOf('.') > 0) {
                        var txtlen = $("#Estimate").val().length;
                        var dotpos = $("#Estimate").val().indexOf(".");
                        if ((txtlen - dotpos) > 2)
                            event.preventDefault();
                    }
                }


            });
        }
        if ($("#FinalEstimate").length) {

            $("#FinalEstimate").keydown(function (event) {


                if (event.shiftKey == true) {
                    event.preventDefault();
                }

                if ((event.keyCode >= 48 && event.keyCode <= 57) ||
                    (event.keyCode >= 96 && event.keyCode <= 105) ||
                    event.keyCode == 8 || event.keyCode == 9 || event.keyCode == 37 ||
                    event.keyCode == 39 || event.keyCode == 46 || event.keyCode == 110|| event.keyCode == 190) {

                } else {
                    event.preventDefault();
                }
                var input = event.value;
                if($(this).val().indexOf('.') !== -1 && (event.keyCode == 110|| event.keyCode == 190) && $("#FinalEstimate").val().indexOf('.') < 2)
                    event.preventDefault();
                //if a decimal has been added, disable the "."-button

                if (event.keyCode !=8) {
                    if ($("#FinalEstimate").val().indexOf('.') > 0) {
                        var txtlen = $("#FinalEstimate").val().length;
                        var dotpos = $("#FinalEstimate").val().indexOf(".");
                        if ((txtlen - dotpos) > 2)
                            event.preventDefault();
                    }
                }


            });
        }
        if ($("#Closure_Email").length) {

            $('.EstimateApprovedByDropDownList').ejDropDownList({
                dataSource : @Html.Raw(Json.Encode(Model.EstimateApprovedByModels)),
                fields: { value : "EstimateApprovedId", text : "EstimateApprovedBy" },
                showRoundedCorner: true,
                enableSorting : true,
                sortOrder : "ascending",
                watermarkText: "Please Select"
            }).data("ejDropDownList").selectItemByValue("@string.Join(",", Model.WorkOrder.EstimateApprovedBy)");


            if ($("#Closure_Email").val()=='') {
                // $("#EmailDSMButton").hide();
                $("#EmailESMButton").hide();
                $("#EmailMikeButton").hide();
                $("#EmailDarrylButton").hide();
                $("#EmailRSMButton").hide();
                $("#EmailCCMButton").hide();
                $("#EscalationOtherEmail").hide();

            }
        }
        if ($("#ExitWorkOrder").length) {
            $("#ExitWorkOrder").click(function (e) {
                if(WODataUpdated)
                {
                    $('[data-popup="popup-dataVerify-1"]').fadeIn(350);
                }
                else
                {
                    $.ajax({
                        type: "POST",
                        url: "@Url.Action("RemoveCurrentUser", "Workorder")",
                        data: { workOrderId: $("#WorkOrder_WorkorderID").val() }
                    }).done(function (jsonResult) {
                        var customerDashboard = $("#isCustomerDashboard").val();
                        if (customerDashboard == "true") {
                             window.location.href = "@Url.Action("CustomerDashboard", "Customer")";
                        }
                        else {
                            window.location.href = "@Url.Action("WorkorderSearch", "Workorder")" + "?IsBack=1";
                        }
                    });
                }
                e.preventDefault();
            });
        }



        if ($("#GeneratePOButton").length) {
            $("#GeneratePOButton").click(function(){
                $.ajax({
                    type: "GET",
                    url: "@Url.Action("GenerateRandomPONumber", "Workorder")",
                }).done(function (jsonResult) {

                    if (jsonResult.success == true)
                    {
                        $("#ThirdPartyPO").val(jsonResult.data)
                    }
                    else{
                        AlertPopup("|There is a problem in PO Generation!");
                    }
                })
            });
        }

        if ($("#GeneratePOButton").length) {
            $('#TransmitEscalationButton' ).toggleClass( 'hidden' );
            //$('#DSMhidenButton' ).toggleClass( 'hidden' );
            $('#ESMhidenButton' ).toggleClass( 'hidden' );
            $('#RSMhidenButton' ).toggleClass( 'hidden' );
            $('#CCMhidenButton' ).toggleClass( 'hidden' );
            $('#MikehidenButton' ).toggleClass( 'hidden' );
            $('#DarryhidenButton' ).toggleClass( 'hidden' );
            $('#OtherhidenButton' ).toggleClass( 'hidden' );


            var workorderId = $("#WorkOrder_WorkorderID").val();
            $("#EmailDSMButton").click(function(){
                //SendEscalationMail("DSM",workorderId);
            });
            $("#EmailESMButton").click(function(){
                //SendEscalationMail("ESM",workorderId);
            });
            $("#EmailMikeButton").click(function(){
                //SendEscalationMail("Mike Fraser",workorderId);
            });
            $("#EmailDarrylButton").click(function(){
                // SendEscalationMail("Darryl McGee",workorderId);
            });
            $("#EmailRSMButton").click(function(){
                // SendEscalationMail("RSM",workorderId);
            });
            $("#EmailCCMButton").click(function(){
                // SendEscalationMail("CCM",workorderId);
            });
        }


        if ($("#ClearPOButton").length) {
            $("#ClearPOButton").click(function(){
                $('#Estimate').val('') ;
                $('#FinalEstimate').val('') ;
                $('#ThirdPartyPO').val('') ;
                $("#WorkOrder_EstimateApprovedBy_hidden").val('');
            });
        }

        //if ($("#WorkOrder_WorkorderContactPhone").length) {
        //    $( '#WorkOrder_WorkorderContactPhone' ).keypress( function ()
        //    {
        //        return this.value.length < 10
        //    } )
        //}

        //if ($("#CustomerOtherPartsPhone").length) {
        //    $( '#CustomerOtherPartsPhone' ).keypress( function ()
        //    {
        //        return this.value.length < 10
        //    } )
        //}


        $( '#CustomerOtherPartsZip' ).keypress( function ()
        {
            return this.value.length < 5
        } )

        //alert("0.1")
        workOrderStatus = "@Model.WorkOrder.WorkorderCallstatus";

        if (!$("#CustomerSignatureImage").length) {
            ImageNotFound();
        }
        if (!$("#TechnicianSignatureImage").length) {
            TechSignatureImageNotFound();
        }
        $("#RemovalDate").ejDatePicker({minDate : new Date(), dateFormat: "MM/dd/yyyy" });

        if ($("#AppointmentDate").val() != null && $("#AppointmentDate").val() != "")
        {
            $("#AppointmentDate").ejDatePicker({
                value: new Date($("#AppointmentDate").val()),
                dateFormat: "MM/dd/yyyy"
            });
        }
        else
        {
            $("#AppointmentDate").ejDatePicker({
                minDate : new Date(), dateFormat: "MM/dd/yyyy"
            });
        }
        //alert("0.2")
        if ($("#PartsOrderDateNeeded").val() != null && $("#PartsOrderDateNeeded").val() != "")
        {
            $("#PartsOrderDateNeeded").ejDatePicker({  value: new Date($("#PartsOrderDateNeeded").val()), dateFormat: "MM/dd/yyyy", minDate : new Date() });
        }
        else
        {
            $("#PartsOrderDateNeeded").ejDatePicker({ minDate : new Date(), dateFormat: "MM/dd/yyyy" });
        }

        var workorderDate = new Date($("#WorkOrder_WorkorderEntryDate").val());
        //var CurrentDate = new Date($("#WorkOrder_WorkorderEntryDate").val());
        var minutes = (((workorderDate.getMinutes() + 7.5)/15 | 0) * 15) % 60;
        workorderDate.setMinutes(minutes);
        //alert("1");
        var startDate = new Date($("#StartDateTime").val());
        var startMinutes = (((startDate.getMinutes() + 7.5)/15 | 0) * 15) % 60;
        startDate.setMinutes(startMinutes);
        //alert("2");
        if ($("#StartDateTime").val() != null && $("#StartDateTime").val() != "")
        {
            //alert("3");
            $("#StartDateTime").ejDateTimePicker(
                {
                    minDateTime: workorderDate,
                    value: new Date($("#StartDateTime").val()),
                    maxDateTime: new Date($("#CurrentDateTime").val()),
                    interval : 15,
                    close: function (args) {
                        //alert("3.0"+args);
                        if (args.value != '' && args.value != null)
                        {
                            // alert("3.1");
                            //alert(args.value);
                            var d = new Date(args.value);
                            d.setHours(d.getHours() + 4, d.getMinutes(), d.getSeconds());

                            $("#ArrivalDateTime").ejDateTimePicker({ enabled: true, minDateTime: args.value, maxDateTime: d,  interval : 15 });
                        }
                        else
                        {
                            //alert("3.2");
                            $("#ArrivalDateTime").ejDateTimePicker({  enabled: false, value: '', interval : 15 });
                        }
                    },
                    focusOut: function (args) {
                        if (args.value != '' && args.value != null)
                        {
                            var d = new Date(args.value);
                            d.setHours(d.getHours() + 4, d.getMinutes(), d.getSeconds());

                            $("#ArrivalDateTime").ejDateTimePicker({ enabled: true, minDateTime: args.value, maxDateTime: d, interval : 15 });
                        }
                        else
                        {
                            $("#ArrivalDateTime").ejDateTimePicker({  enabled: false, value: '', interval : 15 });
                        }
                    }
                });
        }
        else
        {
            //alert($("#CurrentDateTime").val());
            $("#StartDateTime").ejDateTimePicker(
                {
                    minDateTime: workorderDate,
                    maxDateTime: new Date($("#CurrentDateTime").val()),
                    //value: new Date($("#CurrentDateTime").val()),
                    //maxDateTime: new Date("01/05/2018 8:00:00 PM"),
                    interval : 15,
                    close: function (args) {
                        //alert("2.2");
                        if (args.value != '' && args.value != null)
                        {
                            var d = new Date(args.value);
                            d.setHours(d.getHours() + 4, d.getMinutes(), d.getSeconds());

                            //alert("2.3 " + args.value + "Max Value: " + d);
                            $("#ArrivalDateTime").ejDateTimePicker({ enabled: true, minDateTime: args.value, maxDateTime: d, interval : 15 });
                        }
                        else
                        {
                            //alert("2.4");
                            $("#ArrivalDateTime").ejDateTimePicker({  enabled: false, value:'', interval : 15 });
                        }
                    },
                    focusOut: function (args) {
                        //alert("2.5 " + args.value);
                        if (args.value != '' && args.value != null)
                        {
                            var d = new Date(args.value);
                            d.setHours(d.getHours() + 4, d.getMinutes(), d.getSeconds());

                            $("#ArrivalDateTime").ejDateTimePicker({ enabled: true, minDateTime: args.value, maxDateTime: d, interval : 15 });
                        }
                        else
                        {
                            $("#ArrivalDateTime").ejDateTimePicker({  enabled: false, value: '', interval : 15 });
                        }
                    }
                });
        }

        var arrivalDate = new Date($("#ArrivalDateTime").val());
        var arrivalMinutes = (((arrivalDate.getMinutes() + 7.5)/15 | 0) * 15) % 60;
        arrivalDate.setMinutes(arrivalMinutes);

        var strtDate = new Date($("#StartDateTime").val());
        strtDate.setHours(strtDate.getHours() + 4, strtDate.getMinutes(), strtDate.getSeconds());

        if ($("#ArrivalDateTime").val() != null && $("#ArrivalDateTime").val() != "")
        {
            //alert("1.01====" + new Date($("#ArrivalDateTime").val()));
            //alert("1.02====" + arrivalDate);
            //alert("1.01====" + new Date($("#StartDateTime").val()));
            //alert("1.02====" + startDate);
            $("#ArrivalDateTime").ejDateTimePicker(
                {
                    //value: arrivalDate,
                    value: new Date($("#ArrivalDateTime").val()),
                    minDateTime: new Date($("#StartDateTime").val()),
                    maxDateTime: strtDate,//new Date($("#CurrentDateTime").val()),
                    interval : 15,
                    close: function (args) {
                        if (args.value != '' && args.value != null)
                        {
                            var start_actual_time = new Date($("#StartDateTime").val());
                            var end_actual_time = new Date($("#ArrivalDateTime").val());

                            var diff = end_actual_time - start_actual_time;

                            var diffSeconds = diff / 1000;
                            var HH = Math.floor(diffSeconds / 3600);
                            var MM = Math.floor(diffSeconds % 3600) / 60;

                            $("#TravelTimeHours").val(HH);
                            $("#TravelMinutes").val(MM);

                            var d = new Date(args.value);
                            d.setHours(d.getHours() + 12, d.getMinutes(), d.getSeconds());

                            $("#CompletionDateTime").ejDateTimePicker({ enabled: true, minDateTime: args.value, maxDateTime: d/*new Date($("#CurrentDateTime").val())*/, interval: 15 });
                        }
                        else
                        {
                            $("#CompletionDateTime").ejDateTimePicker({  enabled: false, value: '', interval : 15 });
                        }
                    },
                    focusOut: function (args) {
                        if (args.value != '' && args.value != null)
                        {
                            var start_actual_time = new Date($("#StartDateTime").val());
                            var end_actual_time = new Date($("#ArrivalDateTime").val());

                            var diff = end_actual_time - start_actual_time;

                            var diffSeconds = diff / 1000;
                            var HH = Math.floor(diffSeconds / 3600);
                            var MM = Math.floor(diffSeconds % 3600) / 60;

                            $("#TravelTimeHours").val(HH);
                            $("#TravelMinutes").val(MM);

                            var d = new Date(args.value);
                            d.setHours(d.getHours() + 12, d.getMinutes(), d.getSeconds());

                            $("#CompletionDateTime").ejDateTimePicker({ enabled: true, minDateTime: args.value, maxDateTime: d/*new Date($("#CurrentDateTime").val())*/, interval : 15 });
                        }
                        else
                        {
                            $("#CompletionDateTime").ejDateTimePicker({  enabled: false, value: '', interval : 15 });
                        }
                    }
                });
        }
        else
        {
            $("#ArrivalDateTime").ejDateTimePicker(
                {
                    minDateTime: new Date($("#StartDateTime").val()),
                    maxDateTime: strtDate,//new Date($("#CurrentDateTime").val()),
                    //value: new Date($("#CurrentDateTime").val()),
                    interval : 15,
                    close: function (args) {
                        if (args.value != '' && args.value != null)
                        {
                            var start_actual_time = new Date($("#StartDateTime").val());
                            var end_actual_time = new Date($("#ArrivalDateTime").val());

                            var diff = end_actual_time - start_actual_time;

                            var diffSeconds = diff / 1000;
                            var HH = Math.floor(diffSeconds / 3600);
                            var MM = Math.floor(diffSeconds % 3600) / 60;

                            $("#TravelTimeHours").val(HH);
                            $("#TravelMinutes").val(MM);

                            var d = new Date(args.value);
                            d.setHours(d.getHours() + 12, d.getMinutes(), d.getSeconds());

                            $("#CompletionDateTime").ejDateTimePicker({ enabled: true, minDateTime: args.value, maxDateTime:  d/*new Date($("#CurrentDateTime").val())*/, interval : 15 });
                        }
                        else
                        {
                            $("#CompletionDateTime").ejDateTimePicker({  enabled: false, value:'', interval : 15 });
                        }
                    },
                    focusOut: function (args) {
                        if (args.value != '' && args.value != null)
                        {
                            var start_actual_time = new Date($("#StartDateTime").val());
                            var end_actual_time = new Date($("#ArrivalDateTime").val());

                            var diff = end_actual_time - start_actual_time;

                            var diffSeconds = diff/1000;
                            var HH = Math.floor(diffSeconds/3600);
                            var MM = Math.floor(diffSeconds%3600)/60;

                            //var formatted = ((HH < 10)?("0" + HH):HH) + ":" + ((MM < 10)?("0" + MM):MM)
                            $("#TravelTimeHours").val(HH);
                            $("#TravelMinutes").val(MM);


                            var d = new Date(args.value);
                            d.setHours(d.getHours() + 12, d.getMinutes(), d.getSeconds());

                            $("#CompletionDateTime").ejDateTimePicker({ enabled: true, minDateTime: args.value, maxDateTime:  d/*new Date($("#CurrentDateTime").val())*/, interval : 15 });
                        }
                        else
                        {
                            $("#CompletionDateTime").ejDateTimePicker({  enabled: false, value: '', interval : 15 });
                        }
                    }
                });
        }
        //alert("1");
        if ($("#CompletionDateTime").val() != null && $("#CompletionDateTime").val() != "")
        {
            var d = new Date($("#ArrivalDateTime").val());
            d.setHours(d.getHours() + 12, d.getMinutes(), d.getSeconds());
            //alert("1.1====" + new Date($("#CompletionDateTime").val()));
            $("#CompletionDateTime").ejDateTimePicker({ value: new Date($("#CompletionDateTime").val()), minDateTime: new Date($("#ArrivalDateTime").val()), maxDateTime: d/*new Date($("#CurrentDateTime").val())*/,  enabled: true, interval : 15 });
        }
        else
        {
            //alert("2");
            if ($("#StartDateTime").val() != '' && $("#StartDateTime").val() != null)
            {
                //alert("2.1");
                $("#ArrivalDateTime").ejDateTimePicker({ enabled: true, maxDateTime: new Date($("#CurrentDateTime").val()),interval : 15 });

                if ($("#ArrivalDateTime").val() != '' && $("#ArrivalDateTime").val() != null)
                {
                    //alert("2.1");
                    //$("#CompletionDateTime").ejDateTimePicker({ enabled: true, maxDateTime: new Date($("#CurrentDateTime").val()), value: new Date($("#CurrentDateTime").val()), interval : 15 });
                    $("#CompletionDateTime").ejDateTimePicker({ enabled: true, interval: 15 });
                }
                else{
                    $("#CompletionDateTime").ejDateTimePicker({ enabled: false, interval : 15 });
                }
            }
            else{
                //alert("2.2");
                $("#CompletionDateTime").ejDateTimePicker({ enabled: false, interval : 15 });
                $("#ArrivalDateTime").ejDateTimePicker({ enabled: false, interval : 15 });
            }

        }
        //alert("0.3")
        $('#WorkOrderLink').css("color", "white");

        $('#KnownEquipments').ejGrid({
            allowPaging: true,
            isResponsive: true,
            allowSorting:true,
            enableResponsiveRow: true,
            allowTextWrap: true,
            dataSource : @Html.Raw(Json.Encode(Model.KnownEquipments)),
            columns: [
                { field: "Status", headerText: "Status" },
                { field: "Category", headerText: "Category" },
                { field: "Manufacturer", headerText: "Manufacturer" },
                { field: "Model", headerText: "Model" },
                { field: "CatalogID", headerText: "Catalog ID" },
                { field: "Location", headerText: "Location" },
                { field: "SerialNumber", headerText: "Serial Number" }
            ]
        });

        if ($("#DispatchBranches").length)
        {

            $("#DispatchBranches").ejGrid({
                dataSource: ej.parseJSON(@Html.Raw(JsonConvert.SerializeObject(Model.Branches, Formatting.Indented, new JsonSerializerSettings
            {
                ReferenceLoopHandling = ReferenceLoopHandling.Ignore
            }))),
                allowPaging: true,
                pageSettings: { pageSize: 6 },
                allowSorting:true ,
                //allowScrolling : true,
                //scrollSettings: { width: 900, height: 300},
                allowTextWrap: true,
                allowFiltering : true,
                filterSettings : {
                    filterType : "menu"
                },
                actionBegin: "DispatchBranchesActionBegin",
                actionComplete: "DispatchBranchesActionComplete",
                //recordClick: function (args) {
                //    if (args.data["Type"] == "3rd Party")
                //    {
                //        $('#TransmitButton').removeAttr('disabled');
                //    }
                //},
                columns: [
                        { headerText: "Select", template: true, templateID: "#checkBoxColumnTemplate", textAlign: "center", width: 50 },
                        { field: "Distance", headerText: "Distance", width: 80},
                        { field: "Type", headerText: "Type", width: 80 },
                        { field: "BranchName", headerText: "Branch", width: 130},
                        { field: "ServiceCenterId", headerText: "Tech ID", width: 100},
                        { field: "Name", headerText: "Technician" , width: 130 },
                        { field: "City", headerText: "City", width: 90},
                        { field: "Phone", headerText: "Phone #", width: 110  },
                        { field: "ReplaceTechnician", headerText: "Replace Technician", width: 130 },
                        { field: "AlternativePhone", headerText: "Alternate #", width: 130 },
                        { field: "isUnavailable", headerText: "isUnavailable" , visible: false }
                ],
                queryCellInfo: "queryCellInfo"
            });

            $("#Technicians").ejGrid({
                dataSource: ej.parseJSON(@Html.Raw(JsonConvert.SerializeObject(Model.Technicians, Formatting.Indented, new JsonSerializerSettings
            {
                ReferenceLoopHandling = ReferenceLoopHandling.Ignore
            }))),
                allowPaging: true,
                pageSettings: { pageSize: 6 },
                allowSorting:true ,
                allowTextWrap: true,
                actionBegin: "DispatchBranchesActionBegin",
                actionComplete: "TechGridActionComplete",
                recordClick: function (args) {
                    if ((($(".assistCheckBox[data-branchid=" + args.data["TechId"] + "]").is(':checked')
                        || $(".responsibleRaidoButton[data-branchid=" + args.data["TechId"] + "]").is(':checked')))
                        && workOrderStatus.localeCompare("Closed") != 0
                        && workOrderStatus.localeCompare("Invoiced") != 0
                        && workOrderStatus.localeCompare("Completed") != 0
                        && workOrderStatus.localeCompare("Attempting") != 0)
                    {
                        $('#TransmitButton').removeAttr('disabled');
                        $('#AcceptButton').removeAttr('disabled');
                    }
                    else{
                        $('#TransmitButton').attr('disabled', 'disabled');
                        $('#AcceptButton').attr('disabled', 'disabled');
                    }

                    if ((($(".assistCheckBox[data-branchid=" + args.data["TechId"] + "]").is(':checked')
                        || $(".responsibleRaidoButton[data-branchid=" + args.data["TechId"] + "]").is(':checked')))
                        && workOrderStatus.localeCompare("Pending Acceptance") == 0) {
                        $('#TransmitButton').removeAttr('disabled');
                    }
                    else {
                        $('#AcceptButton').attr('disabled', 'disabled');
                    }

                    if ((($(".assistCheckBox[data-branchid=" + args.data["TechId"] + "]").is(':checked')
                       || $(".responsibleRaidoButton[data-branchid=" + args.data["TechId"] + "]").is(':checked')))
                       && workOrderStatus.localeCompare("Scheduled") == 0) {
                        $('#AcceptButton').removeAttr('disabled');
                        //$('#TransmitButton').attr('disabled', 'disabled');
                    }

                    if(args.data["isActive"] == true)
                    {
                        $('#AcceptButton').removeAttr('disabled');
                        $('#TransmitButton').removeAttr('disabled');
                        $('#EmailCloserButton').removeAttr('disabled');
                    }
                    else
                    {
                        $('#AcceptButton').attr('disabled', 'disabled');
                        $('#TransmitButton').attr('disabled', 'disabled');
                        $('#EmailCloserButton').attr('disabled', 'disabled');
                    }

                },
                columns: [
                        { headerText: "Responsible", template: true, templateID: "#responsibleRaidoButtonTemplate", textAlign: "center", width: 100 },
                        //{ headerText: "Assist", template: true, templateID: "#assistCheckBoxTemplate", textAlign: "center", width: 80 },
                        { field: "ServiceCenterId", headerText: "Id", visible: false},
                        { field: "TechId", headerText: "Tech ID", visible: false},
                        { field: "TechName", headerText: "Tech Name" },
                        { field: "TechPhone", headerText: "Tech Phone" },
                        { field: "AssignedStatus", headerText: "Assigned Status" },
                        { field: "LastCommunication", headerText: "Last Communication", width: 120 } ,
                        { field: "EventScheduleDate", headerText: "Event Scheduled to", width: 120 }
                ]
            });

            @foreach (var d in Model.BranchIds)
            {
                @:serverBranchIds.push("@d");

            }

            $(".branchCheckBox").each(function() {
                if (serverBranchIds.indexOf($(this).attr("data-branchid")) >= 0)
                {
                    this.checked = true;
                }
            });

            if (serverBranchIds.length > 0)
            {
                //alert("1")
                var uniqueBranchIds = [];
                $.each(serverBranchIds, function(i, el){
                    if($.inArray(el, uniqueBranchIds) === -1) uniqueBranchIds.push(el);
                });
                //alert(JSON.stringify(uniqueBranchIds));
                $.ajax({
                    type: "POST",
                    url: "@Url.Action("GetTechnician", "Workorder")",
                    data: { branchIds: uniqueBranchIds, workOrderId : $("#WorkOrder_WorkorderID").val() }
                }).done(function (jsonResult) {

                    if (jsonResult.success == true)
                    {
                        var obj = $("#Technicians").ejGrid("instance");
                        obj.dataSource(jsonResult.data);

                        @foreach (var d in Model.AssistTechIds)
                        {
                            @:serverAssistIds.push("@d");
}

                        $(".assistCheckBox").each(function() {
                            if (serverAssistIds.indexOf($(this).attr("data-branchid")) >= 0)
                            {
                                this.checked = true;
                            }
                        });

                        var responsibleTech = "@Model.ResponsibleTechId";
                        $(".responsibleRaidoButton").each(function() {
                            if (responsibleTech == $(this).attr("data-branchid"))
                            {
                                this.checked = true;
                            }
                        });
                        responsibleRaidoButtonclick();
                    }
                    else
                    {
                        AlertPopup("|There is a problem in getting Technician details!");
                    }
                });
            }
            //alert("0.5")
            $(".branchCheckBox").change(function () {
                if ($(this).is(':checked') ==  false)
                {
                    var uniqueNames = [];
                    $.each(serverBranchIds, function(i, el){
                        if($.inArray(el, uniqueNames) === -1) uniqueNames.push(el);
                    });

                    var location = uniqueNames.indexOf($(this).attr("data-branchid"));
                    if(location != -1) {
                        uniqueNames.splice(location, 1);
                    }
                    serverBranchIds = uniqueNames;
                }
                else if (jQuery.inArray( $(this).attr("data-branchid"), serverBranchIds ) < 0) {
                    serverBranchIds.push($(this).attr("data-branchid"));
                }

                SelectBranchesAndTechs();
                $('#TransmitButton').attr('disabled', 'disabled');
            });
        }

        var dataManagerParts = ej.DataManager({
            url: '@Url.Action("GetPartsData","Workorder")'
        });

        $('.SolutionsDropDownList').ejDropDownList({
            dataSource : @Html.Raw(Json.Encode(Model.Solutions)),
            width: 300,
            fields: { value : "SolutionId", text : "Description" },
            showRoundedCorner: true,
            enableFilterSearch: true,
            watermarkText: "Please Select"
        }).data("ejDropDownList")

        $('#AppointmentReasonDropdown').ejDropDownList({
            dataSource : @Html.Raw(Json.Encode(Model.AppointmentReasons)),
            width: 300,
            fields: { value : "FBStatusID", text : "FBStatus" },
            showRoundedCorner: true,
            enableFilterSearch: true,
            watermarkText: "Please Select"
        }).data("ejDropDownList")

        $("form").submit(function (event) {
            //alert("1--1");

            //var el = $('#SaveWorkOrderId');
            //el.prop('disabled', true);
            //setTimeout(function () { el.prop('disabled', false); }, 6000);

            //if ($("#WorkOrder_WorkorderContactPhone").length && $( '#WorkOrder_WorkorderContactPhone' ).val() !='') {
            //    //alert("1--2");
            //    if (!((ValidateContactPhoneNumber( $( '#WorkOrder_WorkorderContactPhone' ).val() ) == true)))
            //    {
            //        //alert("1.5");
            //        event.preventDefault();
            //        return  false;
            //    }
            //}
            //else
            //{
            //    //alert("1--3");
            //}
            //if ($("#CustomerOtherPartsPhone").length) {
            //    if (!(($( '#CustomerOtherPartsPhone' ).val() !='' && ValidateContactPhoneNumber( $( '#CustomerOtherPartsPhone' ).val() ) == true) ||$( '#CustomerOtherPartsPhone' ).val() ==''))
            //    {
            //        event.preventDefault();
            //        return  false;
            //    }
            //}
            //else
            //{
            //}

            //alert("1.3");
            if( $('#Closure_CustomerEmail').length )
            {
                if (!(($( '#Closure_CustomerEmail' ).val() !='' && ValidateCustomerEmail( $( '#Closure_CustomerEmail' ).val() ) == true) ||
                        $( '#Closure_CustomerEmail' ).val() ==''))
                {
                    event.preventDefault();
                    return  false;
                }
            }
            //alert("status = "+$("#WorkOrder_WorkorderCallstatus").val() );

            if($("#WorkOrder_WorkorderCallstatus").val() == "Hold for AB")
            {
                if ($("#PhoneNumber").length) {
                    //alert($( '#PhoneNumber' ).val() !='');
                    //alert(ValidatePhoneNumber( $( '#PhoneNumber' ).val() ));
                    if (($( '#PhoneNumber' ).val() !='') && !(ValidatePhoneNumber( $( '#PhoneNumber' ).val() ) == true))
                    {
                        //alert("1.5");
                        event.preventDefault();
                        return  false;
                    }
                }

                //alert("1.6");
                if ($("#MainEmailAddress").length) {
                    if (($( '#MainEmailAddress' ).val() !='') && !(ValidateEmail( $( '#MainEmailAddress' ).val() ) == true))
                    {
                        //alert("1.5");
                        event.preventDefault();
                        return  false;
                    }
                }

                var nonFBCustChk = $(".IsNonFBCustomerChk").is(":checked");
                if (nonFBCustChk == true) {
                    var nonFBCustomerName = $(".nonFbCustomerList").val();
                    if(nonFBCustomerName <= 0 || nonFBCustomerName == 'n/a')
                    {
                        AlertPopup( "|Please Select NonFBCustomer from the Dropdown list" );
                        event.preventDefault();
                        return  false;
                    }
                }
            }

            //alert("1.2");

            var operation = $("#Operation").val();

            if (operation > 0) {
                //alert("2");
                var notesItems = [];

                $.each(newNotesArray, function( index, value ) {
                    var item = { Text: value, Value: -1 };
                    notesItems.push(item);
                });
                //alert(JSON.stringify(notesItems));
                //alert(notesItems.length);

                if ($('#WorkOrder_WorkorderCalltypeid').val() != 1600
                    && $("#EquipmentDetails").ejGrid("instance") != null
                    && $("#EquipmentDetails").ejGrid("instance").model != undefined
                    && $("#EquipmentDetails").ejGrid("instance").model.dataSource.dataSource.json != null
                    && $("#EquipmentDetails").ejGrid("instance").model.dataSource.dataSource.json.length <= 0
                    && operation != 7 && $("#Closure_SpecialClosure").val() != "No Service Required"
                    && operation != 7 && $("#Closure_SpecialClosure").val() != "Cancellation")
                {
                    AlertPopup("|At least one equipment is required to create a Work Order!");
                }
                else if ($('#Estimate').length && (!($('#Estimate').val() !=''  &&  $("#WorkOrder_EstimateApprovedBy_hidden").val() != ""  && $('#ThirdPartyPO').val() !='') &&
                        !($('#Estimate').val() ==''  && $("#WorkOrder_EstimateApprovedBy_hidden").val() == ""   && $('#ThirdPartyPO').val() ==''))) {
                    AlertPopup("|Please enter complete estimate details to proceed!");
                }
                else
                {
                    //alert("4");
                    if ($("#ActionWorkorderSave").length)
                    {
                        $("#ActionWorkorderSave").val("");
                    }
                    else
                    {
                        var input1 = $("<input id='ActionWorkorderSave'>")
                            .attr("type", "hidden")
                            .attr("name", "action:WorkorderSave").val("");
                        $(this).append($(input1));
                    }
                    //alert("4.1");
                    if ($("#EquipmentDetailsHidden").length)
                    {
                        $("#EquipmentDetailsHidden").val(JSON.stringify($("#EquipmentDetails").ejGrid("instance").model.dataSource.dataSource.json));
                    }
                    else
                    {
                        if ($("#EquipmentDetails").ejGrid("instance").model!=undefined) {
                            var input2 = $("<input id='EquipmentDetailsHidden'>")
                                .attr("type", "hidden")
                                .attr("name", "EquipmentDetailsHidden").val(JSON.stringify($("#EquipmentDetails").ejGrid("instance").model.dataSource.dataSource.json));
                            $(this).append($(input2));
                        }
                    }



                    //alert("4.1.0");
                    //alert($("#NonSerializedDetailsHidden").length);
                    if ($("#NonSerializedDetailsHidden").length)
                    {
                        $("#NonSerializedDetailsHidden").val(JSON.stringify($("#NonEquipmentDetails").ejGrid("instance").model.dataSource.dataSource.json));
                    }
                    else
                    {
                        //alert("Error");
                        //alert(JSON.stringify($("#NonEquipmentDetails").ejGrid("instance").model.dataSource.dataSource.json));
                        if ($("#NonEquipmentDetails").ejGrid("instance").model!=undefined) {
                            var input3 = $("<input id='NonSerializedDetailsHidden'>")
                                .attr("type", "hidden")
                                .attr("name", "NonSerializedDetailsHidden").val(JSON.stringify($("#NonEquipmentDetails").ejGrid("instance").model.dataSource.dataSource.json));
                            $(this).append($(input3));
                        }
                    }
                    //alert("4.1.0.1");

                    if ($("#WorkOrderPartsHidden").length)
                    {
                        $("#WorkOrderPartsHidden").val(JSON.stringify($("#WorkOrderParts").ejGrid("instance").model.dataSource));
                    }
                    else
                    {
                        //////alert("Error ="+JSON.stringify($("#WorkOrderParts")));
                        //////alert("Error1 ="+JSON.stringify($("#WorkOrderParts").ejGrid("instance")));
                        //////alert("Error2 ="+JSON.stringify($("#WorkOrderParts").ejGrid("instance").model.dataSource.dataSource.json));
                        if ($("#WorkOrderParts").ejGrid("instance").model!=undefined) {
                            var input4 = $("<input id='WorkOrderPartsHidden'>")
                                                   .attr("type", "hidden")
                                                   .attr("name", "WorkOrderPartsHidden").val(JSON.stringify($("#WorkOrderParts").ejGrid("instance").model.dataSource));
                            $(this).append($(input4));
                        }

                    }
                    //alert("4.1.1");
                    if ($("#WorkOrderNotesHidden").length)
                    {
                        $("#WorkOrderNotesHidden").val(JSON.stringify(notesItems));
                    }
                    else
                    {
                        //alert("4.1.2");
                        var input5 = $("<input id='WorkOrderNotesHidden'>")
                                .attr("type", "hidden")
                                .attr("name", "WorkOrderNotesHidden").val(JSON.stringify(notesItems));
                        $(this).append($(input5));
                    }
                    //alert("4.2");
                    var assistIds = [];
                    $(".assistCheckBox:checked").each(function() {
                        assistIds.push($(this).attr("data-branchid"));
                    });

                    if ($("#AssistTechIdsHidden").length)
                    {
                        $("#AssistTechIdsHidden").val(JSON.stringify(assistIds));
                    }
                    else
                    {
                        var input6 = $("<input id='AssistTechIdsHidden'>")
                                .attr("type", "hidden")
                                .attr("name", "AssistTechIdsHidden").val(JSON.stringify(assistIds));
                        $(this).append($(input6));
                    }

                    var responsibleId = [];
                    $(".responsibleRaidoButton:checked").each(function() {
                        responsibleId.push($(this).attr("data-branchid"));
                    });

                    if ($("#ResponsibleTechIdsHidden").length)
                    {
                        $("#ResponsibleTechIdsHidden").val(JSON.stringify(assistIds));
                    }
                    else
                    {
                        var input7 = $("<input id='ResponsibleTechIdsHidden'>")
                                .attr("type", "hidden")
                                .attr("name", "ResponsibleTechIdsHidden").val(JSON.stringify(responsibleId));
                        $(this).append($(input7));
                    }
                    //alert("4.2.1");
                    //Added Hidden value for Closure section

                    if ($("#WorkOrderClosureHidden").length)
                    {
                        $("#WorkOrderClosureHidden").val(JSON.stringify($("#ClosureAssets").ejGrid("instance").model.dataSource.dataSource.json));
                    }
                    else
                    {
                        if ($("#ClosureAssets").ejGrid("instance").model!=undefined) {
                            var input8 = $("<input id='WorkOrderClosureHidden'>")
                           .attr("type", "hidden")
                           .attr("name", "WorkOrderClosureHidden").val(JSON.stringify($("#ClosureAssets").ejGrid("instance").model.dataSource.dataSource.json));
                            $(this).append($(input8));
                        }

                    }

                    //alert("4.3");
                    var gridDataArr = new Array();

                    $.each($("[class*='gridcls_']"),function(i,item){
                        gridDataArr.push(($(item).ejGrid("instance")._currentJsonData));
                    });
                    //alert("4.4");
                    if ($("#ChildGridDataHidden").length)
                    {
                        $("#ChildGridDataHidden").val(JSON.stringify(gridDataArr));
                    }
                    else
                    {
                        var input12 = $("<input id='ChildGridDataHidden'>")
                                .attr("type", "hidden")
                                .attr("name", "ChildGridDataHidden").val(JSON.stringify(gridDataArr));
                        $(this).append($(input12));
                    }

                    var systeminfos = '';
                    var symptomdrps = '';
                    var qualityIssueChecks = '';
                    var nemwNumbers = '';
                    var electricalPhases= '';
                    var machineAmperage='';
                    var unitFitSpace='';
                    var voltage='';
                    var counterUnitSpace='';
                    var waterLine='';
                    var comments = '';
                    var locations = '';
                    var temperatures = '';
                    var weights = "";
                    var ratios = "";
                    var settings = '';
                    var counters = '';
                    var emails = '';
                    var works = '';
                    var noParts = '';

                    debugger;

                    var rows = $("#ClosureAssets").find($("[role='row']"));
                    $.each(rows, function () {

                        var closestClosurePanel = $(this).closest($(".ClosurePanel"));
                        if (!closestClosurePanel.hasClass("NonSurveyPanel"))
                        {
                            var nextRow = $(this).closest('tr').next('tr');
                            if (nextRow.hasClass("e-detailrow"))
                            {
                                var systeminfodropdown          =       nextRow.find($(".systeminfodrp"));
                                var symptomdrpdropdown          = 		nextRow.find($(".symptomdrp"));
                                var qualityIssueChecksdropdown  =		nextRow.find($(".QualityIssueChecks"));
                                var nemwNumberdropdown          = 		nextRow.find($(".NemwNumber"));
                                var electricalPhasedropdown     = 		nextRow.find($(".ElectricalPhase"));
                                var machineAmperagedropdown     = 		nextRow.find($(".MachineAmperage"));
                                var unitFitSpacedropdown        = 		nextRow.find($(".UnitFitSpace"));
                                var voltagedropdown             = 		nextRow.find($(".Voltage"));
                                var counterUnitSpacedropdown    = 		nextRow.find($(".CounterUnitSpace"));
                                var waterLinedropdown           = 		nextRow.find($(".WaterLine"));
                                var commentstextbox             =       nextRow.find($(".Comments"));
                                var locationtextbox             =       nextRow.find($(".AssetLocation"));
                                var temperaturestextbox         =       nextRow.find($(".Temparture"));
                                var weightstextbox         =       nextRow.find($(".Weight"));
                                var ratiostextbox         =       nextRow.find($(".Ratio"));
                                var settingstextbox             =       nextRow.find($(".Settings"));
                                var counterstextbox             =       nextRow.find($(".Counter"));
                                var emailstextbox               =       nextRow.find($(".Email"));
                                var workstextbox                =       nextRow.find($(".WorkPerformed"));
                                var noPartsCheckbox             =       nextRow.find($(".NoPartsNeeded"));
                                var imageControl                =       nextRow.find($(".issuepicturecls"));


                                if (systeminfodropdown != null && systeminfodropdown != "undefined" && systeminfodropdown.length > 0)
                                {
                                    systeminfos = systeminfos + systeminfodropdown.val() + "|";
                                }
                                else{
                                    systeminfos = systeminfos + "|";
                                }

                                if (symptomdrpdropdown != null && symptomdrpdropdown != "undefined" && symptomdrpdropdown.length > 0)
                                {
                                    symptomdrps = symptomdrps + symptomdrpdropdown.val() + "|";
                                }
                                else{
                                    symptomdrps = symptomdrps + "|";
                                }

                                if (qualityIssueChecksdropdown != null && qualityIssueChecksdropdown != "undefined" && qualityIssueChecksdropdown.length > 0)
                                {
                                    qualityIssueChecks = qualityIssueChecks + qualityIssueChecksdropdown.is(':checked') + "|";
                                }
                                else{
                                    qualityIssueChecks = qualityIssueChecks + "|";
                                }

                                if (nemwNumberdropdown != null && nemwNumberdropdown != "undefined" && nemwNumberdropdown.length > 0)
                                {
                                    nemwNumbers = nemwNumbers + nemwNumberdropdown.val() + "|";
                                }
                                else{
                                    nemwNumbers = nemwNumbers + "|";
                                }

                                if (electricalPhasedropdown != null && electricalPhasedropdown != "undefined" && electricalPhasedropdown.length > 0)
                                {
                                    electricalPhases = electricalPhases + electricalPhasedropdown.val() + "|";
                                }
                                else{
                                    electricalPhases = electricalPhases + "|";
                                }

                                if (machineAmperagedropdown != null && machineAmperagedropdown != "undefined" && machineAmperagedropdown.length > 0)
                                {
                                    machineAmperage = machineAmperage + machineAmperagedropdown.val() + "|";
                                }
                                else{
                                    machineAmperage = machineAmperage + "|";
                                }

                                if (unitFitSpacedropdown != null && unitFitSpacedropdown != "undefined" && unitFitSpacedropdown.length > 0)
                                {
                                    unitFitSpace = unitFitSpace + unitFitSpacedropdown.val() + "|";
                                }
                                else{
                                    unitFitSpace = unitFitSpace + "|";
                                }

                                if (voltagedropdown != null && voltagedropdown != "undefined" && voltagedropdown.length > 0)
                                {
                                    voltage = voltage + voltagedropdown.val() + "|";
                                }
                                else{
                                    voltage = voltage + "|";
                                }

                                if (counterUnitSpacedropdown != null && counterUnitSpacedropdown != "undefined" && counterUnitSpacedropdown.length > 0)
                                {
                                    counterUnitSpace = counterUnitSpace + counterUnitSpacedropdown.val() + "|";
                                }
                                else{
                                    counterUnitSpace = counterUnitSpace + "|";
                                }

                                if (waterLinedropdown != null && waterLinedropdown != "undefined" && waterLinedropdown.length > 0)
                                {
                                    waterLine = waterLine + waterLinedropdown.val() + "|";
                                }
                                else{
                                    waterLine = waterLine + "|";
                                }

                                if (commentstextbox != null && commentstextbox != "undefined" && commentstextbox.length > 0)
                                {
                                    comments = comments + commentstextbox.val() + "|";
                                }
                                else{
                                    comments = comments + "|";
                                }

                                if (locationtextbox != null && locationtextbox != "undefined" && locationtextbox.length > 0)
                                {
                                    locations = locations + locationtextbox.val() + "|";
                                }
                                else{
                                    locations = locations + "|";
                                }

                                if (temperaturestextbox != null && temperaturestextbox != "undefined" && temperaturestextbox.length > 0)
                                {
                                    temperatures = temperatures + temperaturestextbox.val() + "|";
                                }
                                else{
                                    temperatures = temperatures + "|";
                                }

                                if (weightstextbox != null && weightstextbox != "undefined" && weightstextbox.length > 0)
                                {
                                    weights = weights + weightstextbox.val() + "|";
                                }
                                else{
                                    weights = weights + "|";
                                }

                                if (ratiostextbox != null && ratiostextbox != "undefined" && ratiostextbox.length > 0)
                                {
                                    ratios = ratios + ratiostextbox.val() + "|";
                                }
                                else{
                                    ratios = ratios + "|";
                                }

                                if (settingstextbox != null && settingstextbox != "undefined" && settingstextbox.length > 0)
                                {
                                    settings = settings + settingstextbox.val() + "|";
                                }
                                else{
                                    settings = settings + "|";
                                }

                                if (counterstextbox != null && counterstextbox != "undefined" && counterstextbox.length > 0)
                                {
                                    counters = counters + counterstextbox.val() + "|";
                                }
                                else{
                                    counters = counters + "|";
                                }

                                if (emailstextbox != null && emailstextbox != "undefined" && emailstextbox.length > 0)
                                {
                                    emails = emails + emailstextbox.val() + "|";
                                }
                                else{
                                    emails = emails + "|";
                                }

                                if (workstextbox != null && workstextbox != "undefined" && workstextbox.length > 0)
                                {
                                    works = works + workstextbox.val() + "|";
                                }
                                else{
                                    works = works + "|";
                                }

                                if (noPartsCheckbox != null && noPartsCheckbox != "undefined" && noPartsCheckbox.length > 0)
                                {
                                    noParts = noParts + noPartsCheckbox.is(':checked') + "|";
                                }
                                else{
                                    noParts = noParts + "|";
                                }
                            }
                            else{
                                systeminfos         = systeminfos + "|";
                                symptomdrps         = symptomdrps + "|";
                                qualityIssueChecks  = qualityIssueChecks + "|";
                                nemwNumbers         = nemwNumbers + "|";
                                electricalPhases    = electricalPhases + "|";
                                machineAmperage     = machineAmperage + "|";
                                unitFitSpace        = unitFitSpace + "|";
                                voltage             = voltage + "|";
                                counterUnitSpace    = counterUnitSpace + "|";
                                waterLine           = waterLine + "|";
                                comments            = comments + '|';
                                locations           = locations + '|';
                                temperatures        = temperatures + '|';
                                weights        = weights + '|';
                                ratios          = ratios + '|';
                                settings            = settings + '|';
                                counters            = counters + '|';
                                emails              = emails + '|';
                                works               = works + '|';
                                noParts             = noParts + '|';
                            }
                        }
                    });

                    //alert("5");
                    if ($("#SystemsHidden").length)
                    {
                        $("#SystemsHidden").val(JSON.stringify(systeminfos));
                    }
                    else
                    {
                        var input9 = $("<input id='SystemsHidden'>")
                                .attr("type", "hidden")
                                .attr("name", "SystemsHidden").val(JSON.stringify(systeminfos));
                        $(this).append($(input9));
                    }

                    if ($("#SymptomsHidden").length)
                    {
                        $("#SymptomsHidden").val(JSON.stringify(symptomdrps));
                    }
                    else
                    {
                        var input10 = $("<input id='SymptomsHidden'>")
                                .attr("type", "hidden")
                                .attr("name", "SymptomsHidden").val(JSON.stringify(symptomdrps));
                        $(this).append($(input10));
                    }

                    if ($("#QualityIssueHidden").length)
                    {
                        $("#QualityIssueHidden").val(JSON.stringify(qualityIssueChecks));
                    }
                    else
                    {
                        var input11 = $("<input id='QualityIssueHidden'>")
                                .attr("type", "hidden")
                                .attr("name", "QualityIssueHidden").val(JSON.stringify(qualityIssueChecks));
                        $(this).append($(input11));
                    }

                    if ($("#NemwNumberHidden").length)
                    {
                        $("#NemwNumberHidden").val(JSON.stringify(nemwNumbers));
                    }
                    else
                    {
                        var input13 = $("<input id='NemwNumberHidden'>")
                                .attr("type", "hidden")
                                .attr("name", "NemwNumberHidden").val(JSON.stringify(nemwNumbers));
                        $(this).append($(input13));
                    }

                    if ($("#ElectricalPhaseHidden").length)
                    {
                        $("#ElectricalPhaseHidden").val(JSON.stringify(electricalPhases));
                    }
                    else
                    {
                        var input14 = $("<input id='ElectricalPhaseHidden'>")
                                .attr("type", "hidden")
                                .attr("name", "ElectricalPhaseHidden").val(JSON.stringify(electricalPhases));
                        $(this).append($(input14));
                    }

                    if ($("#MachineAmperageHidden").length)
                    {
                        $("#MachineAmperageHidden").val(JSON.stringify(machineAmperage));
                    }
                    else
                    {
                        var input15 = $("<input id='MachineAmperageHidden'>")
                                .attr("type", "hidden")
                                .attr("name", "MachineAmperageHidden").val(JSON.stringify(machineAmperage));
                        $(this).append($(input15));
                    }

                    if ($("#UnitFitSpaceHidden").length)
                    {
                        $("#UnitFitSpaceHidden").val(JSON.stringify(unitFitSpace));
                    }
                    else
                    {
                        var input16 = $("<input id='UnitFitSpaceHidden'>")
                                .attr("type", "hidden")
                                .attr("name", "UnitFitSpaceHidden").val(JSON.stringify(unitFitSpace));
                        $(this).append($(input16));
                    }

                    if ($("#VoltageHidden").length)
                    {
                        $("#VoltageHidden").val(JSON.stringify(voltage));
                    }
                    else
                    {
                        var input17 = $("<input id='VoltageHidden'>")
                                .attr("type", "hidden")
                                .attr("name", "VoltageHidden").val(JSON.stringify(voltage));
                        $(this).append($(input17));
                    }

                    if ($("#CounterUnitSpaceHidden").length)
                    {
                        $("#CounterUnitSpaceHidden").val(JSON.stringify(counterUnitSpace));
                    }
                    else
                    {
                        var input18 = $("<input id='CounterUnitSpaceHidden'>")
                                .attr("type", "hidden")
                                .attr("name", "CounterUnitSpaceHidden").val(JSON.stringify(counterUnitSpace));
                        $(this).append($(input18));
                    }

                    if ($("#WaterLineHidden").length)
                    {
                        $("#WaterLineHidden").val(JSON.stringify(waterLine));
                    }
                    else
                    {
                        var input19 = $("<input id='WaterLineHidden'>")
                                .attr("type", "hidden")
                                .attr("name", "WaterLineHidden").val(JSON.stringify(waterLine));
                        $(this).append($(input19));
                    }

                    if ($("#CommentsHidden").length)
                    {
                        $("#CommentsHidden").val(JSON.stringify(comments));
                    }
                    else
                    {
                        var input20 = $("<input id='CommentsHidden'>")
                                .attr("type", "hidden")
                                .attr("name", "CommentsHidden").val(JSON.stringify(comments));
                        $(this).append($(input20));
                    }

                    if ($("#LocationsHidden").length)
                    {
                        $("#LocationsHidden").val(JSON.stringify(locations));
                    }
                    else
                    {
                        var input21 = $("<input id='LocationsHidden'>")
                                .attr("type", "hidden")
                                .attr("name", "LocationsHidden").val(JSON.stringify(locations));
                        $(this).append($(input21));
                    }

                    if ($("#TemperaturesHidden").length)
                    {
                        $("#TemperaturesHidden").val(JSON.stringify(temperatures));
                    }
                    else
                    {
                        var input22 = $("<input id='TemperaturesHidden'>")
                                .attr("type", "hidden")
                                .attr("name", "TemperaturesHidden").val(JSON.stringify(temperatures));
                        $(this).append($(input22));
                    }

                    var data = new FormData();
                    $.each(files, function(key, value)
                    {
                        data.append(key, value);
                    });

                    if ($("#SettingsHidden").length)
                    {
                        $("#SettingsHidden").val(JSON.stringify(settings));
                    }
                    else
                    {
                        var input23 = $("<input id='SettingsHidden'>")
                                .attr("type", "hidden")
                                .attr("name", "SettingsHidden").val(JSON.stringify(settings));
                        $(this).append($(input23));
                    }

                    if ($("#CountersHidden").length)
                    {
                        $("#CountersHidden").val(JSON.stringify(counters));
                    }
                    else
                    {
                        var input24 = $("<input id='CountersHidden'>")
                                .attr("type", "hidden")
                                .attr("name", "CountersHidden").val(JSON.stringify(counters));
                        $(this).append($(input24));
                    }

                    if ($("#EmailsHidden").length)
                    {
                        $("#EmailsHidden").val(JSON.stringify(emails));
                    }
                    else
                    {
                        var input25 = $("<input id='EmailsHidden'>")
                                .attr("type", "hidden")
                                .attr("name", "EmailsHidden").val(JSON.stringify(emails));
                        $(this).append($(input25));
                    }

                    if ($("#WorksHidden").length)
                    {
                        $("#WorksHidden").val(JSON.stringify(works));
                    }
                    else
                    {
                        var input26 = $("<input id='WorksHidden'>")
                                .attr("type", "hidden")
                                .attr("name", "WorksHidden").val(JSON.stringify(works));
                        $(this).append($(input26));
                    }

                    if ($("#NoPartsHidden").length)
                    {
                        $("#NoPartsHidden").val(JSON.stringify(noParts));
                    }
                    else
                    {
                        var input27 = $("<input id='NoPartsHidden'>")
                                .attr("type", "hidden")
                                .attr("name", "NoPartsHidden").val(JSON.stringify(noParts));
                        $(this).append($(input27));
                    }

                    if ($("#NewWorkorderCallstatusHidden").length)
                    {
                        $("#NewWorkorderCallstatusHidden").val($('#WorkorderCallStatus').text());
                    }
                    else
                    {
                        var input28 = $("<input id='NewWorkorderCallstatusHidden'>")
                                .attr("type", "hidden")
                                .attr("name", "NewWorkorderCallstatusHidden").val($('#WorkorderCallStatus').text());
                        $(this).append($(input28));
                    }

                    if ($("#SpawnReasonHidden").length)
                    {
                        $("#SpawnReasonHidden").val($('#SpawnReasonDropdown').val());
                    }
                    else
                    {
                        var input29 = $("<input id='SpawnReasonHidden'>")
                                .attr("type", "hidden")
                                .attr("name", "SpawnReasonHidden").val($('#SpawnReasonDropdown').val());
                        $(this).append($(input29));
                    }

                    if ($("#SpanReasonNotesHidden").length)
                    {
                        $("#SpanReasonNotesHidden").val($('#SpanReasonNotes').val());
                    }
                    else
                    {
                        var input30 = $("<input id='SpanReasonNotesHidden'>")
                                .attr("type", "hidden")
                                .attr("name", "SpanReasonNotesHidden").val($('#SpanReasonNotes').val());
                        $(this).append($(input30));
                    }

                    if ($("#NSRReasonHidden").length)
                    {
                        $("#NSRReasonHidden").val($('#NSRReasonDropdown').val());
                    }
                    else
                    {
                        var input45 = $("<input id='NSRReasonHidden'>")
                                .attr("type", "hidden")
                                .attr("name", "NSRReasonHidden").val($('#NSRReasonDropdown').val());
                        $(this).append($(input45));
                    }

                    if ($("#NSRReasonNotesHidden").length)
                    {
                        $("#NSRReasonNotesHidden").val($('#NSRReasonNotes').val());
                    }
                    else
                    {
                        var input46 = $("<input id='NSRReasonNotesHidden'>")
                                .attr("type", "hidden")
                                .attr("name", "NSRReasonNotesHidden").val($('#NSRReasonNotes').val());
                        $(this).append($(input46));
                    }
                    //alert("1");
                    if ($("#RemovalCountHidden").length)
                    {
                        $("#RemovalCountHidden").val($('#RemovalCount').val());
                    }
                    else
                    {
                        var input31 = $("<input id='RemovalCountHidden'>")
                                .attr("type", "hidden")
                                .attr("name", "RemovalCountHidden").val($('#RemovalCount').val());
                        $(this).append($(input31));
                    }

                    if ($("#RemovalDateHidden").length)
                    {
                        $("#RemovalDateHidden").val($('#RemovalDate').val());
                    }
                    else
                    {
                        var input32 = $("<input id='RemovalDateHidden'>")
                                .attr("type", "hidden")
                                .attr("name", "RemovalDateHidden").val($('#RemovalDate').val());
                        $(this).append($(input32));
                    }

                    if ($("#RemovaAllHidden").length)
                    {
                        $("#RemovaAllHidden").val($("input[name='RemovaAll']:checked").val());
                    }
                    else
                    {
                        var input33 = $("<input id='RemovaAllHidden'>")
                                .attr("type", "hidden")
                                .attr("name", "RemovaAllHidden").val($("input[name='RemovaAll']:checked").val());
                        $(this).append($(input33));
                    }

                    if ($("#RemovalReasonHidden").length)
                    {
                        $("#RemovalReasonHidden").val($('#RemovalReason').val());
                    }
                    else
                    {
                        var input34 = $("<input id='RemovalReasonHidden'>")
                                .attr("type", "hidden")
                                .attr("name", "RemovalReasonHidden").val($('#RemovalReason').val());
                        $(this).append($(input34));
                    }
                    //alert("2");
                    if ($("#BeveragesSupplierHidden").length)
                    {
                        $("#BeveragesSupplierHidden").val($('#BeveragesSupplier').val());
                    }
                    else
                    {
                        var input35 = $("<input id='BeveragesSupplierHidden'>")
                                .attr("type", "hidden")
                                .attr("name", "BeveragesSupplierHidden").val($('#BeveragesSupplier').val());
                        $(this).append($(input35));
                    }

                    if ($("#ClosingBusinessHidden").length)
                    {
                        $("#ClosingBusinessHidden").val($('#ClosingBusiness').is(':checked'));
                    }
                    else
                    {
                        var input36 = $("<input id='ClosingBusinessHidden'>")
                                .attr("type", "hidden")
                                .attr("name", "ClosingBusinessHidden").val($('#ClosingBusiness').is(':checked'));
                        $(this).append($(input36));
                    }

                    if ($("#FlavorOrTasteOfCoffeeHidden").length)
                    {
                        $("#FlavorOrTasteOfCoffeeHidden").val($('#FlavorOrTasteOfCoffee').is(':checked'));
                    }
                    else
                    {
                        var input37 = $("<input id='FlavorOrTasteOfCoffeeHidden'>")
                                .attr("type", "hidden")
                                .attr("name", "FlavorOrTasteOfCoffeeHidden").val($('#FlavorOrTasteOfCoffee').is(':checked'));
                        $(this).append($(input37));
                    }

                    if ($("#EquipmentServiceReliabilityorResponseTimeHidden").length)
                    {
                        $("#EquipmentServiceReliabilityorResponseTimeHidden").val($('#EquipmentServiceReliabilityorResponseTime').is(':checked'));
                    }
                    else
                    {
                        var input38 = $("<input id='EquipmentServiceReliabilityorResponseTimeHidden'>")
                                .attr("type", "hidden")
                                .attr("name", "EquipmentServiceReliabilityorResponseTimeHidden").val($('#EquipmentServiceReliabilityorResponseTime').is(':checked'));
                        $(this).append($(input38));
                    }

                    if ($("#CostPerCupHidden").length)
                    {
                        $("#CostPerCupHidden").val($('#CostPerCup').is(':checked'));
                    }
                    else
                    {
                        var input39 = $("<input id='CostPerCupHidden'>")
                                .attr("type", "hidden")
                                .attr("name", "CostPerCupHidden").val($('#CostPerCup').is(':checked'));
                        $(this).append($(input39));
                    }

                    if ($("#ChangingGroupPurchasingProgramHidden").length)
                    {
                        $("#ChangingGroupPurchasingProgramHidden").val($('#ChangingGroupPurchasingProgram').is(':checked'));
                    }
                    else
                    {
                        var input40 = $("<input id='ChangingGroupPurchasingProgramHidden'>")
                                .attr("type", "hidden")
                                .attr("name", "ChangingGroupPurchasingProgramHidden").val($('#ChangingGroupPurchasingProgram').is(':checked'));
                        $(this).append($(input40));
                    }

                    if ($("#ChangingDistributorHidden").length)
                    {
                        $("#ChangingDistributorHidden").val($('#ChangingDistributor').is(':checked'));
                    }
                    else
                    {
                        var input41 = $("<input id='ChangingDistributorHidden'>")
                                .attr("type", "hidden")
                                .attr("name", "ChangingDistributorHidden").val($('#ChangingDistributor').is(':checked'));
                        $(this).append($(input41));
                    }

                    if ($("#RowIdHidden").length)
                    {
                        $("#RowIdHidden").val($('#RowId').val());
                    }
                    else
                    {
                        var input42 = $("<input id='RowIdHidden'>")
                                .attr("type", "hidden")
                                .attr("name", "RowIdHidden").val($('#RowId').val());
                        $(this).append($(input42));
                    }

                    if ($("#AppointmentReasonHidden").length)
                    {
                        $("#AppointmentReasonHidden").val($('#AppointmentReasonDropdown').val());
                    }
                    else
                    {
                        var input43 = $("<input id='AppointmentReasonHidden'>")
                                .attr("type", "hidden")
                                .attr("name", "AppointmentReasonHidden").val($('#AppointmentReasonDropdown').val());
                        $(this).append($(input43));
                    }

                    if ($("#CustomerSignatureDetailsHidden").length)
                    {
                        var sign = $("#CustomerSignatureArea").ejSignature("instance");
                        if (sign._canvas === undefined) {

                        }
                        else if ((sign.points === undefined || (sign.points && sign.points.length == 0)) && $('#CustomerSignatureImage').is(":hidden")) {

                        }
                        else
                        {
                            image = sign._canvas[0].toDataURL();
                            $("#CustomerSignatureDetailsHidden").val(image);
                        }
                    }
                    else
                    {
                        var sign = $("#CustomerSignatureArea").ejSignature("instance");

                        if (sign._canvas === undefined) {

                        }
                        else if ((sign.points === undefined || (sign.points && sign.points.length == 0)) && $('#CustomerSignatureImage').is(":hidden")) {

                        }
                        else
                        {
                            image = sign._canvas[0].toDataURL();
                            var input44 = $("<input id='CustomerSignatureDetailsHidden'>")
                              .attr("type", "hidden")
                              .attr("name", "CustomerSignatureDetailsHidden").val(image);
                            $(this).append($(input44));
                        }
                    }

                     if ($("#CustomerSignatureDetailsHidden").length)
                    {
                        var sign = $("#CustomerSignatureArea").ejSignature("instance");
                        if (sign._canvas === undefined) {

                         }
                         else if ((sign.points === undefined || (sign.points && sign.points.length == 0)) && $('#CustomerSignatureImage').is(":hidden")) {

                         }
                        else
                        {
                            image = sign._canvas[0].toDataURL();
                            $("#CustomerSignatureDetailsHidden").val(image);
                        }
                    }
                    else
                    {

                        var sign = $("#CustomerSignatureArea").ejSignature("instance");

                        if (sign._canvas === undefined) {

                         }
                         else if ((sign.points === undefined || (sign.points && sign.points.length == 0)) && $('#CustomerSignatureImage').is(":hidden")) {

                         }
                        else
                        {
                            image = sign._canvas[0].toDataURL();
                            var input44 = $("<input id='CustomerSignatureDetailsHidden'>")
                              .attr("type", "hidden")
                              .attr("name", "CustomerSignatureDetailsHidden").val(image);
                            $(this).append($(input44));
                        }
                     }

                    if ($("#FBBillableDetailsHidden").length) {
                        $("#FBBillableDetailsHidden").val(JSON.stringify($("#FBBillableDetails").ejGrid("instance").model.dataSource.dataSource.json));
                    }
                    else {
                        if ($("#FBBillableDetails").ejGrid("instance").model != undefined) {
                            var input45 = $("<input id='FBBillableDetailsHidden'>")
                                .attr("type", "hidden")
                                .attr("name", "FBBillableDetailsHidden").val(JSON.stringify($("#FBBillableDetails").ejGrid("instance").model.dataSource.dataSource.json));
                            $(this).append($(input45));
                        }
                    }
                    //alert("3");

                    if ($("#IsBillableFeedHidden").length)
                    {
                        $("#IsBillableFeedHidden").val(JSON.stringify($(".IsBillableFeed").is(':checked')));
                    }
                    else
                    {
                        var input46 = $("<input id='IsBillableFeedHidden'>")
                                .attr("type", "hidden")
                                .attr("name", "IsBillableFeedHidden").val(JSON.stringify($(".IsBillableFeed").is(':checked')));
                        $(this).append($(input46));
                    }

                    if ($("#WaterTestedHidden").length)
                    {
                        $("#WaterTestedHidden").val(JSON.stringify($(".WaterTested").is(':checked')));
                    }
                    else
                    {
                        var input47 = $("<input id='WaterTestedHidden'>")
                                .attr("type", "hidden")
                                .attr("name", "WaterTestedHidden").val(JSON.stringify($(".WaterTested").is(':checked')));
                        $(this).append($(input47));
                    }

                    if ($("#FilterReplacedHidden").length)
                    {
                        $("#FilterReplacedHidden").val(JSON.stringify($(".FilterReplaced").is(':checked')));
                    }
                    else
                    {
                        var input48 = $("<input id='FilterReplacedHidden'>")
                                .attr("type", "hidden")
                                .attr("name", "FilterReplacedHidden").val(JSON.stringify($(".FilterReplaced").is(':checked')));
                        $(this).append($(input48));
                    }

                    if ($("#WeightsHidden").length)
                    {
                        $("#WeightsHidden").val(JSON.stringify(weights));
                    }
                    else
                    {
                        var input49 = $("<input id='WeightsHidden'>")
                                .attr("type", "hidden")
                                .attr("name", "WeightsHidden").val(JSON.stringify(weights));
                        $(this).append($(input49));
                    }

                    if ($("#RatiosHidden").length)
                    {
                        $("#RatiosHidden").val(JSON.stringify(ratios));
                    }
                    else
                    {
                        var input50 = $("<input id='RatiosHidden'>")
                                .attr("type", "hidden")
                                .attr("name", "RatiosHidden").val(JSON.stringify(ratios));
                        $(this).append($(input50));
                    }

                    //***************************

                    if ($("#TechnicianSignatureDetailsHidden").length)
                    {
                        var sign = $("#TechnicianSignatureArea").ejSignature("instance");
                        if (sign._canvas === undefined) {

                        }
                        else
                        {
                            image = sign._canvas[0].toDataURL();
                            $("#TechnicianSignatureDetailsHidden").val(image);
                        }
                    }
                    else
                    {

                        var sign = $("#TechnicianSignatureArea").ejSignature("instance");

                        if (sign._canvas === undefined) {

                        }
                        else
                        {
                            image = sign._canvas[0].toDataURL();
                            var input51 = $("<input id='TechnicianSignatureDetailsHidden'>")
                              .attr("type", "hidden")
                              .attr("name", "TechnicianSignatureDetailsHidden").val(image);
                            $(this).append($(input51));
                        }
                    }

                    if ($("#TechnicianSignatureDetailsHidden").length)
                    {
                        var sign = $("#TechnicianSignatureArea").ejSignature("instance");
                        if (sign._canvas === undefined) {

                        }
                        else
                        {
                            image = sign._canvas[0].toDataURL();
                            $("#TechnicianSignatureDetailsHidden").val(image);
                        }
                    }
                    else
                    {

                        var sign = $("#TechnicianSignatureArea").ejSignature("instance");

                        if (sign._canvas === undefined) {

                        }
                        else
                        {
                            image = sign._canvas[0].toDataURL();
                            var input51 = $("<input id='TechnicianSignatureDetailsHidden'>")
                              .attr("type", "hidden")
                              .attr("name", "TechnicianSignatureDetailsHidden").val(image);
                            $(this).append($(input51));
                        }
                    }

                    //***************************
                    if ($("#IsNonFBCustomerHidden").length)
                    {
                        $("#IsNonFBCustomerHidden").val(JSON.stringify($(".IsNonFBCustomer").is(':checked')));
                    }
                    else
                    {
                        var input52 = $("<input id='IsNonFBCustomerHidden'>")
                                .attr("type", "hidden")
                                .attr("name", "IsNonFBCustomerHidden").val(JSON.stringify($(".IsNonFBCustomer").is(':checked')));
                        $(this).append($(input52));
                    }

                    if ($("#BillingDetailsHidden").length) {
                        $("#BillingDetailsHidden").val(JSON.stringify($("#BillingDetails").ejGrid("instance").model.dataSource.dataSource.json));
                    }
                    else {
                        if ($("#BillingDetails").ejGrid("instance").model != undefined) {
                            var input53 = $("<input id='BillingDetailsHidden'>")
                                .attr("type", "hidden")
                                .attr("name", "BillingDetailsHidden").val(JSON.stringify($("#BillingDetails").ejGrid("instance").model.dataSource.dataSource.json));
                            $(this).append($(input53));
                        }
                    }

                    //if ($("#cloverTransactionIdHidden").length) {
                    //    $("#cloverTransactionIdHidden").val(JSON.stringify($("#cloverTransactionId").ejGrid("instance").model.dataSource.dataSource.json));
                    //}
                    //else {
                    //    var input54 = $("<input id='cloverTransactionIdHidden'>")
                    //        .attr("type", "hidden")
                    //        .attr("name", "cloverTransactionIdHidden").val(image);
                    //    $(this).append($(input54));
                    //}

                    var input54 = $("#cloverTransactionId");
                    $(this).append($(input54));

                    //Start of New Closure Fields
                    if ($("#stateofEquipmentHidden").length) {
                        $("#stateofEquipmentHidden").val($('.stateofEquipment').val());
                    }
                    else {
                        var input55 = $("<input id='stateofEquipmentHidden'>")
                            .attr("type", "hidden")
                            .attr("name", "stateofEquipmentHidden").val($('.stateofEquipment').val());
                        $(this).append($(input55));
                    }


                    if ($("#serviceDelayedHidden").length) {
                        $("#serviceDelayedHidden").val($('.serviceDelayed').val());
                    }
                    else {
                        var input56 = $("<input id='serviceDelayedHidden'>")
                            .attr("type", "hidden")
                            .attr("name", "serviceDelayedHidden").val($('.serviceDelayed').val());
                        $(this).append($(input56));
                    }

                    if ($("#troubleshootStepsHidden").length) {
                        $("#troubleshootStepsHidden").val($('.troubleshootSteps').val());
                    }
                    else {
                        var input57 = $("<input id='troubleshootStepsHidden'>")
                            .attr("type", "hidden")
                            .attr("name", "troubleshootStepsHidden").val($('.troubleshootSteps').val());
                        $(this).append($(input57));
                    }

                    if ($("#ReviewedByHidden").length) {
                        $("#ReviewedByHidden").val($('#ReviewedBy').val());
                    }
                    else {
                        var input58 = $("<input id='ReviewedByHidden'>")
                            .attr("type", "hidden")
                            .attr("name", "ReviewedByHidden").val($('#ReviewedBy').val());
                        $(this).append($(input58));
                    }

                    if ($("#followupCommentsHidden").length) {
                        $("#followupCommentsHidden").val($('.followupComments').val());
                    }
                    else {
                        var input59 = $("<input id='followupCommentsHidden'>")
                            .attr("type", "hidden")
                            .attr("name", "followupCommentsHidden").val($('.followupComments').val());
                        $(this).append($(input59));
                    }

                    if ($("#IsServiceBillableFeedHidden").length) {
                        $("#IsServiceBillableFeedHidden").val(JSON.stringify($(".IsServiceBillableFeed").is(':checked')));
                    }
                    else {
                        var input60 = $("<input id='IsServiceBillableFeedHidden'>")
                            .attr("type", "hidden")
                            .attr("name", "IsServiceBillableFeedHidden").val(JSON.stringify($(".IsServiceBillableFeed").is(':checked')));
                        $(this).append($(input60));
                    }

                    //if ($("#operationalCommentsHidden").length) {
                    //    $("#operationalCommentsHidden").val($('.operationalComments').val());
                    //}
                    //else {
                    //    var input60 = $("<input id='operationalCommentsHidden'>")
                    //        .attr("type", "hidden")
                    //        .attr("name", "operationalCommentsHidden").val($('.operationalComments').val());
                    //    $(this).append($(input60));
                    //}




                    //END of New Closure Fields


                    if (ValidateWorkorderModel() && ValidateCustomerModel()) {
                        $('#SaveWorkOrderId').hide();
                        var $this = $(this);
                        var frmValues = $this.serialize();
                        $.ajax({
                            type: $this.attr('method'),
                            url: "@Url.Action("SaveWorkOrder", HttpContext.Current.Request.RequestContext.RouteData.Values["controller"].ToString())",
                            data: frmValues
                        }).done(function (response) {
                            if (response != null && response.success == true) {

                                if (response.returnValue == -2)
                                {
                                    AlertPopup("|ERF ID is not valid. Please reenter correct ERF ID!");
                                }
                                else if (response.returnValue > 0)
                                {
                                    if (operation == 1) {
                                        // Doc Upload Block
                                        $("#docWorkorderId").val(response.WorkOrderId);
                                        //$("#btnUpload").trigger("click");
                                        DocUpload();
                                        // End of Doc Upload Block

                                        AlertPopup("|Work Order saved successfully! \r\n Work Order#: " + response.WorkOrderId);
                                    }
                                    else if (operation == 2) {
                                        AlertPopup("|Notification sent to sales successfully!");
                                    }
                                    else if (operation == 3) {
                                        AlertPopup("|Overtime request sent successfully!");
                                    }
                                    else if (operation == 4) {
                                        if (response.WorkorderCallstatus == "Hold") {
                                            AlertPopup("|Work Order put on hold successfully!");
                                            $('#WorkorderCallStatus').text("Hold");
                                        }
                                        else {
                                            //AlertPopup("|Work Order put on Open successfully!");
                                            //$('#WorkorderCallStatus').text("Open");
                                            AlertPopup("|Work Order removed from Hold Status successfully!");
                                        }
                                    }
                                    else if (operation == 5) {
                                        AlertPopup("|Appointment is updated successfully!");
                                        @*$.ajax({
                                            type: $this.attr('method'),
                                            url: '@Url.Action("GetNotes", "Workorder")',
                                            data: { "workOrderId": $("#WorkOrder_WorkorderID").val() }
                                        }).done(function (jsonResult) {

                                            if (jsonResult.success == true)
                                            {
                                                if (jsonResult.data.length > 0) {
                                                    $('#Notes').empty();
                                                    for (var i = 0 ; i < jsonResult.data.length; i++) {
                                                        $('#Notes').append('<option value=' + jsonResult.data[i].NotesID + '>' + jsonResult.data[i].Notes + '</option>');
                                                    }
                                                }
                                                AlertPopup("|Appointment is updated successfully!");
                                            }
                                            else{
                                                AlertPopup("|There is a problem in getting Notes!");
                                            }
                                        });*@
                                    }
                                    else if (operation == 6) {
                                        if (response.WOConfirmationCode == undefined) {
                                            AlertPopup("|Work Order completed successfully! " + response.message);
                                        }
                                        else {
                                            AlertPopup("|Work Order completed successfully! " + response.message + " \r |Work Order Confirmation Code#: " + response.WOConfirmationCode);
                                        }

                                        if (response.message == "Please process the Payment, before Closing the Event!") {
                                            var responsibleTech = "@Model.ResponsibleTechId";
                                            var workorderid = "@Model.WorkOrder.WorkorderID";
                                            //window.open("/DispatchResponse/ProcessCardRedirect?workOrderId=" + workorderid + "&techId=" + responsibleTech);
                                            //return false;
                                            //response.Url = "/DispatchResponse/ProcessCardRedirect?workOrderId=" + workorderid + "&techId=" + responsibleTech + "&FromView=workordermanagement";
                                            response.Url = "/DispatchResponse/ProcessCardRedirect?workOrderId=" + workorderid + "&FromView=workordermanagement";
                                        }
                                    }
                                    else if (operation == 7) {
                                        AlertPopup("|Work Order created successfully! \r\n Work Order#: " + response.WorkOrderId);
                                        response.Url = null;
                                    }
                                    else if (operation == 8) {
                                        AlertPopup(response.message);
                                    }
                                    else if (operation == 10) {
                                        var responsibleTech = "@Model.ResponsibleTechId";
                                        var workorderid = response.WorkOrderId;
                                        //response.Url = "/DispatchResponse/ProcessCardRedirect?workOrderId=" + workorderid + "&techId=" + responsibleTech + "&FromView=workordermanagement";
                                        if (workorderid > 0) {
                                            response.Url = "/DispatchResponse/ProcessCardRedirect?workOrderId=" + workorderid + "&FromView=workordermanagement";
                                        }

                                        AlertPopup("|Work Order created successfully! \r\n Work Order#: " + response.WorkOrderId +" \r\n Proceed to Pay");
                                    }

                                    updateUrl = response.Url;
                                }
                                else
                                {
                                    if (operation == 6 || operation == 1 || operation == 8 || operation == 10)
                                    {
                                        AlertPopup(response.message);
                                    }

                                    if (operation == 6 && response.message == "Please process the Payment, before Closing the Event!") {
                                        var responsibleTech = "@Model.ResponsibleTechId";
                                        var workorderid = "@Model.WorkOrder.WorkorderID";
                                        //window.open("/DispatchResponse/ProcessCardRedirect?workOrderId=" + workorderid + "&techId=" + responsibleTech);
                                        //return false;

                                       // updateUrl = "/DispatchResponse/ProcessCardRedirect?workOrderId=" + workorderid + "&techId=" + responsibleTech + "&FromView=workordermanagement";
                                        if (workorderid > 0) {
                                            updateUrl = "/DispatchResponse/ProcessCardRedirect?workOrderId=" + workorderid + "&FromView=workordermanagement";
                                        }
                                    }
                                    @*else if (operation == 10) {
                                        var responsibleTech = "@Model.ResponsibleTechId";
                                            var workorderid = response.WorkOrderId;
                                            //response.Url = "/DispatchResponse/ProcessCardRedirect?workOrderId=" + workorderid + "&techId=" + responsibleTech + "&FromView=workordermanagement";
                                        if (workorderid > 0) {
                                            updateUrl = "/DispatchResponse/ProcessCardRedirect?workOrderId=" + workorderid + "&FromView=workordermanagement";
                                        }
                                    }*@
                                }
                            }
                            else {
                                if (operation == 1)
                                {
                                    AlertPopup("|There is a problem in saving Work Order! Please contact support.");
                                }
                                else if (operation == 2)
                                {
                                    AlertPopup("|There is a problem in sending notification! Please contact support.");
                                }
                                else if (operation == 3)
                                {
                                    AlertPopup("|There is a problem in requesting overtime! Please contact support.");
                                }
                                else if (operation == 4)
                                {
                                    AlertPopup("|There is a problem in holding Work Order! Please contact support.");
                                }
                                else if (operation == 5)
                                {
                                    AlertPopup("|There is a problem in saving appointment! Please contact  support");
                                }
                                else if (operation == 6 || operation == 10)
                                {
                                    AlertPopup(response.message);
                                }
                                else if (operation == 7)
                                {
                                    AlertPopup("|There is a problem in creating work order! Please contact support!");
                                }
                                else if (operation == 8)
                                {
                                    AlertPopup("|There is a problem in creating feast movement! Please contact support!");
                                }
                            }
                            $('#SaveWorkOrderId').show();
                        });
                    }

                }

                $("#Operation").val(0);
            }
            //alert("3")
            event.preventDefault();
            //alert("4");
        });

        function ValChange(args) {
            var ob = $(".e-grid").ejGrid("instance");//Gets the grid object,
            if (this._id == "GridCategoryName") {//when the value of the category field is altered.
                var text = ej.DataManager(ob.model.dataSource).executeLocal(ej.Query().where("CategoryName", "equal", args.selectedText, false).select("Description"));//Gets the value of the corresponding description filed value for the selected CategoryName from the dataSource.

                var gridDescriptionObj = $('#GridDescription').ejDropDownList().data("ejDropDownList");
                gridDescriptionObj.selectItemByText(text[0]);
            }
            else {
                var text = ej.DataManager(ob.model.dataSource).executeLocal(ej.Query().where("Description", "equal", args.selectedText, false).select("CategoryName"));

                var gridCategoryNameObj = $('#GridCategoryName').ejDropDownList().data("ejDropDownList");
                gridCategoryNameObj.selectItemByText(text[0]);
            }
        }

        //$("[data-popup-close='popupalert']").click(function() {
        //    //alert("pop ="+updateUrl)
        //    if (updateUrl != null)
        //    {
        //        window.location.href = updateUrl;
        //    }
        //});


        $("input[name$='ShipTo']").click(function() {
            var radioValue = $(this).val();
            $("#PartsShipTo").val(radioValue);
            $("div.ShipToDiv").hide();
            $("#ShipTo" + radioValue).show();
        });

        $(".WorkOrderFields").change(function (){
            formDirty = true;
        });

        if ($("#PartsShipTo").val() == 1)
        {
            $("input[name$='ShipTo'][value$=1]").trigger("click");
        }
        else if ($("#PartsShipTo").val() == 2) {
            $("input[name$='ShipTo'][value$=2]").trigger("click");
        }
        else if ($("#PartsShipTo").val() == 3) {
            $("input[name$='ShipTo'][value$=3]").trigger("click");
        }
        else if ($("#PartsShipTo").val() == 4) {
            $("input[name$='ShipTo'][value$=4]").trigger("click");
        }
        else{
            $("input[name$='ShipTo'][value$=2]").trigger("click");
            $("#PartsShipTo").val(2);
        }

        if ($("#WorkOrder_WorkorderCallstatus").val() == "Accepted")
        {
            $(".work-order-details-head").trigger( "click" );
            $(".notes-details-head").trigger( "click" );
            $(".work-order-dispatch-head").trigger( "click" );
            $(".closure-head").trigger("click");
            $(".billable-head").trigger("click");

        }
        else if ($("#WorkOrder_WorkorderCallstatus").val() == "Closed"
            || $("#WorkOrder_WorkorderCallstatus").val() == "Completed") {
            $(".work-order-details-head").trigger( "click" );
            $(".notes-details-head").trigger( "click" );
            $(".work-order-dispatch-head").trigger( "click" );
            $(".closure-head").trigger("click");
            $(".billable-head").trigger("click");
        }
        else if ($("#WorkOrder_WorkorderCallstatus").val() == "Open") {
            $(".work-order-details-head").trigger( "click" );
            $(".work-requested-details-head").trigger( "click" );
            $(".notes-details-head").trigger( "click" );
            $(".work-order-dispatch-head").trigger( "click" );
        }
        else{
            $(".work-requested-details-head").trigger( "click" );
            $(".work-order-details-head").trigger( "click" );
            $(".notes-details-head").trigger( "click" );
        }

        $("#DSMhidenButton").click(function () {
            var notesItems = [];
            $.each(newNotesArray, function( index, value ) {
                notesItems.push(value);
            });
            SendEscalationMail("DSM",workorderId,notesItems);
        });

        $("#ESMhidenButton").click(function () {
            //alert("1")
            var notesItems = [];
            $.each(newNotesArray, function( index, value ) {
                notesItems.push(value);
            });
            SendEscalationMail("ESM",workorderId,notesItems);
        });

        $("#RSMhidenButton").click(function () {
            //alert("1")
            var notesItems = [];
            $.each(newNotesArray, function( index, value ) {
                notesItems.push(value);
            });
            SendEscalationMail("RSM",workorderId,notesItems);
        });

        $("#CCMhidenButton").click(function () {
            //alert("1")
            var notesItems = [];
            $.each(newNotesArray, function( index, value ) {
                notesItems.push(value);
            });
            SendEscalationMail("CCM",workorderId,notesItems);
        });

        $("#DarryhidenButton").click(function () {
            var notesItems = [];
            $.each(newNotesArray, function( index, value ) {
                notesItems.push(value);
            });
            SendEscalationMail("Darryl McGee",workorderId,notesItems);
        });

        $("#MikehidenButton").click(function () {
            var notesItems = [];
            $.each(newNotesArray, function( index, value ) {
                notesItems.push(value);
            });
            SendEscalationMail("Mike Fraser",workorderId,notesItems);
        });

        $("#OtherhidenButton").click(function () {
            var notesItems = [];
            $.each(newNotesArray, function( index, value ) {
                notesItems.push(value);
            });
            SendEscalationMail("Other|"+$('#EscalationOtherEmailtxt').val(),workorderId,notesItems);
        });


        $("#TransmitEscalationButton").click(function () {
            var notesItems = [];
            //alert("1");
            $.each(newNotesArray, function( index, value ) {
                //var item = { Text: value, Value: -1 };
                //var item = [value];
                //alert(value);
                notesItems.push(value);
            });
            //alert("notes length" +notesItems.length);
            //alert(JSON.stringify(notesItems));
            if (workOrderStatus.localeCompare("Closed") != 0
                && workOrderStatus.localeCompare("Invoiced") != 0
                && workOrderStatus.localeCompare("Completed") != 0)
            {
                //alert("1.1");
                var isResponsible = false;
                if ($(".responsibleRaidoButton[data-branchid=" + $("#Technicians").ejGrid("instance").getSelectedRecords()[0]["TechId"] + "]").is(':checked'))
                {
                    isResponsible = true;
                }

                //alert("1.2");
                var IsAutoDispatched = false;
                if ($('#Notes_IsAutoDispatched:checked').val() !== undefined)
                {
                    IsAutoDispatched = true;
                }
                //alert("1.3");
                $.ajax({
                    type: "POST",
                    url: "@Url.Action("DispatchMail", "Workorder")",
                    data: { "workOrderId": $("#WorkOrder_WorkorderID").val(),
                        "techId": $("#Technicians").ejGrid("instance").getSelectedRecords()[0]["TechId"],
                        "isResponsible" : isResponsible,
                        "notes" : JSON.stringify(notesItems),
                        "IsAutoDispatched": IsAutoDispatched
                    }
                }).done(function (response) {
                    if (response.success == true && response.returnValue == 1)
                    {
                        $('#WorkorderCallStatus').text(response.WorkorderCallstatus);
                        $('#WorkOrder.WorkorderCallstatus').val(response.WorkorderCallstatus);

                        SelectBranchesAndTechs();
                        trcount=1;
                        newNotesArray= [];
                        //alert(JSON.stringify(newNotesArray));
                        AlertPopup("|Work Order transmitted successfully!");
                        updateUrl = response.Url;
                    }
                    else{
                        if (response.message!=null) {
                            AlertPopup(response.message);
                        }
                        else{
                            AlertPopup("|There is a problem in transmitting Work Order. Please contact Help Desk.");
                        }

                    }
                });
            }
        });

        $("#TransmitButton").click(function () {

            //This is required don't delete it
        });

        $("#EscalationOtherEmailButton").click(function (event) {


        });

        $("#AcceptButton").click(function () {

            if (workOrderStatus.localeCompare("Pending Acceptance") == 0 || workOrderStatus.localeCompare("Accepted-Partial") == 0 || workOrderStatus.localeCompare("Scheduled") == 0
                || workOrderStatus.localeCompare("Escalated for follow-up") == 0)
            {
                //alert("1.1")
                var isResponsible = false;
                if ($(".responsibleRaidoButton[data-branchid=" + $("#Technicians").ejGrid("instance").getSelectedRecords()[0]["TechId"] + "]").is(':checked'))
                {
                    isResponsible = true;
                }

                $.ajax({
                    type: "POST",
                    url: "@Url.Action("AcceptWorkOrder", "dispatchresponse")",
                    data: { "workOrderId": $("#WorkOrder_WorkorderID").val(),
                        "techId": $("#Technicians").ejGrid("instance").getSelectedRecords()[0]["TechId"],
                        "isResponsible" : isResponsible
                    }
                }).done(function (response) {
                    if (response.success == true)
                    {
                        AlertPopup(response.message);
                        updateUrl = response.Url;
                    }
                    else{
                        AlertPopup("|There is a problem in accepting Work Order. Please contact Help Desk.");
                    }
                });
            }
            else
            {
                AlertPopup("|Work Order has been Accepted/Redirected! You cannot accept the Work Order!");
            }

        });




        if (workOrderStatus.localeCompare("Closed") == 0
            || workOrderStatus.localeCompare("Invoiced") == 0)
        {
            $('.WorkOrderFields').prop("readonly", true);
            $('.WorkOrderFields').attr("disabled", true);
            $("#AppointmentDate").ejDatePicker({ enabled: false });
            $("#PartsOrderDateNeeded").ejDatePicker({  enabled: false });
            $("#StartDateTime").ejDateTimePicker({  enabled: false });
            $("#ArrivalDateTime").ejDateTimePicker({  enabled: false });
            $("#CompletionDateTime").ejDateTimePicker({  enabled: false });
            $('.CustomerData').prop("readonly", true);
            $('.CustomerData').attr("disabled", true);
            $('.btn').attr("disabled", true);
            $('.enableonclose').attr("disabled", false);
            $('.addtonotes').attr("disabled", false);
            $("#CustomerSignatureArea").ejSignature("disable");
            $("#TechnicianSignatureArea").ejSignature("disable");
            $('#signclear').attr("disabled", true);
            $('.EscalationFields').attr("disabled", false);
            if(workOrderStatus.localeCompare("Invoiced") == 0)
            {
                $('.EscalationFields').attr("disabled", true);
            }
        }

        $('input[type=file]').on('change', prepareUpload);

        $("input[name='RemovaAll']").change(function(e){

            var selectedValue = $("input[name='RemovaAll']:checked").val();
            if (selectedValue == 'true')
            {
                $('#AdditionalQuestions').show();
            }
            else
            {
                $('#AdditionalQuestions').hide();
            }
        });

        $("#SendMailButton").click(function () {

            if(checkEmail())
            {

                $('[data-popup-close]').trigger("click");
                $.ajax({
                    url: '@Url.Action("EmailEvent", "Workorder")',
                    type: 'GET',
                    data: { "workOrderId": $("#WorkOrder_WorkorderID").val(), "emailAddress": $("#EmailEventEmail").val() },
                    success: function (jsonResult) {
                        $("#EmailEventEmail").val("");
                        if (jsonResult.success == true)
                        {
                            if (jsonResult.data     == true)
                            {
                                AlertPopup("|Email sent successfully!");
                            }
                            else{
                                AlertPopup("|There is a problem in sending event mail! Please contact support!");
                            }
                        }
                        else{
                            AlertPopup("|There is a problem in sending event mail! Please contact support!");
                        }
                    }
                });
            }
            else
            {
                AlertPopup("|Please enter valid email address.");
            }
        });

        CustomerAlternateAddressChange();
        BranchAlternateAddressChange();

        if ("@Model.IsOpen" == "True") {
            AlertPopup("|WO is being viewed by User " + "@Model.WorkOrder.CurrentUserName" + " and changes cannot be made");
        }

        $("#InvoiceGenerateBtn").on('click', function(){
            $.ajax({
                url: '@Url.Action("CreateInvoice", "Workorder")',
                type: 'GET',
                data: { "workOrderId": $("#WorkOrder_WorkorderID").val() },
                success: function (jsonResult) {
                    if (jsonResult.success == true)
                    {
                        $("#Closure_InvoiceNo").val(jsonResult.data);
                    }
                    else{
                        AlertPopup("|Problem in creating the Invoice");
                    }
                }
            });
        });




        $("#UpdateSerialNumber").click(function () {
            $('[data-popup-close]').trigger("click");
            var serialNo = $("#serialNumberTxt").val();
            updateSerialNumbers(serialNo);
            @*$.ajax({
                url: '@Url.Action("UpdateSerialNumberList", "Workorder")',
                type: 'GET',
                data: { "serialNumber": serialNo,  "workOrderId": $("#WorkOrder_WorkorderID").val(), "customerId": $("#CustomerId").val()},
                success: function (jsonResult) {
                    $("#serialNumberTxt").val("");
                    //"workOrderId": $("#WorkOrder_WorkorderID").val(),
                    if (jsonResult.success == true)
                    {
                        //$("#ClosureAssetsSerialNumber").ejDropDownList({ dataSource: jsonResult.data, enableFilterSearch: true,
                        //    fields: {
                        //        text: "SerialNumber",
                        //        value: "SerialNumber"
                        //    } });
                        //var skuDropDownListObj = $('#ClosureAssetsSerialNumber').ejDropDownList().data("ejDropDownList");
                        //skuDropDownListObj.selectItemByText(serialNo);

                        $('#ClosureAssetsSerialNumber').ejDropDownList({
                            dataSource : jsonResult.data,
                            //width: 300,
                            fields: { value : "SerialNumber", text : "SerialNumber" },
                            showRoundedCorner: true,
                            enableFilterSearch: true,
                        }).data("ejDropDownList");
                    }
                    else{

                    }
                }
            });*@
        });



        $("#cardProcessBtn").on("click", function () {
            @*$.ajax({
                url: '@Url.Action("AuthenticateCardDetails", "DispatchResponse")',
                type: 'POST',
                data: { "CardNumber": $("#card-number").val(), "ExpiryDate": $("#card-date").val(), "Cvv": $("#card-cvv").val(), "Amount": @Model.BillingTotal, "WorkorderId": $("#WorkOrder_WorkorderID").val() },
                success: function (jsonResult) {
                    if (jsonResult.success == true) {
                        ProcessPayment();
                    }
                }
            });*@

            $('[data-popup="popup-clover"]').fadeIn(350);

        });

        $("#BillingTotalLbl").html(Number(@Model.BillingTotal).toFixed(2));
        TotalCost = @Model.BillingTotal;


        if ("@Model.BillableSKUList.Count()" > 0) {
            $("#IsBillableFeed").prop("checked", true);
        }
        else {
            $("#IsBillableFeed").prop("checked", false);
        }

        if ($("#WorkOrder_FinalTransactionId").val() && $("#WorkOrder_FinalTransactionId").val().trim().length > 0 ) {
            $(".IsServiceBillableFeed").prop("checked", true);
            $(".IsServiceBillableFeed").attr("disabled", true);

            $(".SaveandPayWorkOrderBtn").hide();
        }

        $(".IsServiceBillableFeed").on('click', function () {
            if ($(".IsServiceBillableFeed").is(':checked') == true) {
                $("#completeEventBtn").text("Pay & Complete Work Order");
            }
            else {
                $("#completeEventBtn").text("Complete Work Order");
            }
        });


        if ("@Model.RedirectFromCardProcess" == "True" && $(".IsServiceBillableFeed").is(':checked') == true) {
            $("#successAlertTxt").html("Do you want to Complete the Workorder !");
            ShowSuccessPopup();
        }

    });

    function ShowSuccessPopup() {
        $('[data-popup="popup-coremark-successBlock"]').fadeIn(350);
    }
    function HideSuccessPopup() {
        $('[data-popup="popup-coremark-successBlock"]').fadeOut(350);
    }

    function CompleteEventTrigger() {
        SetSubmitOperation(6);
        $("form").trigger("submit");
    }

    function WarrentyRequiredDropdownChange() {
        var warrentyForValue = $("#WarrentyDropDownList").val();
        if (warrentyForValue && warrentyForValue.toUpperCase() == 'YES') {
            $("#WarrentyForSection").show();
        }
        else {
            $("#WarrentyForSection").hide();
        }
    }

    function FollowupRequiredChange()
    {
        var followupValue = $("#AdditionalFollowupDropDownList").val();
        if (followupValue && followupValue.toUpperCase() == 'YES') {
            $("#FollowupCommentsSection").show();
        }
        else {
            $("#FollowupCommentsSection").hide();
        }
    }

    function updateSerialNumbers(serialNo)
    {
        $.ajax({
            url: '@Url.Action("UpdateSerialNumberList", "Workorder")',
            type: 'GET',
            data: { "workOrderId": $("#WorkOrder_WorkorderID").val(), "customerId": $("#CustomerId").val(), "serialNumber": serialNo},
            success: function (jsonResult) {
                $("#serialNumberTxt").val("");
                if (jsonResult.success == true)
                {
                    $('#ClosureAssetsSerialNumber').ejDropDownList({
                        dataSource : jsonResult.data,
                        //width: 300,
                        fields: { value : "SerialNumber", text : "SerialNumber" },
                        showRoundedCorner: true,
                        enableFilterSearch: true,
                    }).data("ejDropDownList");
                }
                else{

                }
            }
        });
    }


    function CustomerAlternateAddressChange()
    {
        if ($("#IsCustomerAlternateAddress").is(':checked') ==  true)
        {
            $("#CustomerAlternateAddressSection").show();
        }
        else
        {
            $("#CustomerAlternateAddressSection").hide();
        }
    }

    function BranchAlternateAddressChange()
    {
        if ($("#IsBranchAlternateAddress").is(':checked') ==  true)
        {
            $("#BranchAlternateAddressSection").show();
        }
        else
        {
            $("#BranchAlternateAddressSection").hide();
        }
    }

    function SpecialClosureChange()
    {
        if ($("#Closure_SpecialClosure").val() != '')
        {
            $("#CreateFeastMovement").hide();
            $("#CloseWorkOrder").show();
        }
        else
        {
            $("#CreateFeastMovement").show();
            $("#CloseWorkOrder").hide();
        }
    }

    if ($("#Closure_Email").length) {

        if ($("#Closure_Email").val()=='') {

        }
    }

    function EmailChange()
    {
        if ($("#Closure_Email").val() != '')
        {
            if ($("#Closure_Email").val() == "Email to DSM") {
                $("#EmailDSMButton").show();
                $("#EmailESMButton").hide();
                $("#EmailMikeButton").hide();
                $("#EmailDarrylButton").hide();
                $("#EscalationOtherEmail").hide();
                $("#EmailRSMButton").hide();
            }
            else if ($("#Closure_Email").val() == "First Contact ESM") {
                $("#EmailDSMButton").hide();
                $("#EmailESMButton").show();
                $("#EmailMikeButton").hide();
                $("#EmailDarrylButton").hide();
                $("#EmailRSMButton").hide();
                $("#EmailCCMButton").hide();
                $("#EscalationOtherEmail").hide();
            }
            else if ($("#Closure_Email").val() == "Email to Mike Fraser") {
                $("#EmailDSMButton").hide();
                $("#EmailESMButton").hide();
                $("#EmailMikeButton").show();
                $("#EmailDarrylButton").hide();
                $("#EmailRSMButton").hide();
                $("#EmailCCMButton").hide();
                $("#EscalationOtherEmail").hide();
            }
            else if ($("#Closure_Email").val() == "Email to Darryl McGee") {
                $("#EmailDSMButton").hide();
                $("#EmailESMButton").hide();
                $("#EmailMikeButton").hide();
                $("#EmailDarrylButton").show();
                $("#EmailRSMButton").hide();
                $("#EmailCCMButton").hide();
                $("#EscalationOtherEmail").hide();
            }
            else if ($("#Closure_Email").val() == "Third Contact RSM") {
                $("#EmailDSMButton").hide();
                $("#EmailESMButton").hide();
                $("#EmailMikeButton").hide();
                $("#EmailDarrylButton").hide();
                $("#EmailRSMButton").show();
                $("#EmailCCMButton").hide();
                $("#EscalationOtherEmail").hide();
            }
            else if ($("#Closure_Email").val() == "Second Contact CCM") {
                $("#EmailDSMButton").hide();
                $("#EmailESMButton").hide();
                $("#EmailMikeButton").hide();
                $("#EmailDarrylButton").hide();
                $("#EmailRSMButton").hide();
                $("#EmailCCMButton").show();
                $("#EscalationOtherEmail").hide();
            }
            else if ($("#Closure_Email").val() == "OTHER") {
                $("#EmailDSMButton").hide();
                $("#EmailESMButton").hide();
                $("#EmailMikeButton").hide();
                $("#EmailDarrylButton").hide();
                $("#EmailRSMButton").hide();
                $("#EmailCCMButton").hide();
                $("#EscalationOtherEmail").show();
                //$("#EscalationOtherEmail").prop('disabled',false);
            }
        }
        else
        {
            $("#EmailDSMButton").hide();
            $("#EmailESMButton").hide();
            $("#EmailMikeButton").hide();
            $("#EmailDarrylButton").hide();
            $("#EscalationOtherEmail").hide();
            $("#EmailRSMButton").hide();
            $("#EmailCCMButton").hide();
            //$("#EscalationOtherEmail").prop('disabled',true);
        }
    }
    function EquipmentDetailsActionComplete(args)
    {
        if (args.requestType == "beginedit" || args.requestType == "add") {
            $("#EquipmentDetailsCallTypeID").ejDropDownList({ popupHide: "CallTypeIDChange" });
        }
    }

    function EquipmentDetailsBegin(args) {
        $('#EquipmentDetails_WaitingPopup').css("visibility", "hidden");
    }
    function EquipmentDetailsEndEdit(args) {
        $('#EquipmentDetails_WaitingPopup').css("visibility", "hidden");
    }
    function EquipmentDetailsEndAdd(args) {
        $('#EquipmentDetails_WaitingPopup').css("visibility", "hidden");
    }

    //function NonEquipmentDetailsBegin(args) {
    //    $('#NonEquipmentDetails_WaitingPopup').css("visibility", "hidden");
    //}
    //function NonEquipmentDetailsEndEdit(args) {
    //    $('#NonEquipmentDetails_WaitingPopup').css("visibility", "hidden");
    //}
    //function NonEquipmentDetailsEndAdd(args) {
    //    $('#NonEquipmentDetails_WaitingPopup').css("visibility", "hidden");
    //}

    function ClosureAssetsBegin(args) {
        $('#ClosureAssets_WaitingPopup').css("visibility", "hidden");
    }
    function ClosureAssetsEndEdit(args) {
        $('#ClosureAssets_WaitingPopup').css("visibility", "hidden");
    }
    function ClosureAssetsEndAdd(args) {
        $('#ClosureAssets_WaitingPopup').css("visibility", "hidden");
        ClosureAssetsDataBound(args);
    }

    function WorkorderPartsBegin(args) {
        $('#WorkOrderParts_WaitingPopup').css("visibility", "hidden");
    }
    function WorkorderPartsEndEdit(args) {
        $('#WorkOrderParts_WaitingPopup').css("visibility", "hidden");
    }
    function WorkorderPartsEndAdd(args) {
        $('#WorkOrderParts_WaitingPopup').css("visibility", "hidden");
    }

    function prepareUpload(event)
    {
        files = event.target.files;
    }

    function DetailRowExpand(args)
    {
        var noPartsNeededHidden = $(args.detailsRow).find('.NoPartsNeededHidden');

        if (noPartsNeededHidden.val() == "true")
        {
            $(args.detailsRow).find('.NoPartsNeeded').attr("checked", true);
        }

        if (workOrderStatus.localeCompare("Closed") == 0
            || workOrderStatus.localeCompare("Invoiced") == 0)
        {
            $('.WorkOrderFields').prop("readonly", true);
            $('.WorkOrderFields').attr("disabled", true);
            $("#AppointmentDate").ejDatePicker({ enabled: false });
            $("#PartsOrderDateNeeded").ejDatePicker({  enabled: false });
            $("#StartDateTime").ejDateTimePicker({  enabled: false });
            $("#ArrivalDateTime").ejDateTimePicker({  enabled: false });
            $("#CompletionDateTime").ejDateTimePicker({  enabled: false });
            $('.issuepicturecls').prop('disabled', false);
        }
    }

    function responsibleRaidoButtonclick()
    {
        //alert("radio button click");

        var techId;
        $(".responsibleRaidoButton:checked").each(function() {
            techId = $(this).attr("data-branchid");
        });

        $(".assistCheckBox").removeAttr("disabled");

        $(".assistCheckBox[data-branchid=" + techId + "]").attr("checked", false);
        $(".assistCheckBox[data-branchid=" + techId + "]").attr("disabled", true);
    }

    function DispatchBranchesActionBegin(args) {

        // alert("tech start =" +args.requestType)
        if (args.requestType == "filtering" || args.requestType == "paging")
        {
            //$(".branchCheckBox:checked").each(function() {
            //    selectedBranchIds.push($(this).attr("data-branchid"));
            //});

            $(".assistCheckBox:checked").each(function() {

                selectedAssistIds.push($(this).attr("data-branchid"));
            });

            $(".responsibleRaidoButton:checked").each(function() {

                selectedResponsibleIds.push($(this).attr("data-branchid"));
            });
        }
    }

    function CallTypeIDChange(e)
    {
        var removalCount = $('#RemovalCount').val();
        if (removalCount <= 0)
        {
            var row = this.element.closest(".e-editedrow");
            if (row.index() < 0)
            {
                var row = this.element.closest(".e-addedrow");
            }

            $('#RowId').val(row.index());
            //if (e.value == 1400)
            //{
            //    $('[data-popup="popup-6"]').fadeIn(350);
            //}
        }
    }

    function SelectBranchesAndTechs()
    {
        // alert("2");
        //$(".branchCheckBox:checked").each(function() {
        //    selectedBranchIds.push($(this).attr("data-branchid"));
        //});

        $(".assistCheckBox:checked").each(function() {
            //alert("2.1");
            selectedAssistIds.push($(this).attr("data-branchid"));
        });

        $(".responsibleRaidoButton:checked").each(function() {
            //alert("2.2");
            selectedResponsibleIds.push($(this).attr("data-branchid"));
        });

        if (serverBranchIds.length > 0)
        {
            // alert("2.3");
            var uniqueBranchIds = [];
            $.each(serverBranchIds, function(i, el){
                if($.inArray(el, uniqueBranchIds) === -1) uniqueBranchIds.push(el);
            });
            //alert(JSON.stringify(uniqueBranchIds));
            $.ajax({
                type: "POST",
                url: "@Url.Action("GetTechnician", "Workorder")",
                data: { branchIds: uniqueBranchIds, workOrderId : $("#WorkOrder_WorkorderID").val() }
            }).done(function (jsonResult) {

                if (jsonResult.success == true)
                {
                    var obj = $("#Technicians").ejGrid("instance");
                    obj.dataSource(jsonResult.data);

                    $(".assistCheckBox").each(function() {
                        //alert(selectedAssistIds.indexOf($(this).attr("data-branchid")));
                        if (selectedAssistIds.indexOf($(this).attr("data-branchid")) >= 0)
                        {
                            this.checked = true;
                        }
                    });

                    $(".responsibleRaidoButton").each(function() {
                        // alert(selectedResponsibleIds.indexOf($(this).attr("data-branchid")));
                        if (selectedResponsibleIds.indexOf($(this).attr("data-branchid")) >= 0)
                        {
                            this.checked = true;
                        }
                    });

                    if ($('#Technicians').find('.e-table').find('.e-row').length > 0) {
                        $('#Technicians').find(".e-table").find('tr:first').find('td:first').find('.responsibleRaidoButton').attr("checked", true).button("refresh");
                    }

                    responsibleRaidoButtonclick();
                }
                else
                {
                    AlertPopup("|There is a problem in getting Technician details!");
                }
            });
            //alert("2.4");


            $(".branchCheckBox").each(function() {
                if (serverBranchIds.indexOf($(this).attr("data-branchid")) >= 0)
                {
                    this.checked = true;
                }
            });
            //alert("2.5");
            $(".branchCheckBox:checked").each(function() {
                serverBranchIds.push($(this).attr("data-branchid"));
            });


        }
        else{
            var uniqueBranchIds = [];
            $.ajax({
                type: "POST",
                url: "@Url.Action("GetTechnician", "Workorder")",
                data: { branchIds: uniqueBranchIds, workOrderId : $("#WorkOrder_WorkorderID").val() }
            }).done(function (jsonResult) {

                if (jsonResult.success == true)
                {
                    var obj = $("#Technicians").ejGrid("instance");
                    obj.dataSource(jsonResult.data);

                    $(".assistCheckBox").each(function() {
                        if (selectedAssistIds.indexOf($(this).attr("data-branchid")) >= 0)
                        {
                            this.checked = true;
                        }
                    });

                    $(".responsibleRaidoButton").each(function() {
                        if (selectedResponsibleIds.indexOf($(this).attr("data-branchid")) >= 0)
                        {
                            this.checked = true;
                        }
                    });
                    responsibleRaidoButtonclick();
                }
                else
                {
                    AlertPopup("|There is a problem in getting Technician details!");
                }
            });
        }
    }

    function DispatchBranchesActionComplete(args) {
        //alert("1 ="+args.requestType);
        if (args.requestType == "filtering" || args.requestType == "paging")
        {
            $(".branchCheckBox").change(function () {

                if ($(this).is(':checked') ==  false)
                {
                    var uniqueNames = [];
                    $.each(serverBranchIds, function(i, el){
                        if($.inArray(el, uniqueNames) === -1) uniqueNames.push(el);
                    });

                    var location = uniqueNames.indexOf($(this).attr("data-branchid"));
                    if(location != -1) {
                        uniqueNames.splice(location, 1);
                    }
                    serverBranchIds = uniqueNames;

                }
                else if (jQuery.inArray( $(this).attr("data-branchid"), serverBranchIds ) < 0) {
                    serverBranchIds.push($(this).attr("data-branchid"));
                }

                SelectBranchesAndTechs();
            });

            SelectBranchesAndTechs();
            responsibleRaidoButtonclick();
        }
    }

    function TechGridActionComplete(args) {
        // alert("resp tech start = "+args.requestType);
        if (args.requestType == "filtering" || args.requestType == "paging") {
            responsibleRaidoButtonclick();
        }
    }

    function SetSubmitOperation(operation)
    {
        $("#Operation").val(operation);
    }

    function CellEdit(args)
    {
        if (args.columnName == "AssetImage")
        {
            args.cancel = true;
        }
    }

    function ClosureAssetsDataBound(args) {

        var gridObj = $("#ClosureAssets").data("ejGrid");
        gridObj.expandAll();
        //gridObj.collapseAll();
    }

    var closureAssetsCallTypeIdValue;
    var closureAssetsCategoryValue;
    var closureAssetsManufacturerValue;
    var closureAssetsModelValue;
    var closureAssetsSolutionValue;

    function ClosureAssetsBeginEdit(args)
    {

        var children = args.row.children();
        closureAssetsCallTypeIdValue = $(children[3]).text();
        closureAssetsSolutionValue = $(children[4]).text();
        closureAssetsCategoryValue = $(children[5]).text();
        closureAssetsManufacturerValue = $(children[6]).text();
        closureAssetsModelValue = $(children[7]).text();

    }

    function ClosureAssetsComplete(args) {

        if (args.requestType == "beginedit" || args.requestType == "add") {
            //alert("1");
            $("#ClosureAssetsManufacturer").ejDropDownList({ change: "ManufacturerChange", enableFilterSearch: true });
            //$("#ClosureAssetsCallTypeID").ejDropDownList({change : "CallTypeChange", enableFilterSearch: true });
            $("#ClosureAssetsSolution").ejDropDownList({popupHide : "SolutionChange", enableFilterSearch: true });
            $("#ClosureAssetsSerialNumber").ejDropDownList({ popupHide : "SerilNumberChange", enableFilterSearch: true });

            var DropDownselectedItem  = $("#ClosureAssetsSerialNumber option:selected").text();
            if(DropDownselectedItem.toLowerCase() != "other")
            {
                $("#ClosureAssetsSerialNumberManual").attr('disabled','disabled');
                $("#ClosureAssetsSerialNumberManual").addClass('e-disable');
            }

            //alert("2");
            $("#ClosureAssetsSerialNumber").focusout(function(e){
                //alert("3");
                $.ajax({
                    url: '@Url.Action("GetKnownEquipment", "Workorder")',
                    type: 'GET',
                    data: { "serialNumber": $(this).val() },
                    success: function (jsonResult) {

                        if (jsonResult.success == true)
                        {
                            if (jsonResult.data != null)
                            {
                                $("#ClosureAssetsManufacturer").ejDropDownList().data("ejDropDownList").selectItemByText(jsonResult.data.Manufacturer);
                                closureAssetsModelValue = jsonResult.data.Model;
                                //$("#ClosureAssetsModel").ejDropDownList().data("ejDropDownList").selectItemByText(jsonResult.data.Model);
                                $("#ClosureAssetsModel").val(jsonResult.data.Model);
                                $("#ClosureAssetsLocation").val(jsonResult.data.Location);
                            }
                        }
                        else
                        {
                            AlertPopup("|There is a problem in getting Known Equipment!");
                        }
                    }
                })
            });
            //alert("4");
            if (args.requestType == "beginedit")
            {
                //alert("5");
                if (closureAssetsCallTypeIdValue == '')
                {
                    $("#ClosureAssetsCallTypeID").ejDropDownList("clearText");
                }
                //alert("6");
                if (closureAssetsCategoryValue == '')
                {
                    $("#ClosureAssetsCategory").ejDropDownList("clearText");
                }
                //alert("7");
                if (closureAssetsManufacturerValue == '')
                {
                    $("#ClosureAssetsManufacturer").ejDropDownList("clearText");
                }
                //alert("8");
                //if (closureAssetsModelValue == '')
                //{
                //    alert("8.1");
                //    $("#ClosureAssetsModel").ejDropDownList("clearText");
                //}
                //alert("9");
                if (closureAssetsSolutionValue == '')
                {
                    $("#ClosureAssetsSolution").ejDropDownList("clearText");
                }
                //alert("10");
            }
        }
    }

    var workOrderPartsQty;
    var workOrderPartsManufacturerValue;
    var workOrderPartsSku;
    var workOrderPartsDescription;

    function WorkorderPartsBeginEdit(args)
    {

        var children = args.row.children();
        workOrderPartsQty = $(children[1]).text();
        workOrderPartsManufacturerValue = $(children[2]).text();
        workOrderPartsSku = $(children[3]).text();
        workOrderPartsDescription = $(children[4]).text();
    }

    function onWorkorderPartsToolbarClick(args) {
        if ((args.itemName == "Edit" || args.itemName == "Delete")) {

            if (args.itemName == "Delete") {

                var rowData = this.getSelectedRecords();
                if (rowData.length > 0) {
                var obj = $("#WorkOrderParts").ejGrid("instance");
                var datasource = [];
                if (obj.model.dataSource && obj.model.dataSource.dataSource && obj.model.dataSource.dataSource.json.length > 0) {
                    datasource = obj.model.dataSource.dataSource.json;
                }
                else if (obj.model.dataSource) {
                    datasource = obj.model.dataSource;
                }

                var rowDataDetails = {
                    "PartsIssueid": rowData[0].PartsIssueid,
                    "PartReplenish": rowData[0].PartReplenish,
                    "Manufacturer": rowData[0].Manufacturer,
                    "Sku": rowData[0].Sku,
                    "Quantity": rowData[0].Quantity,
                    "Description": rowData[0].Description,
                    "Issue": rowData[0].Issue,
                    "skuCost": rowData[0].skuCost,
                    "partsTotal": rowData[0].partsTotal,
                    "PartsList": datasource,
                    "UpdateType": args.itemName
                }


                $.ajax({
                    url: '@Url.Action("UpdateWorkorderPartsGridData", "workorder")',
                    type: 'POST',
                    data: JSON.stringify(rowDataDetails),
                    contentType: "application/json",
                    success: function (response) {
                        if (response.success) {
                            obj.dataSource(response.data);
                        }
                    },
                    error: function (response) {

                    }
                });

            }
        }
        }
    }

    function CompleteWorkOrderParts(args) {

        if (args.requestType == "beginedit" || args.requestType == "add") {
            //$("#WorkOrderPartsSku").ejDropDownList({ change: "WorkOrderPartsSkuChange", enableFilterSearch: true });
            //$("#WorkOrderPartsManufacturer").ejDropDownList({ change: "WorkOrderPartsManufacturerChange", enableFilterSearch: true });

            if (args.requestType == "beginedit") {

                //var manufacturerObj = $("#WorkOrderPartsManufacturer").val();
                //var currentSku = $("#WorkOrderPartsSku").val();

                @*$.ajax({
                    url: '@Url.Action("GetNonTaggedSkus", "Workorder")',
                    type: 'GET',
                    data: { "manufacturer": manufacturerObj },
                    success: function (data1) {
                        $("#WorkOrderPartsSku").ejDropDownList({ dataSource: data1, enableFilterSearch: true });
                        var skuDropDownListObj = $('#WorkOrderPartsSku').ejDropDownList().data("ejDropDownList");
                        skuDropDownListObj.selectItemByText(currentSku);
                    }
                });*@

                @*$.ajax({
                    url: '@Url.Action("GetCloserNonTaggedManufacturer", "Workorder")',
                    type: 'GET',
                    data: { "skuValue": currentSku },
                    success: function (jsonResult) {

                        if (jsonResult.success == true)
                        {
                            //$("#WorkOrderPartsManufacturer").ejDropDownList({ dataSource: data1, enableFilterSearch: true });
                            $("#WorkOrderPartsManufacturer").ejDropDownList().data("ejDropDownList").selectItemByText(jsonResult.data[0].text);
                        }
                        else
                        {
                            AlertPopup("|There is a problem in getting Manufacturer details!");
                        }
                    }
                });

                $.ajax({
                    url: '@Url.Action("GetSkuDescription", "Workorder")',
                    type: 'GET',
                    data: { "skuValue": currentSku },
                    success: function (jsonResult) {
                        if (jsonResult.success == true)
                        {
                            $("#WorkOrderPartsDescription").val(jsonResult.data);
                        }
                        else{
                            AlertPopup("|There is a problem in getting Model Description!");
                        }

                    }
                });

                $("#WorkOrderPartsQuantity").attr("type", "number");*@
            }



            $("#WorkOrderPartsQuantity").keyup(function () {
                var val = $("#WorkOrderPartsQuantity").val();
                if (parseInt(val) < 0 || isNaN(val)) {
                    $("#WorkOrderPartsQuantity").val("");
                    $("#WorkOrderPartsQuantity").focus();
                }
            });
        }

        if (args.requestType == "save") {

            var rowData = args.data;
            if (rowData) {
                var obj = $("#WorkOrderParts").ejGrid("instance");
                var datasource = [];
                if (obj.model.dataSource && obj.model.dataSource.dataSource && obj.model.dataSource.dataSource.json.length > 0) {
                    datasource = obj.model.dataSource.dataSource.json;
                }
                else if (obj.model.dataSource) {
                    datasource = obj.model.dataSource;
                }

                var rowDataDetails = {
                    "PartsIssueid": rowData.PartsIssueid,
                    "PartReplenish": rowData.PartReplenish,
                    "Manufacturer": rowData.Manufacturer,
                    "Sku": rowData.Sku,
                    "Quantity": rowData.Quantity,
                    "Description": rowData.Description,
                    "Issue": rowData.Issue,
                    "skuCost": rowData.skuCost,
                    "partsTotal": rowData.partsTotal,
                    "PartsList": datasource,
                    "UpdateType": args.requestType
                }


                $.ajax({
                    url: '@Url.Action("UpdateWorkorderPartsGridData", "workorder")',
                    type: 'POST',
                    data: JSON.stringify(rowDataDetails),
                    contentType: "application/json",
                    success: function (response) {
                        if (response.success) {
                            obj.dataSource(response.data);
                        }
                    },
                    error: function (response) {

                    }
                });

            }
        }

    }

    function ManufacturerChange(e) {
        @*$.ajax({
            url: '@Url.Action("GetTaggedSkus", "Workorder")',
            type: 'GET',
            data: { "manufacturer": e.value },
            success: function (jsonResult) {

                if (jsonResult.success == true)
                {

                    $("#ClosureAssetsModel").ejDropDownList({ dataSource: jsonResult.data, enableFilterSearch: true });

                    if (closureAssetsModelValue != '')
                    {
                        $("#ClosureAssetsModel").ejDropDownList().data("ejDropDownList").selectItemByText(closureAssetsModelValue);
                    }
                }
                else{
                    AlertPopup("There is a problem in getting Models!");
                }
            }
        })*@
    }

    function SerilNumberChange(e)
    {
        if(e.value != "Other" )
        {
            $("#ClosureAssetsSerialNumberManual").attr('disabled','disabled');
            $("#ClosureAssetsSerialNumberManual").addClass('e-disable');
            $.ajax({
                url: '@Url.Action("GetItemNumber", "Workorder")',
                type: 'GET',
                data: { "serialNumber": e.value },
                success: function (jsonResult) {

                    if (jsonResult.success == true)
                    {
                        $("#ClosureAssetsModel").val(jsonResult.data);
                        $("#ClosureAssetsSerialNumberManual").val("");
                    }
                    else{
                        AlertPopup("|There is a problem in getting ItemDescription for serial Number!");
                    }
                }
            });
        }
        else
        {
            $("#ClosureAssetsModel").val("");
            $("#ClosureAssetsSerialNumberManual").removeAttr('disabled');
            $("#ClosureAssetsSerialNumberManual").removeClass('e-disable');
        }
    }

    function serialNumberChange(e)
    {
        if(e.value != "Other" )
        {
            $.ajax({
                url: '@Url.Action("GetItemNumber", "Workorder")',
                type: 'GET',
                data: { "serialNumber": e.value },
                success: function (jsonResult) {

                    if (jsonResult.success == true)
                    {
                        $("#ClosureAssetsModel").val(jsonResult.data);
                    }
                    else{
                        AlertPopup("|There is a problem in getting ItemDescription for serial Number!");
                    }
                }
            });
        }
        else
        {
        }
    }

    function SolutionChange(e)
    {
        if (e.value == 5160|| e.value == 5191)
        {
            $.ajax({
                url: '@Url.Action("GetSpawnReasons", "Workorder")',
                type: 'GET',
                data: { "solutionId": e.value },
                success: function (jsonResult) {

                    if (jsonResult.success == true)
                    {
                        $('[data-popup="popup-9"]').fadeIn(350);

                        $('#SpawnReasonDropdown').ejDropDownList({
                            dataSource : jsonResult.data,
                            width: 300,
                            fields: { value : "FBStatusID", text : "FBStatus" },
                            showRoundedCorner: true,
                            enableFilterSearch: true,
                            watermarkText: "Please Select"
                        }).data("ejDropDownList");
                    }
                    else{
                        AlertPopup("|There is a problem in getting Spawn Reasons!");
                    }
                }
            })
        }
        else if(e.value == 9999)
        {
            $.ajax({
                url: '@Url.Action("GetSpawnReasons", "Workorder")',
                type: 'GET',
                data: { "solutionId": e.value },
                success: function (jsonResult) {

                    if (jsonResult.success == true)
                    {
                        $('[data-popup="popup-11"]').fadeIn(350);

                        $('#NSRReasonDropdown').ejDropDownList({
                            dataSource : jsonResult.data,
                            width: 300,
                            fields: { value : "FBStatusID", text : "FBStatus" },
                            showRoundedCorner: true,
                            enableFilterSearch: true,
                            watermarkText: "Please Select"
                        }).data("ejDropDownList");
                    }
                    else{
                        AlertPopup("|There is a problem in getting NSR Reasons!");
                    }
                }
            })
        }
    }

    function CallTypeChange(e)
    {
        $.ajax({
            url: '@Url.Action("GetSolutions", "Workorder")',
            type: 'GET',
            data: { "calltypeId": e.value },
            success: function (jsonResult) {

                if (jsonResult.success == true)
                {
                    $("#ClosureAssetsSolution").ejDropDownList({ dataSource: jsonResult.data, enableFilterSearch: true,
                        watermarkText: "Please Select", fields: { value : "SolutionId", text : "Description" }});
                }
                else
                {
                    AlertPopup("|There is a problem in getting Solutions!");
                }
            }
        })

        var nextRow = $('#'+this._id).closest('tr').parent().closest('tr').next('tr');
        if (nextRow.hasClass("e-detailrow"))
        {
            if (e.value == 1600)
            {
                nextRow.find("#NonSurveyPanel").hide();
                nextRow.find("#SurveyPanel").show();
            }
            else
            {
                nextRow.find("#SurveyPanel").hide();
                nextRow.find("#NonSurveyPanel").show();
            }
        }
    }

    function WorkOrderPartsManufacturerChange(e) {
        @*var currentSku = $("#WorkOrderPartsSku").val();

        $.ajax({
            url: '@Url.Action("GetNonTaggedSkus", "Workorder")',
            type: 'GET',
            data: { "manufacturer": e.value },
            success: function (data1) {
                $("#WorkOrderPartsSku").ejDropDownList({ dataSource: data1, enableFilterSearch: true });
                var skuDropDownListObj = $('#WorkOrderPartsSku').ejDropDownList().data("ejDropDownList");
                skuDropDownListObj.selectItemByText(currentSku);
            }
        });*@
    }

    function WorkOrderPartsSkuChange(e) {

        $.ajax({
            url: '@Url.Action("GetCloserNonTaggedManufacturer", "Workorder")',
            type: 'GET',
            data: { "skuValue": e.value },
            success: function (jsonResult) {
                if (jsonResult.success == true)
                {
                    $("#WorkOrderPartsManufacturer").val(jsonResult.data[0].text);
                    $("#WorkOrderPartsDescription").val(jsonResult.data[0].text);
                }
                else{
                    AlertPopup("|There is a problem in getting Manufacturer!");
                }
            }
        });

        @*$.ajax({
            url: '@Url.Action("GetSkuDescription", "Workorder")',
            type: 'GET',
            data: { "skuValue": e.value },
            success: function (jsonResult) {

                if (jsonResult.success == true)
                {
                    $("#WorkOrderPartsDescription").val(jsonResult.data);
                }
                else
                {
                    AlertPopup("|There is a problem in getting Description!");
                }
            }
        });*@
    }

    function GeneratePdf()
    {
        //window.location.href = "@Url.Action("WorkorderPdf", "Workorder")" + "?workOrderId=" +  $("#WorkOrder_WorkorderID").val();
        getPdfData($("#WorkOrder_WorkorderID").val(), $("#WorkOrder_WorkorderCallstatus").val())
    }

    var workorderPDFId = "", WOStatus = "";
    function getPdfData(varWorkorderID, varWOStatus) {
        $(window).scrollTop(0);
        $('body').css({'overflow-y':'hidden'});
        workorderPDFId = varWorkorderID;
        WOStatus = varWOStatus;
        $.ajax({
            method: "GET",
            datatype: 'json',
            url: "@Url.Action("WorkorderPdfData", "Workorder")",
            data: { WorkorderID: varWorkorderID },
            success: function (msg) {
                var pdfDiv = $(msg.Content);
                $("#woPdfDiv").append(pdfDiv);
                generatePDF();
            },
            error: function (err) {
                debugger;
                $('body').css({'overflow-y':'auto'});
            }
        })
    }
    //==============================================

    function generatePDF() {

        var img1, img2, hratio1, hratio2;
        var imgArr = [];
        var heightRatio = [];

        var headerBlock = $(".work-order")
        var reqEqpBlock = $(".reqEquipmentBlock")
        var eqpBlock = $(".equipmentBlock")
        if (WOStatus == "Accepted" || WOStatus == "Accepted-Partial"
                   || WOStatus == "On Site" || WOStatus == "In Progress"
                   || WOStatus == "Completed" || WOStatus == "Closed" || WOStatus == "Invoiced")
        {
            EquipmentGridRender(eqpBlock, imgArr, heightRatio)
        }
        else
        {
            var renderCount = 0;
            if ($(".reqEqpSec").length > 0) {
                headerBlock.append($(".wrkReqHeading"));
                $(".reqEqpSec").each(function (index, element) {
                    var currentElement = element;

                    if (index == 0) {
                        currentElement = headerBlock;
                        currentElement.append(element);
                    }

                    html2canvas(currentElement, {
                        onrendered: function (canvas) {
                            var wid;
                            var hgt;
                            var img = canvas.toDataURL('image/png', wid = canvas.width, hgt = canvas.height);
                            heightRatio.push(hgt / wid);
                            imgArr.push(img);

                            renderCount++;
                            if (renderCount == $(".reqEqpSec").length) {
                                //EquipmentGridRender(eqpBlock, imgArr, heightRatio)
                                var eqpImgArr = [];
                                var eqpHeightRatio = [];
                                savePDF(imgArr, heightRatio, eqpImgArr, eqpHeightRatio);
                            }
                        }
                    });
                });
            }
        }
    };


    function EquipmentGridRender(eqpBlock, imgArr, heightRatio) {
        var renderCount = 0;
        var eqpImgArr = [];
        var eqpHeightRatio = [];
        var headerBlock = $(".work-order")
        if ($(".eqpSec").length > 0) {
            //eqpBlock.append($(".closureEqpHeading"));
            headerBlock.append($(".closureEqpHeading"));
            $(".eqpSec").each(function (index, element) {
                var currentElement = element;
                //if (index == 0) {
                //    currentElement = $(".closureEqpHeading");
                //    currentElement.append(element);
                //}

                if (index == 0) {
                    currentElement = headerBlock;
                    currentElement.append(element);
                }

                if (index == $(".eqpSec").length - 1)
                {
                    currentElement.append($(".costDetailsBlock"));
                    currentElement.append($(".timeDetailsBlock"));
                    currentElement.append($(".CustomerSignatureBlock"));
                }

                html2canvas(currentElement, {
                    onrendered: function (canvas) {
                        var wid;
                        var hgt;
                        var img = canvas.toDataURL('image/png', wid = canvas.width, hgt = canvas.height);
                        eqpHeightRatio.push(hgt / wid);
                        eqpImgArr.push(img);

                        renderCount++;
                        if (renderCount == $(".eqpSec").length) {
                            savePDF(imgArr, heightRatio, eqpImgArr, eqpHeightRatio);
                        }
                    }
                });
            });
        }
        else {
            savePDF(imgArr, heightRatio, eqpImgArr, eqpHeightRatio);
        }
    }

    var x = 2, y = 10;
    function savePDF(imgArr, heightRatio, eqpImgArr, eqpHeightRatio) {
        var doc = new jsPDF('p', 'pt', 'a4');

        for (var im = imgArr.length - 1; im >= 0; im--) {
            if (im != imgArr.length - 1) {
                doc.addPage();
            }
            var width = doc.internal.pageSize.width;
            var height = width * heightRatio[im];
            doc.addImage(imgArr[im], 'PNG', x, y, width, height, 'Image'+im, 'fast');

        }

        if (WOStatus == "Accepted" || WOStatus == "Accepted-Partial"
            || WOStatus == "On Site" || WOStatus == "In Progress"
            || WOStatus == "Completed" || WOStatus == "Closed" || WOStatus == "Invoiced") {
            for (var im = eqpImgArr.length - 1; im >= 0; im--) {
                if (im != eqpImgArr.length - 1) {
                    doc.addPage();
                }
                var width = doc.internal.pageSize.width;
                var height = width * eqpHeightRatio[im];
                doc.addImage(eqpImgArr[im], 'PNG', x, y, width, height, 'Image'+im, 'fast');
            }
        }

        html2canvas($(".WordSection1"), {
            onrendered: function (canvas) {
                //for terms and conditions
                //WordSection1
                var wid;
                var hgt;
                var img = canvas.toDataURL('image/png', wid = canvas.width, hgt = canvas.height);
                var ratio = hgt / wid;
                //eqpHeightRatio.push(hgt / wid);
                //eqpImgArr.push(img);
                var rectX = 200, rectY = 800, rectW = 100, rectH = 8;
                doc.setFontSize(8);
                doc.setTextColor(0, 0, 255);
                doc.textWithLink('Click here for Customer Satisfaction Survey', rectX, rectY, { url: 'https://goo.gl/forms/KgvSAgobIEee3kEz2'});
                doc.link(rectX, rectY, rectW, rectH, {url: 'https://goo.gl/forms/KgvSAgobIEee3kEz2'});

                //for terms and conditions
                html2canvas($(".WordSection1"), {
                    onrendered: function (canvas) {
                        var wid;
                        var hgt;
                        var img = canvas.toDataURL('image/png', wid = canvas.width, hgt = canvas.height);
                        var ratio = hgt / wid;

			//TODO: Uncomment once updated terms are ready
			/*doc.addPage();
                        var width = doc.internal.pageSize.width;
                        var height = doc.internal.pageSize.height;
                        doc.addImage(img, 'PNG', x, y, width, height, 'Image', 'fast');*/

                        doc.save('WorkorderFor_' + workorderPDFId + '.pdf');

                        $("#mainBodyDiv").remove();

                        $('body').css({ 'overflow': 'auto' });
                    }
                });
            }
        });

        // end of terms and conditions

    }

    //==============================================

    function generatePDF1() {
        $( '#ForWaitCursor' ).addClass( "loading" );
        var img1, img2, hratio1, hratio2;
        var imgArr = [];
        var heightRatio = [];

        var headerBlock = $(".work-order")
        var reqEqpBlock = $(".reqEquipmentBlock")
        var eqpBlock = $(".equipmentBlock")
        if (WOStatus == "Accepted" || WOStatus == "Accepted-Partial"
                 || WOStatus == "On Site" || WOStatus == "In Progress"
                 || WOStatus == "Completed" || WOStatus == "Closed" || WOStatus == "Invoiced")
        {
            EquipmentGridRender1(eqpBlock, imgArr, heightRatio)
        }
        else
        {
            var renderCount = 0;
            if ($(".reqEqpSec").length > 0) {
                headerBlock.append($(".wrkReqHeading"));
                $(".reqEqpSec").each(function (index, element) {
                    var currentElement = element;

                    if (index == 0) {
                        currentElement = headerBlock;
                        currentElement.append(element);
                    }

                    html2canvas(currentElement, {
                        onrendered: function (canvas) {
                            var wid;
                            var hgt;
                            var img = canvas.toDataURL('image/png', wid = canvas.width, hgt = canvas.height);
                            heightRatio.push(hgt / wid);
                            imgArr.push(img);

                            renderCount++;
                            if (renderCount == $(".reqEqpSec").length) {
                                var eqpImgArr = [];
                                var eqpHeightRatio = [];
                                savePDF(imgArr, heightRatio, eqpImgArr, eqpHeightRatio);
                            }
                        }
                    });
                });
            }
        }
    };


    function EquipmentGridRender1(eqpBlock, imgArr, heightRatio) {
        var renderCount = 0;
        var eqpImgArr = [];
        var eqpHeightRatio = [];
        var headerBlock = $(".work-order")

        var costBlock = $(".costDetailsBlock");
        var timeBlock = $(".timeDetailsBlock");

        if ($(".eqpSec").length > 0) {
            headerBlock.append($(".closureEqpHeading"));
            $(".eqpSec").each(function (index, element) {
                var currentElement = element;

                if (index == 0) {
                    currentElement = headerBlock;
                    currentElement.append(element);
                }

                if (index == $(".eqpSec").length-1)
                {
                    currentElement.append(costBlock);
                    //currentElement.append(timeBlock);
                }

                html2canvas(currentElement, {
                    onrendered: function (canvas) {
                        var wid;
                        var hgt;
                        var img = canvas.toDataURL('image/png', wid = canvas.width, hgt = canvas.height);
                        eqpHeightRatio.push(hgt / wid);
                        eqpImgArr.push(img);

                        renderCount++;
                        if (renderCount == $(".eqpSec").length) {
                            savePDF1(imgArr, heightRatio, eqpImgArr, eqpHeightRatio);
                            //RequestedGridRenderer1(imgArr, heightRatio, eqpImgArr, eqpHeightRatio);
                        }
                    }
                });
            });
        }
        else {
            savePDF1(imgArr, heightRatio, eqpImgArr, eqpHeightRatio);
            //RequestedGridRenderer1(imgArr, heightRatio, eqpImgArr, eqpHeightRatio);
        }
    }

    function RequestedGridRenderer1(imgArr, heightRatio, eqpImgArr, eqpHeightRatio)
    {
        var headerBlock = $(".wrkReqHeading")
        var timeBlock = $(".timeDetailsBlock");
        var renderCount = 0;
        if ($(".reqEqpSec").length > 0) {
            //headerBlock.append($(".wrkReqHeading"));
            $(".reqEqpSec").each(function (index, element) {
                var currentElement = element;

                if (index == 0) {
                    currentElement = headerBlock;
                    currentElement.append(element);
                }

                if (index == $(".reqEqpSec").length-1)
                {
                    //currentElement.append(costBlock);
                    currentElement.append(timeBlock);
                }

                html2canvas(currentElement, {
                    onrendered: function (canvas) {
                        var wid;
                        var hgt;
                        var img = canvas.toDataURL('image/png', wid = canvas.width, hgt = canvas.height);
                        heightRatio.push(hgt / wid);
                        imgArr.push(img);

                        renderCount++;
                        if (renderCount == $(".reqEqpSec").length) {
                            //savePDF(eqpBlock, imgArr, heightRatio);
                            //EquipmentGridRender(eqpBlock, imgArr, heightRatio)
                            //var eqpImgArr = [];
                            //var eqpHeightRatio = [];
                            savePDF1(imgArr, heightRatio, eqpImgArr, eqpHeightRatio);
                        }
                    }
                });
            });
        }
    }


    function savePDF1(imgArr, heightRatio, eqpImgArr, eqpHeightRatio) {
        var doc = new jsPDF('p', 'pt', 'a4');

        if (WOStatus == "Accepted" || WOStatus == "Accepted-Partial"
            || WOStatus == "On Site" || WOStatus == "In Progress"
            || WOStatus == "Completed" || WOStatus == "Closed" || WOStatus == "Invoiced") {
            for (var im = eqpImgArr.length - 1; im >= 0; im--) {
                if (im != eqpImgArr.length - 1) {
                    doc.addPage();
                }
                var width = doc.internal.pageSize.width;
                var height = width * eqpHeightRatio[im]; //doc.internal.pageSize.height;
                doc.addImage(eqpImgArr[im], 'PNG', x, y, width, height, 'Image'+im, 'fast');
            }
        }


        var headerBlock = $(".wrkReqHeading")
        var timeBlock = $(".timeDetailsBlock");
        var renderCount = 0;
        if ($(".reqEqpSec").length > 0) {
            //headerBlock.append($(".wrkReqHeading"));
            $(".reqEqpSec").each(function (index, element) {
                var currentElement = element;

                if (index == 0) {
                    currentElement = headerBlock;
                    currentElement.append(element);
                    doc.addPage();
                }

                if (index == $(".reqEqpSec").length-1)
                {
                    //currentElement.append(costBlock);
                    currentElement.append(timeBlock);
                }

                html2canvas(currentElement, {
                    onrendered: function (canvas) {
                        var wid;
                        var hgt;
                        var img = canvas.toDataURL('image/png', wid = canvas.width, hgt = canvas.height);
                        var width = doc.internal.pageSize.width;
                        var height = width * (hgt / wid);
                        doc.addImage(img, 'PNG', x, y, width, height, 'Image'+im, 'fast');

                        renderCount++;
                        if (renderCount == $(".reqEqpSec").length) {

                            html2canvas($(".WordSection1"), {
                                onrendered: function (canvas) {
                                    var wid;
                                    var hgt;
                                    var img = canvas.toDataURL('image/png', wid = canvas.width, hgt = canvas.height);
                                    var ratio = hgt / wid;
                                    //eqpHeightRatio.push(hgt / wid);
                                    //eqpImgArr.push(img);
                                    doc.addPage();
                                    var width = doc.internal.pageSize.width;
                                    var height = doc.internal.pageSize.height;
                                    doc.addImage(img, 'PNG', x, y, width, height, 'Image', 'fast');

                                    doc.save('WorkorderFor_' + workorderPDFId + '.pdf');

                                    $("#mainBodyDiv").remove();

                                    $('body').css({ 'overflow': 'auto' });
                                    $( '#ForWaitCursor' ).removeClass( "loading" );
                                }
                            });

                        }
                    }
                });
            });
        }


        /* for (var imm = imgArr.length - 1; imm >= 0; imm--) {
             if (imm != imgArr.length - 1 || eqpImgArr.length > 0) {
                 doc.addPage();
             }
             var width = doc.internal.pageSize.width;
             var height = width * heightRatio[imm]; //doc.internal.pageSize.height;
             doc.addImage(imgArr[imm], 'PNG', x, y, width, height, 'Image'+imm, 'fast')
         }

         //for terms and conditions
         //WordSection1
         html2canvas($(".WordSection1"), {
             onrendered: function (canvas) {
                 var wid;
                 var hgt;
                 var img = canvas.toDataURL('image/png', wid = canvas.width, hgt = canvas.height);
                 var ratio = hgt / wid;
                 //eqpHeightRatio.push(hgt / wid);
                 //eqpImgArr.push(img);
                 doc.addPage();
                 var width = doc.internal.pageSize.width;
                 var height = doc.internal.pageSize.height;
                 doc.addImage(img, 'PNG', x, y, width, height, 'Image', 'fast');

                 doc.save('WorkorderFor_' + workorderPDFId + '.pdf');

                 //$("#mainBodyDiv").remove();

                 $('body').css({ 'overflow': 'auto' });
                 $( '#ForWaitCursor' ).removeClass( "loading" );
             }
         });*/

        // end of terms and conditions

    }

    //===============================================

    function SetRemainingSolutions()
    {
        var obj = $("#ClosureAssets").ejGrid("instance");

        for(var i = 0; i < obj.model.dataSource.dataSource.json.length; i ++)
        {
            if (obj.model.dataSource.dataSource.json[i].Solution == "" || obj.model.dataSource.dataSource.json[i].Solution == null)
            {
                obj.model.dataSource.dataSource.json[i].Solution  = $('#SolutionsDropDownList').val();
            }
        }
        obj.dataSource(obj.model.dataSource.dataSource.json);
        $('[data-popup-close]').trigger("click");
    }

    function queryCellInfoEquipment( args )
    {
        if ( args.column.headerText === "Equipment Type" )
        {
            $( args.cell ).text( "OTHER" );
        }

    }
    function ImageNotFound()
    {
        $('#CustomerSignatureArea').show();
        $('#CustomerSignatureImage').hide();
    }
    function TechSignatureImageNotFound()
    {
        $('#TechnicianSignatureArea').show();
        $('#TechnicianSignatureImage').hide();
    }

    function queryCellInfo(args) {
        //alert(args.data.isUnavailable);
        if (args.column.field == "isUnavailable" && args.data.isUnavailable ==1)
        {
            //alert("1.1");
            $($(args.cell).parent()).css("backgroundColor", "yellow").css("color","red");/*custom css applied to the row */
        }
    }

    function ValidateContactPhoneNumber( phone )
    {
        return true;
        ////alert("1.3");
        //if ( phone.replace(/\W+/g, '').length ==10 )
        //{
        //    //alert("1.4");
        //    return true;
        //}
        //else
        //{
        //    AlertPopup( "|Please Enter Valid Contact Phone" );
        //    return false;
        //}
    }

    function ValidateCustomerEmail( sEmail )
    {
        var filter = /^([\w-\.]+)@@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([\w-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)$/;
        if ( filter.test( sEmail ) )
        {
            //alert("email check")
            return true;
        }
        else
        {
            AlertPopup( "|Please Enter Valid Customer Email" );
            return false;
        }
    }

    function ValidatePhoneNumber( phone )
    {
        //alert(phone);
        if ( phone.replace(/\W+/g, '').length ==10 )
        {
            //alert("t")
            return true;
        }
        else
        {
            //alert("f")
            AlertPopup( "|Please Enter Valid Phone Number" );
            return false;
        }
    }

    function ValidateEmail( sEmail )
    {
        var filter = /^([\w-\.]+)@@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([\w-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)$/;
        if ( filter.test( sEmail ) )
        {
            //alert("email check")
            return true;
        }
        else
        {
            AlertPopup( "|Please Enter Valid Email" );
            return false;
        }
    }
    function onToolbarClick( args )
    {
        if ( ( args.itemName == "Edit" || args.itemName == "Delete" ) & this.getSelectedRecords().length == 0 )
        {

            //prevent the default alert popup
            alert = function () { };

            //here you can call your own customize alert method
            AlertPopup( "|No records selected for " + args.itemName + " operation" );
        }
    }

    function OtherPhoneValidation(evt) {
        var charCode = (evt.which) ? evt.which : event.keyCode;
        //if ((charCode >= 48 && charCode <=57)|| charCode ==40 || charCode ==41 || charCode ==45)
        if (charCode >= 48 && charCode <=57)
            return true;

        return false;
    }

    function SendEscalationMail(emailTo,workorderId,notesItems) {
        $.ajax({
            type: "POST",
            url: "@Url.Action("SendEscalationMail", "Workorder")",
            data: { "emailTo":emailTo , "workOrderId" : workorderId,"notes" : JSON.stringify(notesItems)},
        }).done(function (jsonResult) {
            if (jsonResult.success == true)
            {
                if (jsonResult.message!='') {
                    AlertPopup(jsonResult.message);
                }
                else
                {
                    AlertPopup("|Escalation Email sent sucessfully.");
                }

                newNotesArray= [];
            }
            else{
                AlertPopup("|There is a problem to send Escalation Email!");
            }
        })
    }

    function CompleteBillingModel(args) {
        if (args.requestType == "beginedit" || args.requestType == "add") {
            if (args.requestType == "beginedit") {
                $("#BillingDetailsBillingType").ejDropDownList().data("ejDropDownList").selectItemByText(BillingType);
                $("#BillingDetailsBillingCode").val(BillingCode)
                $("#BillingDetailsQty").val(BillingQty)
                $("#BillingDetailsUnitPrice").val(BillingUnitPrice)
                $("#BillingDetailsTotal").val(BillingTotal)
            }

            $("#BillingDetailsBillingType").ejDropDownList({ change: "BillingTypeChange", enableFilterSearch: true });
            $("#BillingDetailsQuantity").on("keyup", BillingQuantityChange);
        }
    }

    function BillingQuantityChange(e) {
        var price = $("#BillingDetailsCost").val();

        if (price) {
            const priceArray = price.split("$");

            var total = parseInt(e.key) * priceArray[1];
            $("#BillingDetailsTotal").val("$" + total.toFixed(2));
        }
    }

    function BillingTypeChange(e) {
        $.ajax({
            type: "GET",
            url: "@Url.Action("GetBillingItem", "DispatchResponse")",
            data: { "ItemName": e.selectedValue},
        }).done(function (jsonResult) {
            if (jsonResult.success == true) {
                var result = jsonResult.data;
                $("#BillingDetailsBillingCode").val(result.BillingCode);
                $("#BillingDetailsCost").val("$" + result.UnitPrice.toFixed(2));
            }
            else {
                AlertPopup("|Problem fetching the Billing Item!");
            }
        });

    }

    var BillingType;
    var BillingCode;
    var BillingQty;
    var BillingUnitPrice;
    var BillingTotal;

    var TotalCost = 0;
    function BillingDetailsBeginEdit(args) {
        var children = args.row.children();

        BillingType = $(children[1]).text();
        BillingCode = $(children[2]).text();
        BillingQty = $(children[3]).text();
        BillingUnitPrice = $(children[4]).text();
        BillingTotal = $(children[5]).text();

    }

    function BillingDetailsBegin()
    {
        $('#BillingDetails_WaitingPopup').css("visibility", "hidden");
    }
    function BillingDetailsEndEdit()
    {
        $('#BillingDetails_WaitingPopup').css("visibility", "hidden");
    }
    function BillingDetailsEndAdd(args)
    {
        TotalCost += args.data.Total;

        $("#BillingTotalLbl").html(Number(TotalCost).toFixed(2));

        $('#BillingDetails_WaitingPopup').css("visibility", "hidden");
    }
    function onBillingToolBarClick(args) {

        if ((args.itemName == "Edit" || args.itemName == "Delete") & this.getSelectedRecords().length == 0) {

            //prevent the default alert popup
            alert = function () { };

            //here you can call your own customize alert method
            AlertPopup("|No records selected for " + args.itemName + " operation");

        }
        if (args.itemName == "Add") {

        }

    }

    function FBBillableDetailsBegin( args )
    {
        $( '#FBBillableDetails_WaitingPopup' ).css( "visibility", "hidden" );
    }
    function FBBillableDetailsEndEdit( args )
    {
        $( '#FBBillableDetails_WaitingPopup' ).css( "visibility", "hidden" );
    }
    function FBBillableDetailsEndAdd( args )
    {
        $( '#FBBillableDetails_WaitingPopup' ).css( "visibility", "hidden" );
    }

    var BillableSku;
    var BillableQty;
    var BillableUnitPrice;


    function FBBillableDetailsBeginEdit( args )
    {
        var children = args.row.children();
        debugger;
        BillableSku = $(children[1]).text();
        BillableDesc = $(children[2]).text();
        BillableQty = $(children[3]).text();
        BillableUnitPrice = $(children[4]).text();

    }
    function CompleteBillableModels( args )
    {
        //alert(args.requestType);
        if ( args.requestType == "beginedit" || args.requestType == "add" )
        {
            if ( args.requestType == "beginedit" )
            {

                $("#FBBillableDetailsSKU").ejDropDownList().data("ejDropDownList").selectItemByText(BillableSku);
                $("#FBBillableDetailsDescription").val(BillableDesc)
                $("#FBBillableDetailsQty").val(BillableQty )
                $("#FBBillableDetailsUnitPrice").val(BillableUnitPrice )
                $.ajax( {
                    url: '@Url.Action("GetBillableSkuDetails", "Workorder")',
                    type: 'GET',
                    data: { "sku": BillableSku },
                    success: function ( jsonResult )
                    {
                        if ( jsonResult.success == true )
                        {
                            debugger;
                            $("#FBBillableDetailsUnitPrice").val(jsonResult.data)
                            $("#FBBillableDetailsDescription").val(jsonResult.desc)

                        }
                        else
                        {
                            AlertPopup( "|There is a problem in getting Billable SKU details!" );
                        }
                    }
                } );
            }

            $( "#FBBillableDetailsSKU" ).ejDropDownList( { change: "FBBillableDetailsModelNoChange", enableFilterSearch: true } );
            //$( "#FBERFEquipmentDetailsProdNo" ).ejDropDownList( { change: "FBERFEquipmentDetailsProductNoChange", enableFilterSearch: true } );
        }
    }

    function FBBillableDetailsModelNoChange( e )
    {
        var selectedModel;
        $.ajax( {
            url: '@Url.Action("GetBillableSkuDetails", "Workorder")',
            type: 'GET',
            data: { "sku": e.value },
            success: function ( jsonResult )
            {
                if ( jsonResult.success == true )
                {
                    $("#FBBillableDetailsUnitPrice").val(jsonResult.data)
                    $("#FBBillableDetailsDescription").val(jsonResult.desc)

                }
                else
                {
                    AlertPopup( "|There is a problem in getting Billable SKU details!" );
                }
            }
        } );


    }

    function queryCellInfoBillable(args) {

        if (args.column.headerText === "Total Line Amount") {
            //alert(args.row.children().length);
            //alert((args.data.Qty === null || args.data.Qty == 0) && (args.row.children().length > 0));
            var Qty = args.data.Qty;
            if ((args.data.Qty === null || args.data.Qty == 0)) {
                Qty = 1;
            }
            if (args.data.UnitPrice !== null && args.data.UnitPrice != 0) {
                debugger;
                $(args.cell).text("$" + (Qty * Number(args.data.UnitPrice)).toFixed(2));
            }
            else {

                $(args.cell).text("$" + (Qty * Number(args.data.UnitPrice).toFixed(2)));
            }


        }
        if (args.column.headerText === "Unit Price") {
            debugger;
            if (args.data.UnitPrice !== null && args.data.UnitPrice != 0) {

                $(args.cell).text("$" + Number(args.data.UnitPrice).toFixed(2));
            }
            else {

                $(args.cell).text("$" + Number(args.data.UnitPrice).toFixed(2));
            }

        }
        if (args.column.headerText === "Qty") {
            if ((args.data.Qty === null || args.data.Qty == 0)) {
                $(args.cell).text(1);
            }
        }
    }



    function onToolbarClick(args) {
        if ((args.itemName == "Edit" || args.itemName == "Delete")) {

            if(this.getSelectedRecords().length == 0)
            {
                //prevent the default alert popup
                alert = function () { };

                //here you can call your own customize alert method
                AlertPopup("|No records selected for " + args.itemName + " operation");
            }
            else
            {
                if(args.itemId=="EquipmentDetails_edit" || args.itemId=="ClosureAssets_edit")
                {
                    //if(args.requestType == "beginedit" )
                    {
                        GetCategoryDetails(args.itemId);

                        //$("#EquipmentDetailsCategory").ejDropDownList({ dataSource: jsonResult.data });;
                    }
                }

            }

        }
        else  if(args.itemName == "Add")
        {
            if(args.itemId=="EquipmentDetails_add" || args.itemId=="ClosureAssets_add")
            {
                GetCategoryDetails(args.itemId);
            }
        }
    }

    function GetCategoryDetails(gridType)
    {
        $.ajax( {
            url: '@Url.Action("GetCategoryDetails", "Workorder")',
            type: 'GET',
            success: function ( jsonResult )
            {
                if ( jsonResult.success == true )
                {
                    if(gridType == "EquipmentDetails_edit" || gridType == "EquipmentDetails_add")
                    {
                        $("#EquipmentDetailsCategory").ejDropDownList({ dataSource: jsonResult.data });
                    }
                    else
                    {
                        $("#ClosureAssetsCategory").ejDropDownList({ dataSource: jsonResult.data });
                    }
                }
                else
                {
                    AlertPopup( "|There is a problem in getting Categories!" );
                }
            }
        } );
    }

    function onBillableToolbarClick(args) {
        if ((args.itemName == "Edit" || args.itemName == "Delete") & this.getSelectedRecords().length == 0) {

            //prevent the default alert popup
            alert = function () { };

            //here you can call your own customize alert method
            AlertPopup("|No records selected for " + args.itemName + " operation");

        }
        if (args.itemName == "Add") {
            if ($("#IsBillableFeed").is(":checked")) {
            }
            else {
                AlertPopup("|Please select IsBillable checkbox before adding sku's");
                return false;
            }
        }
    }


    function ValidateWorkorderModel() {
        debugger;
        var result = true;
        if($.type($('#WorkOrder_CallerName').val()) != "undefined" && $.type($('#WorkOrder_WorkorderContactName').val()) != "undefined" && $.type($('#WorkOrder_WorkorderContactPhone').val()) != "undefined"
            && $.type($('#WorkOrder_HoursOfOperation').val()) != "undefined")
        {

            if ($('#WorkOrder_CallerName').val().length > 60 || $('#WorkOrder_WorkorderContactName').val().length > 80 || $('#WorkOrder_WorkorderContactPhone').val().length > 30
                || $('#WorkOrder_HoursOfOperation').val().length > 100) {

                result = false;
            }
            if ($("#Closure_InvoiceNo").length) {
                if ($("#Closure_InvoiceNo").val().length > 50) {
                    return false;
                }

            }
            if ($("#ResponsibleTechName").length) {
                if ($("#ResponsibleTechName").val().length > 70) {
                    return false;
                }

            }

            if ($("#Closure_CustomerName").length) {
                if ($("#Closure_CustomerName").val().length > 90) {
                    return false;
                }

            }

            if ($("#Closure_CustomerEmail").length) {
                if ($("#Closure_CustomerEmail").val().length > 90) {
                    return false;
                }

            }
        }
        return result;
    }

    @*function SendEInvoice()
    {
        $.ajax({
            url: '@Url.Action("ElectronicInvoice", "Workorder")',
            type: 'GET',
            data: { "WorkorderID": $("#WorkOrder_WorkorderID").val() },
            success: function (data1) {

            }
        });
    }*@

    function ExirWorkorder(flag)
    {
        $('[data-popup="popup-dataVerify-1"]').fadeOut(350);
        if(flag == 1)
        {
            $.ajax({
                type: "POST",
                url: "@Url.Action("RemoveCurrentUser", "Workorder")",
                data: { workOrderId: $("#WorkOrder_WorkorderID").val() }
            }).done(function (jsonResult) {
                window.location.href = "@Url.Action("WorkorderSearch", "Workorder")" + "?IsBack=1";
            });
        }
        else if(flag == 0)
        {

        }
    }

    function OnCCProcessClick() {
        //var url = "@Url.Action("ProcessCard", "DispatchResponse")" + "?workOrderId=" + $("#WorkOrder_WorkorderID").val() + "&techId=" +@Model.ResponsibleTechId;
        var url = "@string.Format("{0}{1}&encrypt=yes", System.Configuration.ConfigurationManager.AppSettings["ProcessCardUrl"], new Encrypt_Decrypt().Encrypt("workOrderId=" + Model.WorkOrder.WorkorderID + "&techId=" + Model.ResponsibleTechId + "&response=10&isResponsible=true"))";
        window.open(url, '_blank').focus();
    }

    @*function UpdateServiceQuote() {
         $.ajax({
                type: "GET",
                url: "@Url.Action("GetServiceQuoteDetails", "Workorder")",
             data: { Workorderid: $("#WorkOrder_WorkorderID").val() }
            }).done(function (jsonResult) {
                if (jsonResult.success) {
                    $("#quoteDistance").val(jsonResult.data.TravelDistance);
                    $("#quoteTravelTime").val(jsonResult.data.TravelTime);
                    $("#quoteLabor").val(jsonResult.data.Labor);
                    $("#quoteParts").val(jsonResult.data.PartsTotal);
                    $("#quoteTotal").val(jsonResult.data.TotalServiceQuote);
                }
            });
    }*@

</script>

@using (Html.BeginForm())
{
    @Html.HiddenFor(m => m.Operation)
    @Html.HiddenFor(m => m.WorkOrder.WorkorderCalltypeid)
    @Html.HiddenFor(m => m.WorkOrder.WorkorderCalltypeDesc)
    @Html.HiddenFor(m => m.IsNewPartsOrder)
    @Html.HiddenFor(m => m.WorkOrder.SpawnCounter)
    @Html.HiddenFor(m => m.WorkOrder.OriginalWorkorderid)
    @Html.HiddenFor(m => m.WorkOrder.ParentWorkorderid)
    @Html.HiddenFor(m => m.WorkOrder.EntryUserName)
    @Html.HiddenFor(m => m.Customer.ZipCode)
    @Html.HiddenFor(m => m.WorkOrder.WorkorderTimeZone)
    @Html.HiddenFor(m => m.WorkOrder.WorkorderDaylightSaving)
    @Html.HiddenFor(m => m.WorkOrder.WorkorderClosureConfirmationNo)
    @Html.HiddenFor(m => m.WorkOrder.CoverageZone)
    @Html.HiddenFor(m => m.IsOpen)
    @Html.HiddenFor(m => m.WorkOrder.CurrentUserName)
    @Html.HiddenFor(m => m.WorkOrder.AuthTransactionId)
    @Html.HiddenFor(m => m.WorkOrder.FinalTransactionId)
    @Html.HiddenFor(m => m.isCustomerDashboard)


    <section class="container-fluid white-bg pad fixedSecond header">
        @{ Dictionary<string, string> UserPrivilege = (Dictionary<string, string>)System.Web.HttpContext.Current.Session["UserPrivilege" + (int)System.Web.HttpContext.Current.Session["UserId"]] == null
                                                                                                                                                                                                         ? Security.GetUserPrivilegeByUserId((int)System.Web.HttpContext.Current.Session["UserId"], null) :
                                                                                                                                                                                                         (Dictionary<string, string>)System.Web.HttpContext.Current.Session["UserPrivilege" + (int)System.Web.HttpContext.Current.Session["UserId"]]; }
        <div class="row vertical-align">
            <div class="col-md-12">
                <div class="col-md-8">
                    <div class="row">
                        <div class="col-md-3">
                            @*<button id="eInvoice" style="margin-right:5px;" class="btn btn-primary" onclick="SendEInvoice()">e-Invoice</button>*@
                            <b>Work Order ID:</b>
                            @if (Model.WorkOrder.WorkorderID > 0)
                            {
                                if (@Model.WorkOrder.SpawnCounter.HasValue)
                                {
                                    <span>@Model.WorkOrder.WorkorderID - @Model.WorkOrder.SpawnCounter</span>
                                }
                                else
                                {
                                    <span>@Model.WorkOrder.WorkorderID</span>
                                }
                            }
                            @Html.HiddenFor(w => w.WorkOrder.WorkorderID)
                        </div>
                        <div class="col-md-3">
                            @if (!string.IsNullOrWhiteSpace(Model.WorkOrder.WorkorderErfid))
                            {
                                <b>ERF ID:</b>
                                if (UserPrivilege["ERF"] != "No-Permission")
                                {
                                    <span>@Html.ActionLink(@Model.WorkOrder.WorkorderErfid, "ErfDetails", "Erf", new { id = @Model.WorkOrder.WorkorderErfid }, new { target = "_blank" })</span>
                                }
                                else
                                {
                                    <span>@Model.WorkOrder.WorkorderErfid</span>
                                }

                            }
                        </div>
                        <div class="col-md-3">
                        </div>
                        <div class="col-md-3">
                        </div>
                    </div>

                    <div class="row vertical-align">
                        <div class="col-md-12">
                            @if (Model.WorkOrder.WorkorderID > 0)
                            {
                                if ((int)System.Web.HttpContext.Current.Session["CanExportSessionValue"] == 1)
                                {
                                    <button class="e-editbutton e-button e-js e-btn-normal e-btn e-select e-widget" type="button" value="edit" id="ejControl_0" tabindex="" role="button" aria-disabled="false" style="display: inline-block; height: 28px; width: 52px;" onclick="GeneratePdf();"><div><span class="e-icon e-pdf"></span></div></button>
                                }

                            }
                            <div class="col-md-2" style="align-items:center">
                                <span>Status:</span>
                                @if (!string.IsNullOrWhiteSpace(Model.WorkOrder.WorkorderCallstatus))
                                {
                                    <span id="WorkorderCallStatus">@Model.WorkOrder.WorkorderCallstatus</span>
                                }
                                else
                                {
                                    <span id="WorkorderCallStatus"></span>
                                }
                                @Html.HiddenFor(w => w.WorkOrder.WorkorderCallstatus)
                            </div>
                            <div class="col-md-2">
                                <span>Created By:</span><br />
                                <span>@Model.WorkOrder.EntryUserName</span>
                            </div>
                            @if (Model.WorkOrder.WorkorderEntryDate.HasValue)
                            {
                                <div class="col-md-2">
                                    <span>Created On:</span><br />
                                    <span>@Model.WorkOrder.WorkorderEntryDate.Value.ToString("MM/dd/yyyy")</span>
                                </div>
                            }
                            @Html.HiddenFor(w => w.WorkOrder.WorkorderEntryDate)
                            @Html.HiddenFor(w => w.CurrentDateTime)


                            @if (Model.WorkOrder.WorkorderCloseDate.HasValue)
                            {
                                <div class="col-md-2">
                                    <span>Closed By:</span><br />
                                    <span>@Model.WorkOrder.ClosedUserName</span>
                                </div>
                                <div class="col-md-2">
                                    <span>Closed On:</span><br />
                                    <span>@Model.WorkOrder.WorkorderCloseDate.Value.ToString("MM/dd/yyyy")</span>
                                </div>
                            }
                            else
                            {
                                @*<div class="col-md-2">
                                    </div>
                                    <div class="col-md-2">
                                    </div>*@
                            }
                            @Html.HiddenFor(w => w.WorkOrder.WorkorderCloseDate)

                            <div class="col-md-2">
                                <span><b>Time Zone:</b></span><br />
                                <span><b>@Model.Customer.CurrentTime @Model.Customer.CustomerTimeZone</b></span>
                            </div>
                        </div>
                    </div>

                </div>
                <div class="col-md-2" style="text-align:right;">
                    @{

                        if (UserPrivilege["Work Order"] == "Edit-Only" || UserPrivilege["Work Order"] == "Full" || (UserPrivilege["Customer"] == "Full" && UserPrivilege["Work Order"] == "Read-Only"))
                        {
                            if ((UserPrivilege["Customer"] == "Full" && UserPrivilege["Work Order"] == "Read-Only"))
                            {
                                if (Model.WorkOrder.WorkorderID == 0)
                                {
                                    <a data-popup-open="popup-8" class="btn btn-primary enableonclose" style="margin-right:5px;">Email WO</a>
                                    if (Model.IsOpen == false)
                                    {
                                        <button type="submit" style="margin-right:5px;" class="btn btn-primary enableonclose SaveandPayWorkOrderBtn" onclick="SetSubmitOperation(10)" name="action:WorkorderSave">Save & Pay</button>
                                        <button id="SaveWorkOrderId" type="submit" style="margin-right:5px;" class="btn btn-primary enableonclose" onclick="SetSubmitOperation(1)" name="action:WorkorderSave">Save</button>
                                    }
                                    <button id="ExitWorkOrder" class="btn btn-primary enableonclose">Exit Work Order</button>
                                    @*if (Model.isCustomerDashboard)
                                        {
                                            //window.location.href = "@Url.Action("WorkorderManagement", "Workorder")" + "/" + args.data["CustomerId"] + "/" + args.data["WorkOrderId"] + "/false/false/true";
                                            @Html.ActionLink("Exit Work Order", "CustomerDashboard", "Customer", new { @Id = "ExitWorkOrder", @Class = "btn btn-primary enableonclose" })
                                        }
                                        else
                                        {
                                            @Html.ActionLink("Exit Work Order", "WorkorderSearch", "Workorder", new { @IsBack = 1 }, new { @Id = "ExitWorkOrder", @Class = "btn btn-primary enableonclose" })
                                        }*@
                                }

                            }
                            else
                            {
                                if (Model.WorkOrder.WorkorderID > 0)
                                {
                                    <a data-popup-open="popup-8" class="btn btn-primary enableonclose" style="margin-right:5px;">Email WO</a>
                                }

                                if (Model.IsOpen == false)
                                {
                                    <button type="submit" style="margin-right:5px;" class="btn btn-primary enableonclose SaveandPayWorkOrderBtn" onclick="SetSubmitOperation(10)" name="action:WorkorderSave">Save & Pay</button>
                                    <button id="SaveWorkOrderId" type="submit" style="margin-right:5px;" class="btn btn-primary enableonclose" onclick="SetSubmitOperation(1)" name="action:WorkorderSave">Save</button>
                                }

                                if (Model.WorkOrder.WorkorderID > 0)
                                {
                                    <button id="ExitWorkOrder" class="btn btn-primary enableonclose">Exit Work Order</button>
                                    @*if (Model.isCustomerDashboard)
                                        {
                                            @Html.ActionLink("Exit Work Order", "CustomerDashboard", "Customer", new { @Id = "ExitWorkOrder", @Class = "btn btn-primary enableonclose" })
                                        }
                                        else
                                        {
                                            @Html.ActionLink("Exit Work Order", "WorkorderSearch", "Workorder", new { @IsBack = 1 }, new { @Id = "ExitWorkOrder", @Class = "btn btn-primary enableonclose" })
                                        }*@
                                }
                            }

                        }
                        else if (UserPrivilege["CustomerDashboard"] == "Edit-Only" || UserPrivilege["CustomerDashboard"] == "Full")
                        {
                            <button id="ExitWorkOrder" class="btn btn-primary enableonclose">Exit Work Order</button>
                        }
                    }
                </div>
            </div>
        </div>
    </section>

    @*if (Model.IsCustomerPartsOrder == false && Model.IsNewPartsOrder == false)
        {
            @Html.Partial("~/Views/Shared/_TPSPDetailsPartial.cshtml", Model.Customer)
        }
        else
        {*@
    @Html.Partial("~/Views/Shared/_CustomerDetailsPartial.cshtml", Model.Customer)
    //}

    <div class="popup" data-popup="popup-5">
        <div class="popup-inner">
            <h4>Set Solution</h4>
            <table>
                <tr>
                    <td colspan="2">Select the solution for all remaining equipment</td>
                </tr>
                <tr>
                    <td>Solution:</td>
                    <td>@Html.TextBox("SolutionsDropDownList", null, new { @class = "form-control WorkOrderFields SolutionsDropDownList" })</td>
                </tr>
                <tr style="margin-top:50px;">
                    <td><button style="margin-top:10px;" class="btn btn-orange" onclick="SetRemainingSolutions()">Select</button></td>
                    <td><button data-popup-close="popup-5" style="margin-top:10px;float:right;" class="btn btn-primary ">Cancel</button></td>
                </tr>
            </table>
            <a class="popup-close" data-popup-close="popup-5">x</a>
        </div>
    </div>

    if (Model.IsNewPartsOrder != true
         /*&& Model.WorkOrder.WorkorderCalltypeid != 1800
         && Model.WorkOrder.WorkorderCalltypeid != 1810
         && Model.WorkOrder.WorkorderCalltypeid != 1830
         && Model.WorkOrder.WorkorderCalltypeid != 1820*/
         && Model.WorkOrder.WorkorderCalltypeDesc != "Parts Request")
    {
        @Html.Partial("~/Views/Shared/_WorkOrderDetails.cshtml", Model)

        //if (string.Compare(Model.WorkOrder.WorkorderCallstatus, "Accepted", true) == 0)
        //{

        //}
        <style>
            .work-requested-details-content {
                display: block !important;
            }
        </style>

        <section class="block">
            <div class="container-fluid">
                <h2 class="work-requested-details-head arrow-down tabheader required1">Work Requested</h2>
                <div class="work-requested-details-content margin-top" style="display:block !important;">
                    <div class="col-xs-12 customer sm-pad-reset">
                        <div class="row">
                            @if (Model.WorkOrder.WorkorderCalltypeid != 1300
&& string.Compare(Model.WorkOrder.WorkorderCallstatus, "Completed", true) != 0
&& string.Compare(Model.WorkOrder.WorkorderCallstatus, "Closed", true) != 0
&& string.Compare(Model.WorkOrder.WorkorderCallstatus, "Invoiced", true) != 0)
                            {
                                <div class="col-md-12">
                                    Equipment:
                                    <div class="table-responsive">
                                        @(Html.EJ().Grid<FarmerBrothers.Models.WorkOrderManagementEquipmentModel>("EquipmentDetails")
.Datasource(ds => ds.Json((IEnumerable<object>)Model.WorkOrderEquipmentsRequested).UpdateURL(Url.Action("EquipmentDetailsUpdate", "Workorder")).InsertURL(Url.Action("EquipmentDetailsInsert", "Workorder")).RemoveURL(Url.Action("EquipmentDetailsDelete", "Workorder")).Adaptor(AdaptorType.RemoteSaveAdaptor))
.AllowPaging()
.AllowSorting()
.AllowTextWrap(true)
.EditSettings(edit =>
{
    edit.AllowAdding().AllowDeleting().AllowEditing().AllowEditOnDblClick(false);
})
.ToolbarSettings(toolbar =>
{
    toolbar.ShowToolbar().ToolbarItems(items =>
    {
        items.AddTool(ToolBarItems.Add);
        items.AddTool(ToolBarItems.Edit);
        items.AddTool(ToolBarItems.Delete);
        items.AddTool(ToolBarItems.Update);
        items.AddTool(ToolBarItems.Cancel);
    });
})
.ClientSideEvents(eve =>
{
    eve.ActionComplete("EquipmentDetailsActionComplete").ActionBegin("EquipmentDetailsBegin").EndEdit("EquipmentDetailsEndEdit").EndAdd("EquipmentDetailsEndAdd").ToolbarClick("onToolbarClick");
})
.Columns(col =>
{
    col.Field("AssetId").IsPrimaryKey(true).Visible(false).Add();
    col.Field("FeastMovementId").Visible(false).Add();
    col.Field("Category").HeaderText("Equipment Type").ForeignKeyField("Category").ForeignKeyValue("Category").DataSource(((IEnumerable<object>)Model.TaggedCategories)).Add();
    col.Field("CallTypeID").HeaderText("Service Code").ForeignKeyField("CallTypeID").ForeignKeyValue("Description").DataSource(((IEnumerable<object>)Model.CallTypes)).Add();
    col.Field("SymptomID").HeaderText("Symptom").ForeignKeyField("SymptomID").ForeignKeyValue("Description").DataSource(((IEnumerable<object>)Model.Symptoms)).Add();
    col.Field("Location").HeaderText("Equipment Location").Type(ColumnType.String).Add();
    col.Field("SerialNumber").HeaderText("Serial Number").Type(ColumnType.String).Add();
    //Commented as per ram request on 05-08-17
    //col.Field("CatelogID").HeaderText("Catalog ID").Add();
    //col.Field("Model").HeaderText("Model").Add();
}))
                                    </div><!--end of .table-responsive-->
                                </div>
                                //Commented as per ram request on 12-05-17
                                /*<div class="col-md-12">
                                    Non-Serialized:
                                    <div class="table-responsive">
                                        @(Html.EJ().Grid<FarmerBrothers.Models.WorkOrderManagementNonSerializedModel>("NonEquipmentDetails")
                                    .Datasource(ds => ds.Json((IEnumerable<object>)Model.NonSerializedList).UpdateURL(Url.Action("NonSerializedUpdate", "Workorder")).InsertURL(Url.Action("NonSerializedInsert", "Workorder")).RemoveURL(Url.Action("NonSerializedDelete", "Workorder")).Adaptor(AdaptorType.RemoteSaveAdaptor))
                                    .AllowPaging()
                                    .AllowSorting()
                                    .AllowTextWrap(true)
                                    .EditSettings(edit => { edit.AllowAdding().AllowDeleting().AllowEditing(); })
                                    .ToolbarSettings(toolbar =>
                                    {
                                        toolbar.ShowToolbar().ToolbarItems(items =>
                                        {
                                            items.AddTool(ToolBarItems.Add);
                                            items.AddTool(ToolBarItems.Edit);
                                            items.AddTool(ToolBarItems.Delete);
                                            items.AddTool(ToolBarItems.Update);
                                            items.AddTool(ToolBarItems.Cancel);
                                        });
                                    })
                                    .ClientSideEvents(eve => { eve.ActionBegin("NonEquipmentDetailsBegin").EndEdit("NonEquipmentDetailsEndEdit").EndAdd("NonEquipmentDetailsEndAdd"); })
                                    .Columns(col =>
                                    {
                                        col.Field("NSerialid").IsPrimaryKey(true).Visible(false).Add();
                                        col.Field("ManufNumber").HeaderText("Manufacturer Number").Add();
                                        col.Field("Catalogid").HeaderText("Catalog ID").Add();
                                        col.Field("OrigOrderQuantity").HeaderText("Qty").Add();
                                    }))
                                    </div><!--end of .table-responsive-->
                                </div>*/
                            }
                            else
                            {
                                <div class="col-md-12">
                                    Equipment:
                                    <div class="table-responsive">
                                        @(Html.EJ().Grid<FarmerBrothers.Models.WorkOrderManagementEquipmentModel>("EquipmentDetails")
.Datasource(ds => ds.Json((IEnumerable<object>)Model.WorkOrderEquipmentsRequested).UpdateURL(Url.Action("EquipmentDetailsUpdate", "Workorder")).InsertURL(Url.Action("EquipmentDetailsInsert", "Workorder")).RemoveURL(Url.Action("EquipmentDetailsDelete", "Workorder")).Adaptor(AdaptorType.RemoteSaveAdaptor))
.AllowPaging()
.AllowSorting()
.AllowTextWrap(true)
.Columns(col =>
{
    col.Field("AssetId").IsPrimaryKey(true).Visible(false).Add();
    col.Field("FeastMovementId").Visible(false).Add();
    col.Field("Category").HeaderText("Equipment Type").ForeignKeyField("Category").ForeignKeyValue("Category").DataSource(((IEnumerable<object>)Model.TaggedCategories)).Add();
    col.Field("CallTypeID").HeaderText("Service Code").ForeignKeyField("CallTypeID").ForeignKeyValue("Description").DataSource(((IEnumerable<object>)Model.CallTypes)).Add();
    col.Field("SymptomID").HeaderText("Symptom").ForeignKeyField("SymptomID").ForeignKeyValue("Description").DataSource(((IEnumerable<object>)Model.Symptoms)).Add();
    col.Field("Location").HeaderText("Equipment Location").Type(ColumnType.String).Add();
    col.Field("SerialNumber").HeaderText("Serial Number").Type(ColumnType.String).Add();
}).ClientSideEvents(eve =>
{
    //eve.QueryCellInfo("queryCellInfoEquipment");
}))
                                    </div><!--end of .table-responsive-->
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </section>
    }

    @Html.HiddenFor(m => m.PartsShipTo)

    if (Model.WorkOrder.WorkorderID >= 0 && (Model.IsNewPartsOrder == true
        /*|| Model.WorkOrder.WorkorderCalltypeid == 1800
        || Model.WorkOrder.WorkorderCalltypeid == 1810
        || Model.WorkOrder.WorkorderCalltypeid == 1830
        || Model.WorkOrder.WorkorderCalltypeid == 1820*/
        || Model.WorkOrder.WorkorderCalltypeDesc == "Parts Request"))
    {
        <style>
            .parts-ordering-details-content {
                display: block !important;
            }
        </style>
        <section class="block">
            <div class="container-fluid">
                <h2 class="parts-ordering-details-head arrow-down tabheader">Parts Ordering</h2>
                <div class="parts-ordering-details-content margin-top" style="display:block !important;">
                    <div class="row customer clear-input">
                        <div class="col-md-4 customer-col1 sm-pad-reset">
                            <div class="col-xs-6-o">
                                <span class="col-sm-4 col-md-5 m-b-more">Ship To:</span>
                            </div>
                            <div class="col-md-12 customer-col1 sm-pad-reset">
                                @if (Model.IsNewPartsOrder == false
&& (Model.IsCustomerPartsOrder == false || Model.WorkOrder.WorkorderCalltypeDesc != "Parts Request" /*|| Model.WorkOrder.WorkorderCalltypeid != 1820
                                                                                                                                                                        || Model.WorkOrder.WorkorderCalltypeid != 1800
                                                                                                                                                                        || Model.WorkOrder.WorkorderCalltypeid != 1810
                                                                                                                                                                        || Model.WorkOrder.WorkorderCalltypeid != 1830*/))
                                {
                                    <div class=" col-xs-6-o">
                                        <span class="col-sm-8 col-md-7"><input name="ShipTo" value="1" type="radio"> Local Branch</span>
                                        <div id="ShipTo1" class="ShipToDiv">
                                            <div style="margin-left:30px;">
                                                <div>
                                                    <div class="col-sm-6-o">
                                                        <span class="col-md-5">@Html.CheckBoxFor(m => m.IsBranchAlternateAddress, new { @onchange = "BranchAlternateAddressChange()" }) Alternate Address:</span>
                                                        <div class="col-md-7">
                                                            <div class="form-group">
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div id="BranchAlternateAddressSection" style="margin-left:30px;">
                                                        <div class="col-sm-6-o">
                                                            <span class="col-md-5 required">Name:</span>
                                                            <div class="col-md-7">
                                                                <div class="form-group">
                                                                    @Html.TextBoxFor(m => m.BranchOtherPartsName, new { @class = "form-control WorkOrderFields" })
                                                                </div>
                                                            </div>
                                                        </div>
                                                        <div class="col-sm-6-o">
                                                            <span class="col-md-5 required">Contact Name:</span>
                                                            <div class="col-md-7">
                                                                <div class="form-group">
                                                                    @Html.TextBoxFor(m => m.BranchOtherPartsContactName, new { @class = "form-control WorkOrderFields" })
                                                                </div>
                                                            </div>
                                                        </div>
                                                        <div class="col-sm-6-o">
                                                            <span class="col-md-5 required">Address:</span>
                                                            <div class="col-md-7">
                                                                <div class="form-group">
                                                                    @Html.TextBoxFor(m => m.BranchOtherPartsAddress1, new { @class = "form-control WorkOrderFields", @style = "margin-bottom: 10px;" })
                                                                    @Html.TextBoxFor(m => m.BranchOtherPartsAddress2, new { @class = "form-control WorkOrderFields" })
                                                                </div>
                                                            </div>
                                                        </div>
                                                        <div class="col-sm-6-o">
                                                            <span class="col-md-5 required">City:</span>
                                                            <div class="col-md-7">
                                                                <div class="form-group">
                                                                    @Html.TextBoxFor(m => m.BranchOtherPartsCity, new { @class = "form-control WorkOrderFields" })
                                                                </div>
                                                            </div>
                                                        </div>
                                                        <div class="col-sm-6-o">
                                                            <span class="col-md-5 required">State:</span>
                                                            <div class="col-md-7">
                                                                <div class="form-group">
                                                                    @Html.DropDownListFor(m => m.BranchOtherPartsState, new SelectList(Model.States, "StateCode", "StateName"), new { @Id = "StatesDropDown", @class = "form-control WorkOrderFields" })
                                                                </div>
                                                            </div>
                                                        </div>
                                                        <div class="col-sm-6-o">
                                                            <span class="col-md-5 required">Zip:</span>
                                                            <div class="col-md-7">
                                                                <div class="form-group">
                                                                    @Html.TextBoxFor(m => m.BranchOtherPartsZip, new { @class = "form-control WorkOrderFields" })
                                                                </div>
                                                            </div>
                                                        </div>
                                                        <div class="col-sm-6-o">
                                                            <span class="col-md-5">Phone Number:</span>
                                                            <div class="col-md-7">
                                                                <div class="form-group">
                                                                    @Html.TextBoxFor(m => m.BranchOtherPartsPhone, new { @class = "form-control WorkOrderFields" })
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class=" col-xs-6-o">
                                        @*<span class="col-sm-8 col-md-7"><input name="ShipTo" value="4" type="radio"> Van</span>*@
                                    </div>
                                }
                                <div class="clearfix"></div>
                                <div class="col-xs-6-o">
                                    <span class="col-sm-8 col-md-7"><input name="ShipTo" value="2" type="radio" checked /> Customer</span>
                                    <div id="ShipTo2" class="ShipToDiv">
                                        <div style="margin-left:30px;">
                                            <div>
                                                <div class="col-sm-6-o">
                                                    <span class="col-md-5">@Html.CheckBoxFor(m => m.IsCustomerAlternateAddress, new { @onchange = "CustomerAlternateAddressChange()" }) Alternate Address:</span>
                                                    <div class="col-md-7">
                                                        <div class="form-group">
                                                        </div>
                                                    </div>
                                                </div>
                                                <div id="CustomerAlternateAddressSection" style="margin-left:30px;">
                                                    <div class="col-sm-6-o">
                                                        <span class="col-md-5">Name:</span>
                                                        <div class="col-md-7">
                                                            <div class="form-group">
                                                                @Html.TextBoxFor(m => m.CustomerOtherPartsName, new { @class = "form-control WorkOrderFields" })
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div class="col-sm-6-o">
                                                        <span class="col-md-5">Contact Name:</span>
                                                        <div class="col-md-7">
                                                            <div class="form-group">
                                                                @Html.TextBoxFor(m => m.CustomerOtherPartsContactName, new { @class = "form-control WorkOrderFields" })
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div class="col-sm-6-o">
                                                        <span class="col-md-5">Address:</span>
                                                        <div class="col-md-7">
                                                            <div class="form-group">
                                                                @Html.TextBoxFor(m => m.CustomerOtherPartsAddress1, new { @class = "form-control WorkOrderFields", @style = "margin-bottom: 10px;" })
                                                                @Html.TextBoxFor(m => m.CustomerOtherPartsAddress2, new { @class = "form-control WorkOrderFields" })
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div class="col-sm-6-o">
                                                        <span class="col-md-5">City:</span>
                                                        <div class="col-md-7">
                                                            <div class="form-group">
                                                                @Html.TextBoxFor(m => m.CustomerOtherPartsCity, new { @class = "form-control WorkOrderFields" })
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div class="col-sm-6-o">
                                                        <span class="col-md-5">State:</span>
                                                        <div class="col-md-7">
                                                            <div class="form-group">
                                                                @Html.DropDownListFor(m => m.CustomerOtherPartsState, new SelectList(Model.States, "StateCode", "StateName"), new { @Id = "StatesDropDown", @class = "form-control WorkOrderFields" })
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div class="col-sm-6-o">
                                                        <span class="col-md-5">Zip:</span>
                                                        <div class="col-md-7">
                                                            <div class="form-group">
                                                                @Html.TextBoxFor(m => m.CustomerOtherPartsZip, new { @type = "number", @class = "form-control WorkOrderFields" })
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div class="col-sm-6-o">
                                                        <span class="col-md-5">Phone Number:</span>
                                                        <div class="col-md-7">
                                                            <div class="form-group">
                                                                @Html.TextBoxFor(m => m.CustomerOtherPartsPhone, new { @class = "form-control WorkOrderFields", })
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="col-md-8 sm-pad-reset">
                            <div class="row">

                                <div class="col-sm-6-o">
                                    <span class="col-md-2 required">Date Needed:</span>
                                    <div class="col-md-2">
                                        <div class="form-group" style="float:right">
                                            @Html.TextBoxFor(m => m.WorkOrder.DateNeeded, new { @class = "form-control WorkOrderFields", @Id = "PartsOrderDateNeeded" })
                                        </div>
                                    </div>
                                </div>

                                <div class="col-sm-6-o">
                                    <span class="col-md-3">
                                        @*Rush Order:
                                            @Html.CheckBoxFor(m => m.WorkOrder.PartsRushOrder.Value)*@
                                    </span>
                                </div>

                                <div class="col-sm-6-o">
                                    <span class="col-md-2 required">Shipping Priority:</span>
                                    <div class="col-md-3">
                                        <div class="form-group">
                                            @Html.DropDownListFor(m => m.ShippingPriority, new SelectList(Model.ShippigPriorities, "FBStatusID", "FBStatus"), new { @Id = "ShippingPriorityDropDown", @class = "form-control WorkOrderFields" })
                                        </div>
                                    </div>
                                </div>


                                <div class="col-sm-6-o">
                                    <span class="col-md-2">Purchase Order:</span>
                                    <div class="col-md-3">
                                        <div class="form-group">
                                            @Html.TextBoxFor(m => m.WorkOrder.PurchaseOrder, new { @class = "form-control WorkOrderFields" })
                                        </div>
                                    </div>
                                </div>
                                @*<div class="col-md-12 customer-col2">
                                                                        <h4 class="customer-head">Standard Non-Serialized:</h4>
                                                                        @if (string.Compare(Model.WorkOrder.WorkorderCallstatus, "Closed", true) == 0
                                    || string.Compare(Model.WorkOrder.WorkorderCallstatus, "Invoiced", true) == 0)
                                                                        {
                                                                            @(Html.EJ().Grid<object>
                                    ("WorkOrderParts")
                                    .Datasource(ds => ds.Json((IEnumerable<object>)Model.WorkOrderParts))
                                    .AllowPaging()
                                    .Columns(col =>
                                    {
                                        col.Field("PartsIssueid").HeaderText("PartsIssue ID").IsPrimaryKey(true).Visible(false).Add();
                                        col.Field("Quantity").HeaderText("Qty").Add();
                                        col.Field("Sku").HeaderText("Part#/SKU").ForeignKeyField("Model").ForeignKeyValue("Model").DataSource(((IEnumerable<object>)Model.NonTaggedModels)).Add();
                                        //col.Field("Sku").HeaderText("Part#/SKU").ForeignKeyField("VendorDescription").ForeignKeyValue("VendorDescription").DataSource(((IEnumerable<object>)Model.CloserPartsOrSKUs)).Add();

                                        //col.Field("Manufacturer").HeaderText("Manufacturer").ForeignKeyField("VendorDescription").ForeignKeyValue("VendorDescription").DataSource(((IEnumerable<object>
                                        //    )Model.NonTaggedManufacturer)).Add();

                                        col.Field("Manufacturer").HeaderText("Manufacturer").Add();
                                        col.Field("Description").HeaderText("Description").Add();
                                    })
                                    .ClientSideEvents(eve =>
                                    {
                                        eve.ActionComplete("CompleteWorkOrderParts").BeginEdit("WorkorderPartsBeginEdit").ActionBegin("WorkorderPartsBegin").EndEdit("WorkorderPartsEndEdit").EndAdd("WorkorderPartsEndAdd").ToolbarClick("onToolbarClick");
                                    }))
                                                                        }
                                                                        else
                                                                        {
                                                                            @(Html.EJ().Grid<object>
                                    ("WorkOrderParts")
                                    .Datasource(ds => ds.Json((IEnumerable<object>)Model.WorkOrderParts).UpdateURL(Url.Action("WorkorderPartsUpdate", "Workorder")).InsertURL(Url.Action("WorkorderPartsInsert", "Workorder")).RemoveURL(Url.Action("WorkorderPartsDelete", "Workorder")).Adaptor(AdaptorType.RemoteSaveAdaptor))
                                    .EditSettings(edit =>
                                    {
                                        edit.AllowAdding().AllowDeleting().AllowEditing();
                                    })
                                    .AllowPaging()
                                    .ToolbarSettings(toolbar =>
                                    {
                                        toolbar.ShowToolbar().ToolbarItems(items =>
                                        {
                                            items.AddTool(ToolBarItems.Add);
                                            items.AddTool(ToolBarItems.Edit);
                                            items.AddTool(ToolBarItems.Delete);
                                            items.AddTool(ToolBarItems.Update);
                                            items.AddTool(ToolBarItems.Cancel);
                                        });
                                    })
                                    .Columns(col =>
                                    {
                                        col.Field("PartsIssueid").HeaderText("PartsIssue ID").IsPrimaryKey(true).Visible(false).Add();
                                        col.Field("Quantity").HeaderText("Qty").Add();
                                        col.Field("Sku").HeaderText("Part#/SKU").ForeignKeyField("Model").ForeignKeyValue("Model").DataSource(((IEnumerable<object>)Model.NonTaggedModels)).Add();
                                        //col.Field("Sku").HeaderText("Part#/SKU").ForeignKeyField("VendorDescription").ForeignKeyValue("VendorDescription").DataSource(((IEnumerable<object>)serializer.Deserialize<object>(jsonClosurePartsModel))).Add();

                                        //col.Field("Manufacturer").HeaderText("Manufacturer").ForeignKeyField("VendorDescription").ForeignKeyValue("VendorDescription").DataSource(((IEnumerable<object>
                                        //    )Model.NonTaggedManufacturer)).Add();
                                        col.Field("Manufacturer").HeaderText("Manufacturer").Add();
                                        col.Field("Description").HeaderText("Description").Add();
                                    })
                                    .ClientSideEvents(eve =>
                                    {
                                        eve.ActionComplete("CompleteWorkOrderParts").
                                        BeginEdit("WorkorderPartsBeginEdit").ActionBegin("WorkorderPartsBegin").
                                        EndEdit("WorkorderPartsEndEdit").EndAdd("WorkorderPartsEndAdd").
                                        ToolbarClick("onToolbarClick");
                                    }
                                    ))
                                                                        }
                                                                        <div class="clearfix"></div>
                                                                    </div>*@
                                <div class="col-md-12 customer-col2">
                                    <h4 class="customer-head">Standard Non-Serialized:</h4>

                                    <div id="WorkOrderParts"></div>

                                    @if (string.Compare(Model.WorkOrder.WorkorderCallstatus, "Closed", true) == 0
                                    || string.Compare(Model.WorkOrder.WorkorderCallstatus, "Invoiced", true) == 0)
                                    {






                                    }
                                    else
                                    {

                                        <script>
                                var newWorkorderGrid = $("#WorkOrderParts");

                                 //updateUrl: Url.Action("WorkorderPartsUpdate", "Workorder"),
                                //    insertUrl: Url.Action("WorkorderPartsInsert", "Workorder"),
                                //        removeUrl: Url.Action("WorkorderPartsDelete", "Workorder"),


                                var dataResults =  @Html.Raw(Json.Encode(Model.WorkOrderParts));

                                newWorkorderGrid.ejGrid({
                                    allowSelection: true,
                                    toolbarSettings: { showToolbar: true, toolbarItems: ["add", "edit", "delete", "update", "cancel"] },
                                    dataSource: dataResults,
                                    //dataSource: ej.DataManager({
                                    //    json: dataResults, updateUrl: "/Workorder/WorkorderPartsUpdate", insertUrl: "/Workorder/WorkorderPartsInsert", removeUrl: "/Workorder/WorkorderPartsDelete"
                                    //}),
                                    columns: [
                                        { field: "PartsIssueid", headerText: "PartsIssue ID", width: 80, visible: false, IsPrimaryKey: true, textAlign: ej.TextAlign.Center, allowEditing: false },
                                        { field: "Quantity", headerText: 'Quantity', width: 80, textAlign: ej.TextAlign.Left },
                                        {
                                            field: "Sku", headerText: 'Part#/SKU', width: 120, textAlign: ej.TextAlign.Left, width: 120, editTemplate:
                                            {
                                                create: () => { return "<input>"; },
                                                read: (args) => {
                                                    args.ejAutocomplete('suggestionList').css('display', 'none');
                                                    return args.ejAutocomplete("getValue");
                                                },
                                                destroy: () => { },
                                                write: (args) => {
                                                    var dataList = @Html.Raw(jsonClosurePartsModel);
                                                    var data = ej.DataManager(dataList).executeLocal(new ej.Query().select("VendorDescription"));
                                                    args.element.ejAutocomplete(
                                                        {
                                                            width: "100%",
                                                            dataSource: data,
                                                            enableDistinct: true,
                                                            value: args.rowdata !== undefined ? args.rowdata["VendorDescription"] : "",
                                                            select: function (argument) {
                                                                var item = argument.item;
                                                                var gridId = this._id.substring(0, this._id.length - 3);

                                                                $.ajax({
                                                                    url: '@Url.Action("GetCloserNonTaggedManufacturer", "Workorder")',
                                                                    type: 'GET',
                                                                    data: { "skuValue": item },
                                                                    success: function (jsonResult) {
                                                                        if (jsonResult.success == true) {
                                                                            $("#" + gridId + "Manufacturer").val(jsonResult.data[0].text);
                                                                        }
                                                                    }
                                                                });

                                                                $.ajax({
                                                                    url: '@Url.Action("GetCloserSkuDescription", "Workorder")',
                                                                    type: 'GET',
                                                                    data: { "skuValue": item },
                                                                    success: function (jsonResult) {
                                                                        //debugger;
                                                                        if (jsonResult.success == true) {
                                                                            $("#" + gridId + "Description").val(jsonResult.data);
                                                                        }
                                                                        else {
                                                                            AlertPopup("|There is a problem in getting Model description!");
                                                                        }
                                                                    }
                                                                });

                                                                var proxy = this;
                                                                if (proxy.inputSearch && proxy.inputSearch.val() != "") {
                                                                    var item = {}, alreadyAdded = false;
                                                                    item[proxy.model.fields.value] = args.selectedValue;
                                                                    item[proxy.model.fields.text] = args.selectedText;
                                                                    if (args.isChecked) {
                                                                        for (var i = 0; i < selectedItemsOnSearch.length; i++) {
                                                                            if (selectedItemsOnSearch[i].value == args.value) {
                                                                                alreadyAdded = true;
                                                                            }
                                                                        }
                                                                        if (!alreadyAdded) selectedItemsOnSearch.push(item);
                                                                    }
                                                                    else {
                                                                        for (var i = 0; i < selectedItemsOnSearch.length; i++) {
                                                                            if (selectedItemsOnSearch[i].value == args.value) {
                                                                                selectedItemsOnSearch.splice(i, 1);
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                else if (selectedItemsOnSearch.length > 0) {
                                                                    appendList(proxy, selectedItemsOnSearch);
                                                                    selectedItemsOnSearch = [];
                                                                }
                                                            }
                                                        });
                                                }

                                            }
                                        },
                                        { field: "Manufacturer", headerText: 'Manufacturer', width: 200, textAlign: ej.TextAlign.Left },
                                        { field: "Description", headerText: 'Description', width: 400, textAlign: ej.TextAlign.Left }
                                    ],
                                    //actionBegin: "WorkorderPartsBegin",
                                    actionComplete: "CompleteWorkOrderParts",
                                    //beginEdit: "WorkorderPartsBeginEdit",
                                    //endEdit: "WorkorderPartsEndEdit",
                                    //endAdd: "WorkorderPartsEndAdd",
                                    toolbarClick: "onWorkorderPartsToolbarClick"

                                });

                                                                                                    newWorkorderGrid.keyup(function (e) {
                                                                                                        if (e.keyCode == 40 && $(e.target).hasClass("e-autocomplete")) {
                                                                                                            var autocomp = $("#WorkOrderParts_VendorDescription").ejAutocomplete("instance")
                                                                                                            if (autocomp.getValue()!="" && autocomp.getActiveText() != "No suggestions")
                                                                                                                $(e.target).val(autocomp.getActiveText());
                                                                                                        }
                                                                                                    });

                                                                                                    if (workOrderStatus.localeCompare("Closed") != 0
                                                                                                        && workOrderStatus.localeCompare("Invoiced") != 0)
                                                                                                    {
                                                                                                        newWorkorderGrid.ejGrid({
                                                                                                            allowSelection: true,
                                                                                                            editSettings:{allowAdding:true,allowDeleting:true,allowEditing:true,allowSaving:true,allowCanceling:true},
                                                                                                        });
                                                                                                    }





                                        </script>


                                    }
                                    <div class="clearfix"></div>
                                </div>

                                <div class="col-md-12 customer-col2">
                                    <span class="col-md-5" style="padding-left:0px;">Other Items (Not on File):</span><br />
                                    <div class="form-group">
                                        @Html.TextAreaFor(m => m.WorkOrder.OtherParts, new { @class = "form-control WorkOrderFields", @rows = "7" })
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </section>
    }

    @*<section class="block">
            <div class="container-fluid">
                <h2 class="know-equipment-details-head arrow-down tabheader">Known Equipment</h2>
                <div class="know-equipment-details-content margin-top">
                    <div class="col-xs-12 customer sm-pad-reset">
                        <div class="row">
                            <div class="col-md-12">
                                <div class="table-responsive">
                                    <table id="KnownEquipments" class="display" cellspacing="0" width="100%"></table>
                                </div><!--end of .table-responsive-->
                            </div>

                        </div>
                    </div>
                </div>
            </div>
        </section>*@

    if (Model.WorkOrder.WorkorderID > 0 && (Model.WorkOrder.WorkorderCalltypeid == 1300))
    {
        <section class="block">
            <div class="container-fluid">
                <h2 class="erf-details-head arrow-down tabheader">ERF</h2>
                <div class="erf-details-content margin-top" style="display: block;">
                    <div class="col-md-12 customer-col2">
                        <div class="col-sm-6-o">
                            <span class="col-md-1">ERF #:</span>
                            <div class="col-md-2">
                                <div class="form-group">
                                    @if (!string.IsNullOrWhiteSpace(Model.WorkOrder.WorkorderErfid))
                                    {
                                        @Html.TextBoxFor(w => w.WorkOrder.WorkorderErfid, new { @class = "form-control WorkOrderFields", @readonly = "true" })
                                    }
                                    else
                                    {
                                        @Html.TextBoxFor(w => w.WorkOrder.WorkorderErfid, new { @class = "form-control WorkOrderFields" })
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-12 customer-col2">
                        <div class="col-xs-6-o">
                            <span class="col-sm-4 col-md-4 m-b-more">
                                Event Date:
                                @if (Model.Erf != null && Model.Erf.EntryDate.HasValue)
                                {
                                    <span>@Model.Erf.EntryDate.Value.Date.ToString("MM/dd/yyyy")</span>
                                }
                            </span>
                        </div>
                        <div class="col-xs-6-o">
                            <span class="col-sm-4 col-md-4 m-b-more">
                                Date ERF Rec:
                                @if (Model.Erf != null && Model.Erf.DateERFReceived.HasValue)
                                {
                                    <span>@Model.Erf.DateERFReceived.Value.Date.ToString("MM/dd/yyyy")</span>
                                }
                            </span>
                        </div>
                        <div class="col-xs-6-o">
                            <span class="col-sm-4 col-md-4 m-b-more">
                                Org. Request Date:
                                @if (Model.Erf != null && Model.Erf.OriginalRequestedDate.HasValue)
                                {
                                    <span>@Model.Erf.OriginalRequestedDate.Value.Date.ToString("MM/dd/yyyy")</span>
                                }
                            </span>
                        </div>

                        @if (Model.Erf != null && Model.Erf.OriginalRequestedDate.HasValue)
                        {
                            DateTime dt1 = DateTime.Now.Date;
                            DateTime dt2 = Model.Erf.OriginalRequestedDate == null ? DateTime.Now.Date : Convert.ToDateTime(Model.Erf.OriginalRequestedDate).Date;
                            if (dt1 > dt2 || (Model.ReasonCode != null && Model.ReasonCode != 0))
                            {
                                <div class="col-sm-6-o">
                                    <span class="col-sm-4 col-md-4 m-b-more">
                                        Reschedule Reason Code:<br />
                                        @Html.DropDownListFor(w => w.ReasonCode, new SelectList(Model.RescheduleReasonCodesList, "FBStatusID", "FBStatus", Model.ReasonCode), new { @class = "form-control WorkOrderFields reasonCodeDrp" })
                                    </span>
                                </div>
                            }
                        }

                    </div>
                </div>
            </div>
        </section>
    }



    @*<section class="block">
            <div class="container-fluid">
                <h2 class="notes-details-head arrow-down tabheader required1">Notes</h2>
                @Html.Partial("_ErfNotes", Model.Notes)
            </div>
        </section>*@


    //***** Billing Section*************
    //if (Model.Customer.ServiceTier == "5" && (!string.IsNullOrEmpty(Model.Customer.CustomerType) && Model.Customer.CustomerType.ToLower() != "ce")
    //    && (string.IsNullOrEmpty(Model.Customer.ParentNumber) || Model.Customer.ParentNumber == "0"))
    if (!string.IsNullOrEmpty(Model.Customer.BillingCode) && Model.Customer.BillingCode.ToLower() == "s08")
    {
        <section class="block">
            <div class="container-fluid">
                <h2 class="billing-head arrow-down tabheader">Billing Items</h2>
                <div class="billing-content margin-top" style="display:block !important;">
                    <div class="col-md-12">
                        @*Billable Items:*@
                        <div class="table-responsive">
                            @if (Model.WorkOrder.WorkorderID == 0)
                            {
                                @(Html.EJ().Grid<FarmerBrothers.Models.BillingModel>
("BillingDetails")
.Datasource(ds => ds.Json((IEnumerable<object>)Model.BillingDetails)
.UpdateURL(Url.Action("BillingDataUpdate", "DispatchResponse"))
.InsertURL(Url.Action("BillingDataInsert", "DispatchResponse"))
.RemoveURL(Url.Action("BillingDataDelete", "DispatchResponse"))
.Adaptor(AdaptorType.RemoteSaveAdaptor))
//.EditSettings(edit => { edit.AllowAdding().AllowDeleting().AllowEditing(); })
.AllowPaging()
.ToolbarSettings(toolbar =>
{
    //toolbar.ShowToolbar().ToolbarItems(items =>
    //{
    //    items.AddTool(ToolBarItems.Add);
    //    items.AddTool(ToolBarItems.Edit);
    //    items.AddTool(ToolBarItems.Delete);
    //    items.AddTool(ToolBarItems.Update);
    //    items.AddTool(ToolBarItems.Cancel);
    //});
})
.Columns(col =>
{
    col.Field("Id").HeaderText("Id").IsPrimaryKey(true).Visible(false).Add();
    col.Field("BillingType").HeaderText("Billable Type").ForeignKeyField("Category").ForeignKeyValue("Category").DataSource(((IEnumerable<object>)Model.BillingItems))
        .ValidationRules(r => r.AddRule("required", true)).Add();
    col.Field("BillingCode").HeaderText("Billable Code").AllowEditing(false).Add();
    //col.Field("Quantity").HeaderText("Qty").Type(ColumnType.Number).ValidationRules(r => r.AddRule("min", 1).AddRule("required", true).AddRule("number", true)).Add();
    col.Field("Duration").HeaderText("Duration").Type(ColumnType.Number).AllowEditing(false).Add();
    col.Field("Cost").HeaderTextAlign(TextAlign.Right).HeaderText("Cost").TextAlign(TextAlign.Right).AllowEditing(false).Format("{0:c2}").Add();
    col.Field("Total").HeaderTextAlign(TextAlign.Right).HeaderText("Total Cost").TextAlign(TextAlign.Right).AllowEditing(false).Format("{0:c2}").Add();

})
.ClientSideEvents(eve =>
{
    eve.ActionComplete("CompleteBillingModel")
        .BeginEdit("BillingDetailsBeginEdit")
        .ActionBegin("BillingDetailsBegin")
        .EndEdit("BillingDetailsEndEdit")
        .EndAdd("BillingDetailsEndAdd")
    //.QueryCellInfo("queryCellInfoBillable")
    //.DetailsExpand("DetailRowExpand")
    .ToolbarClick("onBillingToolbarClick");
}))
                            }

                            else
                            {
                                @(Html.EJ().Grid<FarmerBrothers.Models.BillingModel>
("BillingDetails")
.Datasource(ds => ds.Json((IEnumerable<object>)Model.BillingDetails)
.Adaptor(AdaptorType.RemoteSaveAdaptor))
.AllowPaging()
.Columns(col =>
{
    col.Field("Id").HeaderText("Id").IsPrimaryKey(true).Visible(false).Add();
    col.Field("BillingType").HeaderText("Billable Type").ForeignKeyField("Category").ForeignKeyValue("Category").DataSource(((IEnumerable<object>)Model.BillingItems))
        .ValidationRules(r => r.AddRule("required", true)).Add();
    col.Field("BillingCode").HeaderText("Billable Code").AllowEditing(false).Add();
    col.Field("Quantity").HeaderText("Qty").Type(ColumnType.Number).ValidationRules(r => r.AddRule("min", 1).AddRule("required", true).AddRule("number", true)).Add();
    col.Field("Cost").HeaderTextAlign(TextAlign.Right).HeaderText("Cost").TextAlign(TextAlign.Right).AllowEditing(false).Format("{0:c2}").Add();
    col.Field("Total").HeaderTextAlign(TextAlign.Right).HeaderText("Total Cost").TextAlign(TextAlign.Right).AllowEditing(false).Format("{0:c2}").Add();

})
.ClientSideEvents(eve =>
{
    eve.ActionComplete("CompleteBillingModel")
        .BeginEdit("BillingDetailsBeginEdit")
        .ActionBegin("BillingDetailsBegin")
        .EndEdit("BillingDetailsEndEdit")
        .EndAdd("BillingDetailsEndAdd")
    //.QueryCellInfo("queryCellInfoBillable")
    //.DetailsExpand("DetailRowExpand")
    .ToolbarClick("onBillingToolbarClick");
}))
                            }
                        </div>


                    </div>

                </div>
                <div class="col-md-2 customer-col1 sm-pad-reset margin-top"></div>
                <div class="col-md-4 customer-col1 sm-pad-reset margin-top">

                    @******Clover Iframe Block********@

                    <input name="cloverTransaction" id="cloverTransactionId" type="hidden" value="@Model.PaymentTransactionId" />

                    @******End of Clover Iframe Block********@


                    @*<div class="col-sm-6-o">
                            <span class="col-md-5">Name on Card:</span>
                            <div class="col-md-7">
                                <div class="form-group">
                                    <input type="text" id="cardNameTxt" />
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-6-o">
                            <span class="col-md-5 required">Card Number:</span>
                            <div class="col-md-7">
                                <div class="form-group">
                                    <input type="text" id="cardNoTxt" />
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-6-o">
                            <span class="col-md-5 required">Exp (MM/YYYY):</span>
                            <div class="col-md-7">
                                <div class="form-group">
                                    <input type="text" id="expDateTxt" />
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-6-o">
                            <span class="col-md-5 required">CVV:</span>
                            <div class="col-md-7">
                                <div class="form-group">
                                    <input type="text" id="cvvTxt" />
                                </div>
                            </div>
                        </div>*@
                </div>
                <div class="col-md-6 customer-col1 sm-pad-reset margin-top">
                    <div class="col-sm-6-o">
                        <span class="col-md-5"><h1>Total Cost:</h1></span>
                        <div class="col-md-7">
                            <div class="form-group">
                                @*<span class="col-md-7" style="color:#ff0000"><h3><b>$ @Model.BillingTotal</b></h3></span>*@
                                <span class="col-md-7" style="color:#ff0000"><h3><b>$ <label id="BillingTotalLbl"></label></b></h3></span>
                            </div>
                        </div>
                    </div>
                    <br />
                    @if (Model.WorkOrder.WorkorderID == 0)
                    {
                        <div class="col-sm-6-o">
                            <span class="col-md-8" style="text-align:center;">
                                <img id="cardProcessBtn" src="~/img/CardProcessingImg.png" style="width:50%;cursor:pointer;" />
                            </span>
                        </div>
                    }
                </div>



            </div>
        </section>
    }
    //***** End of Billing Section*************

    if (Model.WorkOrder.WorkorderID > 0)
    {
        if (Model.IsNewPartsOrder != true
        /*&& Model.WorkOrder.WorkorderCalltypeid != 1800
        && Model.WorkOrder.WorkorderCalltypeid != 1810
        //&& Model.WorkOrder.WorkorderCallstatus != "Hold for AB"
        && Model.WorkOrder.WorkorderCalltypeid != 1830
        && Model.WorkOrder.WorkorderCalltypeid != 1820*/
        && Model.WorkOrder.WorkorderCalltypeDesc != "Parts Request")
        {

            <style>
                .work-order-dispatch-content {
                    display: block !important;
                }
            </style>
            <section class="block margin-top">
                <div class="container-fluid">
                    <h2 class="work-order-dispatch-head arrow-down tabheader">Work Order Dispatch</h2>
                    <div class="work-order-dispatch-content margin-top" style="display:block !important;">
                        <div class=" row customer clear-input">

                            <div class="col-md-7 sm-pad-reset">
                                <div class="row">
                                    <div class="col-md-12">
                                        <div style="display:flow-root;">
                                            <span style="float:left">
                                                <h4 class="customer-head" style="width: 50%;">Branches</h4>
                                            </span>
                                            <span style="float:right;margin: 10px 0px 10px 0px;">@Html.CheckBoxFor(m => m.ShowAllTech) Show All</span>
                                        </div>
                                    </div>
                                    <div class="col-md-12 customer-col2">
                                        <script type="text/x-jsrender" id="checkBoxColumnTemplate">
                                            <input type="checkbox" class="branchCheckBox" data-branchid="{{:Id}}" />
                                        </script>
                                        <div style="overflow-x:scroll;overflow-y:scroll">
                                            <table id="DispatchBranches" class="display" cellspacing="0"></table>
                                        </div>

                                        <div class="clearfix"></div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-5 sm-pad-reset" style="clear:none;">
                                <div class="row">
                                    <div class="col-md-12 customer-col2">
                                        <h4 class="customer-head">Technician:</h4>
                                        <div class="col-md-6">
                                            <h5>Preferred Provider: @Model.Customer.PreferredProvider</h5>
                                        </div>
                                        <div class="col-md-6">
                                            <h5>Provider Phone:@Model.Customer.ProviderPhone</h5>
                                        </div>
                                        <script type="text/x-jsrender" id="assistCheckBoxTemplate">
                                            <input type="checkbox" class="assistCheckBox" disabled="disabled" data-branchid="{{:TechId}}" />
                                        </script>
                                        <script type="text/x-jsrender" id="responsibleRaidoButtonTemplate">
                                            <input type="radio" class="responsibleRaidoButton" onchange="responsibleRaidoButtonclick()" name="responsible" data-branchid="{{:TechId}}" />
                                        </script>
                                        <table id="Technicians" class="display" cellspacing="0" width="100%"></table>
                                        @if (Model.IsOnCallTechVisible == true)
                                        {
                                            <span style="float:left;margin-top:10px;">Technician On Call: </span>
                                            <span style="float:left;margin-top:10px;"> @Model.OnCallTech</span>
                                        }
                                        @{

                                            if (UserPrivilege["Work Order"] == "Edit-Only" || UserPrivilege["Work Order"] == "Full")
                                            {
                                                if (Model.IsOpen == false)
                                                {
                                                    <input type="button" value="Accept" id="AcceptButton" disabled="disabled" class="btn btn-orange" name="action:DispatchMail" style="float:right;margin-top:10px;" />
                                                    <input type="button" value="Transmit" id="TransmitButton" disabled="disabled" onclick="SetErfNotesSaveOperation(result.TransmitButton);" class="btn btn-orange" name="action:DispatchMail" style="float: right; margin-top: 10px; margin-right: 10px;" />
                                                    <input type="button" value="Email Closer" id="EmailCloserButton" disabled="disabled" class="btn btn-orange" name="action:DispatchMail" style="float: right; margin-top: 10px; margin-right: 30px;" />
                                                    <input type="button" id="TransmitEscalationButton" disabled="disabled" />
                                                }

                                            }


                                            if (!Model.Notes.isFromAutoGenerateWorkOrder)
                                            {
                                                if (UserPrivilege["Work Order"] == "Edit-Only" || UserPrivilege["Work Order"] == "Full" || UserPrivilege["ERF"] == "Edit-Only" || UserPrivilege["ERF"] == "Full" || UserPrivilege["Customer"] == "Full")
                                                {
                                                    if ((UserPrivilege["Customer"] == "Full" && UserPrivilege["Work Order"] == "Read-Only"))
                                                    {
                                                        <div class="col-md-12 customer-col2" style="float:left;margin-top:15px">
                                                            <div class="col-sm-6-o">
                                                                <div class="col-md-12" style="text-align: right; font-size: 18px;">
                                                                    @Html.CheckBoxFor(m => m.Notes.IsAutoDispatched, new { @class = "IsAutoDispatchedButton WorkOrderFields" }) Action by Dispatch
                                                                </div>
                                                                @*<div class="col-md-8">
                                                                        <a href="#" data-popup-open="popup" class="btn btn-primary btn-green addtonotes" style="float: right;" id="AddNotesButton">Add to Notes</a>
                                                                    </div>*@
                                                            </div>
                                                        </div>
                                                    }
                                                    else if ((UserPrivilege["Customer"] == "Full" && UserPrivilege["ERF"] == "Read-Only"))
                                                    {
                                                        <div class="col-md-12 customer-col2" style="float:left;margin-top:15px">
                                                            <div class="col-sm-6-o">
                                                                <div class="col-md-12" style="text-align: right; font-size: 18px;">
                                                                    @Html.CheckBoxFor(m => m.Notes.IsAutoDispatched, new { @class = "IsAutoDispatchedButton WorkOrderFields" }) Action by Dispatch
                                                                </div>
                                                                @*<div class="col-md-8">
                                                                        <a href="#" data-popup-open="popup" class="btn btn-primary btn-green addtonotes" style="float: right;" id="AddNotesButton">Add to Notes</a>
                                                                    </div>*@
                                                            </div>
                                                        </div>
                                                    }
                                                    else
                                                    {
                                                        <div class="col-md-12 customer-col2" style="float:left;margin-top:15px">
                                                            <div class="col-sm-6-o">
                                                                <div class="col-md-12" style="text-align: right; font-size: 18px;">
                                                                    @Html.CheckBoxFor(m => m.Notes.IsAutoDispatched, new { @class = "IsAutoDispatchedButton WorkOrderFields" }) Action by Dispatch
                                                                </div>
                                                                @*<div class="col-md-8">
                                                                        <a href="#" data-popup-open="popup" class="btn btn-primary btn-green addtonotes" style="float: right;" id="AddNotesButton">Add to Notes</a>
                                                                    </div>*@
                                                            </div>
                                                        </div>
                                                    }

                                                }
                                            }


                                        }

                                        <div class="clearfix"></div>
                                    </div>
                                </div>
                            </div>
                        </div>



                        <div class="row" style="margin-top: 11px;">
                            <div class="col-md-7">
                                <div class="col-md-1" style="padding:0px;">
                                    <div class="form-group">
                                        Estimate:@Html.TextBoxFor(w => w.Estimate, new { @class = "form-control" })
                                    </div>

                                </div>
                                <div class="col-md-2">
                                    <div class="form-group">
                                        Final Estimate:@Html.TextBoxFor(w => w.FinalEstimate, new { @class = "form-control" })
                                    </div>

                                </div>
                                <div class="col-md-3" style="padding: 0px; padding-left: 10px;">
                                    <div class="form-group">
                                        Estimate Approved By:<br />
                                        @Html.TextBoxFor(w => w.WorkOrder.EstimateApprovedBy, new { @class = "form-control EstimateApprovedByDropDownList" })
                                        @*@Html.CheckBoxFor(w => w.IsEstimateApproved)*@
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="form-group">
                                        Third Party PO:@Html.TextBoxFor(w => w.ThirdPartyPO, new { @class = "form-control", @style = "", @readonly = "readonly" })
                                    </div>
                                </div>
                                <div class="col-md-3" style="padding:0px;">
                                    <div class="form-group">
                                        <a style="padding: 6px 5px; margin-top: 18px;" id="GeneratePOButton" class="btn btn-primary enableonclose">Generate PO</a>
                                        <a style="padding: 6px 22px; margin-top: 18px;" id="ClearPOButton" class="btn btn-primary enableonclose">Clear</a>
                                    </div>
                                </div>


                            </div>
                        </div>

                        <div class="row" style="margin-top: 11px;">
                            <div class="col-md-7 customer-col1 sm-pad-reset">
                                <div class="col-md-3" style="padding:0px;">
                                    <div class="form-group">
                                        Escalation :<br />
                                        @Html.DropDownListFor(w => w.Closure.Email, new SelectList(Model.Closure.EmailList, "Description", "Description", Model.Closure.Email), new { @class = "form-control EscalationFields", @onchange = "EmailChange()" })

                                    </div>

                                </div>

                                <div class="col-md-5 customer-col1 sm-pad-reset">
                                    @*<a style="float: left; padding: 6px 5px; margin-top: 20px;" id="EmailDSMButton" onclick="SetErfNotesSaveOperation(result.DSMButton);" class="btn btn-primary" name="action:DispatchMail">Email to DSM</a>
                                        <input type="button" id="DSMhidenButton" disabled="disabled" />*@
                                    <a style="float: left; padding: 6px 5px; margin-top: 20px;" id="EmailESMButton" onclick="SetErfNotesSaveOperation(result.ESMButton);" class="btn btn-primary EscalationFields" name="action:DispatchMail">Email to ESM</a>
                                    <input type="button" id="ESMhidenButton" disabled="disabled" />

                                    <a style="float: left; padding: 6px 5px; margin-top: 20px;" id="EmailRSMButton" onclick="SetErfNotesSaveOperation(result.RSMButton);" class="btn btn-primary EscalationFields" name="action:DispatchMail">Email to RSM</a>
                                    <input type="button" id="RSMhidenButton" disabled="disabled" />
                                    <a style="float: left; padding: 6px 5px; margin-top: 20px;" id="EmailCCMButton" onclick="SetErfNotesSaveOperation(result.CCMButton);" class="btn btn-primary EscalationFields" name="action:DispatchMail">Email to CCM</a>
                                    <input type="button" id="CCMhidenButton" disabled="disabled" />

                                    <a style="float: left; padding: 6px 5px; margin-top: 20px;" id="EmailMikeButton" onclick="SetErfNotesSaveOperation(result.MikeButton);" class="btn btn-primary EscalationFields" name="action:DispatchMail">Email to Mike Fraser</a>
                                    <input type="button" id="MikehidenButton" disabled="disabled" />
                                    <a style="float: left; padding: 6px 5px; margin-top: 20px;" id="EmailDarrylButton" onclick="SetErfNotesSaveOperation(result.DarryButton);" class="btn btn-primary EscalationFields" name="action:DispatchMail">Email to Darryl McGee</a>
                                    <input type="button" id="DarryhidenButton" disabled="disabled" />
                                    @*<a style="float: left; padding: 6px 5px; margin-top: 20px;" id="EmailRSMButton" class="btn btn-primary" name="action:DispatchMail">Email to RSM</a>*@
                                    <div id="EscalationOtherEmail">
                                        Email Address:<br />
                                        <input type="text" style="float:left;padding:6px 5px;" id="EscalationOtherEmailtxt" />
                                        <a style="float:left;padding:6px 5px; margin-left:4px;" id="EscalationOtherEmailButton" onclick="SetErfNotesSaveOperation(result.OtherButton);" class="btn btn-primary EscalationFields" name="action:DispatchMail">Send Email</a>
                                        <input type="button" id="OtherhidenButton" disabled="disabled" />
                                    </div>


                                </div>

                            </div>
                            @*<<div class="col-md-4 customer-col1 sm-pad-reset">

                                </div>*@
                        </div>


                        <div class="row" style="margin-top: 11px;">
                            @*<div class="row" style="margin-top: 11px; margin-left:10px;">
                                    <h3>Service Quote:
                                    <button title="Refesh Service Quote" class="btn btn-primary" style="padding:2px 4px;" onclick="UpdateServiceQuote()"><i class="icon-refresh"></i></button>
                                    </h3>
                                </div>*@
                            <div class="col-md-5" style="width: 60%;">
                                <div class="col-md-2" style="padding:0px;">
                                    <div class="form-group">
                                        Distance:@Html.TextBoxFor(w => w.ServiceQuoteDetails.TravelDistance, new { @class = "form-control", @readonly = "readonly", @id = "quoteDistance" })
                                    </div>

                                </div>
                                <div class="col-md-3">
                                    <div class="form-group">
                                        Duration:@Html.TextBoxFor(w => w.ServiceQuoteDetails.TravelTime, new { @class = "form-control", @readonly = "readonly", @id = "quoteTravelTime" })
                                    </div>
                                </div>
                                <div class="col-md-2" style="padding: 0px; padding-left: 10px;">
                                    <div class="form-group">
                                        Labor:<br />

                                        @*@{var labor = string.Format("{0:c}", Model.ServiceQuoteDetails.Labor);}*@
                                        @Html.TextBoxFor(w => w.ServiceQuoteDetails.Labor, new { @class = "form-control", @readonly = "readonly", @id = "quoteLabor", Value = String.Format("$ {0:n2}", Model.ServiceQuoteDetails.Labor) })
                                    </div>
                                </div>
                                <div class="col-md-2" style="padding: 0px; padding-left: 10px;">
                                    <div class="form-group">
                                        Parts:<br />

                                        @*@{var parts = string.Format("{0:c}", Model.ServiceQuoteDetails.PartsTotal);}*@
                                        @Html.TextBoxFor(w => w.ServiceQuoteDetails.PartsTotal, new { @class = "form-control", @readonly = "readonly", @id = "quoteParts", Value = String.Format("$ {0:n2}", Model.ServiceQuoteDetails.PartsTotal) })
                                    </div>
                                </div>
                                <div class="col-md-2">
                                    <div class="form-group">
                                        @{var total = Convert.ToDecimal(Model.ServiceQuoteDetails.TotalServiceQuote) + Convert.ToDecimal(Model.ServiceQuoteDetails.PartsTotal);}
                                        Total Quote:@Html.TextBoxFor(w => total, new { @class = "form-control", @readonly = "readonly", @id = "quoteTotal", Value = String.Format("$ {0:n2}", total) })

                                    </div>
                                </div>

                                @*<div class="col-md-2">
                                        <div class="form-group">

                                        </div>
                                    </div>*@

                            </div>
                        </div>


                    </div>
                </div>
            </section>
        }

        if (Model.IsCustomerPartsOrder == false && Model.IsNewPartsOrder == false)
        {
            <style>
                .closure-content {
                    display: block !important;
                }
            </style>
            <section class="block margin-top">
                <div class="container-fluid">
                    <h2 class="closure-head arrow-down tabheader sectionDiv">Closure</h2>
                    <div class="closure-content margin-top" style="display:block !important;">
                        <div class="row customer">
                            <div class="col-md-4 customer-col1 sm-pad-reset">
                                <div class="col-sm-6-o">
                                    <span class="col-md-5">Work Order Type:</span>
                                    <div class="col-md-7">
                                        <div class="form-group">
                                            <span>
                                                @Model.WorkOrder.WorkorderCalltypeDesc
                                            </span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-4 customer-col1 sm-pad-reset">
                                <div class="col-sm-6-o">

                                    <span class="col-md-5">Special Closure:</span>
                                    <div class="col-md-7">
                                        <div class="form-group">
                                            @Html.DropDownListFor(w => w.Closure.SpecialClosure, new SelectList(Model.Closure.SpecialClosureList, "Description", "Description", Model.Closure.SpecialClosure), new { @class = "form-control WorkOrderFields", @onchange = "SpecialClosureChange()" })
                                        </div>
                                    </div>

                                </div>
                            </div>
                            @{

                                if (UserPrivilege["Work Order"] == "Edit-Only" || UserPrivilege["Work Order"] == "Full" || UserPrivilege["Customer"] == "Full")
                                {
                                    <div class="col-md-4 customer-col1 sm-pad-reset">
                                        <div class="col-sm-6-o">
                                            @*<span class="col-md-5"><button type="submit" class="btn btn-orange" onclick="SetSubmitOperation(8)" name="action:WorkorderSave">Create FEAST Movement</button></span>*@
                                            <div class="col-md-7">
                                                <div class="form-group">
                                                    <span class="col-md-5"><button type="submit" class="btn btn-primary" id="CloseWorkOrder" style="display:none" onclick="SetSubmitOperation(1)" name="action:WorkorderSave">Close Work Order</button></span>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }
                            }


                        </div>
                    </div>
                </div>
            </section>
        }
        else if (Model.IsCustomerPartsOrder == true && Model.IsNewPartsOrder == true
             /*|| (Model.WorkOrder.WorkorderCalltypeid == 1800
             || Model.WorkOrder.WorkorderCalltypeid == 1810
             || Model.WorkOrder.WorkorderCalltypeid == 1830)
             || Model.WorkOrder.WorkorderCalltypeid == 1820*/
             || Model.WorkOrder.WorkorderCalltypeDesc == "Parts Request")
        {
            <style>
                .closure-content {
                    display: block !important;
                }
            </style>

            <section class="block margin-top">
                <div class="container-fluid">
                    <h2 class="closure-head arrow-down tabheader sectionDiv">Closure</h2>
                    <div class="closure-content margin-top" style="display:block !important;">
                        <div class="row customer">
                            @*<div class="col-md-4 customer-col1 sm-pad-reset">
                                    <div class="col-sm-6-o">
                                        <span class="col-md-5">Work Order Type:</span>
                                        <div class="col-md-7">
                                            <div class="form-group">
                                                <span>
                                                    @Model.WorkOrder.WorkorderCalltypeDesc
                                                </span>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-sm-6-o">
                                        <span class="col-md-5">Create Service Work Order:</span>
                                        <div class="col-md-7">
                                            <div class="form-group">
                                                <button type="submit" class="btn btn-green" onclick="SetSubmitOperation(7)" name="action:WorkorderSave">Create Work Order</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>*@
                            <div class="col-md-4 customer-col1 sm-pad-reset">
                                @*<div class="col-sm-6-o">
                                        <span class="col-md-5">Notify Sales:</span>
                                        <div class="col-md-7">
                                            <div class="form-group">
                                                @if (string.Compare(Model.WorkOrder.WorkorderCallstatus, "Closed", true) == 0
                                                || string.Compare(Model.WorkOrder.WorkorderCallstatus, "Invoiced", true) == 0)
                                                {
                                                    <a class="btn btn-orange ">Notification</a>
                                                }
                                                else
                                                {
                                                    <a data-popup-open="popup-3" class="btn btn-orange ">Notification</a>
                                                }

                                            </div>
                                        </div>
                                    </div>*@
                                <div class="col-sm-6-o">
                                    <span class="col-md-5">Special Closure:</span>
                                    <div class="col-md-7">
                                        <div class="form-group">
                                            @Html.DropDownListFor(w => w.Closure.SpecialClosure, new SelectList(Model.Closure.SpecialClosureList, "Description", "Description", Model.Closure.SpecialClosure), new { @class = "form-control WorkOrderFields", @onchange = "SpecialClosureChange()" })
                                        </div>
                                    </div>
                                </div>
                            </div>
                            @if (UserPrivilege["Work Order"] == "Edit-Only" || UserPrivilege["Work Order"] == "Full" || UserPrivilege["Customer"] == "Full")
                            {
                                <div class="col-md-4 customer-col1 sm-pad-reset">
                                    <div class="col-sm-6-o">
                                        <span class="col-md-5">@*<button type="submit" class="btn btn-orange" id="CreateFeastMovement" onclick="SetSubmitOperation(8)" name="action:WorkorderSave">Create FEAST Movement</button>*@</span>
                                        <div class="col-md-7">
                                            <div class="form-group">
                                                <span class="col-md-5"><button type="submit" class="btn btn-primary" id="CloseWorkOrder" style="display:none" onclick="SetSubmitOperation(1)" name="action:WorkorderSave">Close Work Order</button></span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </section>
        }
        else if (string.Compare(Model.WorkOrder.WorkorderCallstatus, "Accepted", true) == 0
            || string.Compare(Model.WorkOrder.WorkorderCallstatus, "Accepted-Partial", true) == 0
            || string.Compare(Model.WorkOrder.WorkorderCallstatus, "On Site", true) == 0
            || string.Compare(Model.WorkOrder.WorkorderCallstatus, "In Progress", true) == 0
            || string.Compare(Model.WorkOrder.WorkorderCallstatus, "Completed", true) == 0
            || string.Compare(Model.WorkOrder.WorkorderCallstatus, "Closed", true) == 0
            || string.Compare(Model.WorkOrder.WorkorderCallstatus, "Invoiced", true) == 0)
        {

            if (string.Compare(Model.WorkOrder.WorkorderCallstatus, "Closed", true) == 0)
            {
                <style>
                    .billable-content {
                        display: block !important;
                    }
                </style>
                <section class="block">
                    <div class="container-fluid">
                        <h2 class="billable-head arrow-down tabheader">Billable</h2>
                        <div class="billable-content margin-top" style="display:block !important;">
                            <div class="col-md-12 customer-col2" style="padding-bottom: 1vw;">
                                <div class="col-sm-6-o">
                                    <div class="col-md-6">
                                        @*@Html.CheckBoxFor(m => m.IsBillable, new { @class = "WorkOrderFields" }) Is Billable*@
                                        Billable: @Html.CheckBoxFor(w => w.IsBillableFeed, new { @class = "WorkOrderFields IsBillableFeed" })
                                        @Html.Hidden("IsBillableFeed_" + DateTime.Now.ToString("ddMMyyyyHHmmss"), "{{:IsBillableFeed}}", new { @class = "IsBillableFeedHidden" })
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-12 customer-col2" style="padding-bottom: 1vw;">
                                @(Html.EJ().Grid<FarmerBrothers.Models.FbWorkorderBillableSKUModel>
("FBBillableDetails")
.Datasource(ds => ds.Json((IEnumerable<object>)Model.BillableSKUList)
.UpdateURL(Url.Action("BillableUpdate", "Workorder"))
.InsertURL(Url.Action("BillableInsert", "Workorder"))
.RemoveURL(Url.Action("BillableDelete", "Workorder"))
.Adaptor(AdaptorType.RemoteSaveAdaptor))
//.EditSettings(edit => { edit.AllowAdding().AllowDeleting().AllowEditing(); })
.AllowPaging()

.Columns(col =>
{
    col.Field("WorkOrderSKUId").HeaderText("SKU ID").IsPrimaryKey(true).Visible(false).Add();
    col.Field("SKU").HeaderText("SKU").ForeignKeyField("Model").ForeignKeyValue("Model").DataSource(((IEnumerable<object>)Model.SKUList))
        .ValidationRules(r => r.AddRule("required", true)).Add();
    col.Field("Description").HeaderText("Description").AllowEditing(false).Add();
    col.Field("Qty").HeaderText("Qty").Type(ColumnType.Number).ValidationRules(r => r.AddRule("min", 1).AddRule("required", true).AddRule("number", true)).Add();
    col.Field("UnitPrice").HeaderTextAlign(TextAlign.Right).HeaderText("Unit Price").TextAlign(TextAlign.Right).AllowEditing(false).ValidationRules(r => r.AddRule("number", true)).Add();
    col.Field("UnitPrice").HeaderTextAlign(TextAlign.Right).HeaderText("Total Line Amount").TextAlign(TextAlign.Right).AllowEditing(false).Format("{0:n2}").Add();

})
.ClientSideEvents(eve =>
{
    eve.ActionComplete("CompleteBillableModels")
        .BeginEdit("FBBillableDetailsBeginEdit")
        .ActionBegin("FBBillableDetailsBegin")
        .EndEdit("FBBillableDetailsEndEdit")
        .EndAdd("FBBillableDetailsEndAdd")
        .QueryCellInfo("queryCellInfoBillable")
        .DetailsExpand("DetailRowExpand")
        .ToolbarClick("onBillableToolbarClick");
}))
                            </div>

                        </div>
                    </div>
                </section>
            }
            else
            {
                <style>
                    .billable-content {
                        display: block !important;
                    }
                </style>
                <section class="block">
                    <div class="container-fluid">
                        <h2 class="billable-head arrow-down tabheader">Billable</h2>
                        <div class="billable-content margin-top" style="display:block !important;">
                            <div class="col-md-12 customer-col2" style="padding-bottom: 1vw;">
                                <div class="col-sm-6-o">
                                    <div class="col-md-6">
                                        @*@Html.CheckBoxFor(m => m.IsBillable) Is Billable*@
                                        Billable: @Html.CheckBoxFor(w => w.IsBillableFeed, new { @class = "WorkOrderFields IsBillableFeed" })
                                        @Html.Hidden("IsBillableFeed_" + DateTime.Now.ToString("ddMMyyyyHHmmss"), "{{:IsBillableFeed}}", new { @class = "IsBillableFeedHidden" })
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-12 customer-col2" style="padding-bottom: 1vw;">
                                @(Html.EJ().Grid<FarmerBrothers.Models.FbWorkorderBillableSKUModel>
("FBBillableDetails")
.Datasource(ds => ds.Json((IEnumerable<object>)Model.BillableSKUList)
.UpdateURL(Url.Action("BillableUpdate", "Workorder"))
.InsertURL(Url.Action("BillableInsert", "Workorder"))
.RemoveURL(Url.Action("BillableDelete", "Workorder"))
.Adaptor(AdaptorType.RemoteSaveAdaptor))
.EditSettings(edit => { edit.AllowAdding().AllowDeleting().AllowEditing(); })
.AllowPaging()
.ToolbarSettings(toolbar =>
{
    toolbar.ShowToolbar().ToolbarItems(items =>
    {
        items.AddTool(ToolBarItems.Add);
        items.AddTool(ToolBarItems.Edit);
        items.AddTool(ToolBarItems.Delete);
        items.AddTool(ToolBarItems.Update);
        items.AddTool(ToolBarItems.Cancel);
    });
})
.Columns(col =>
{
    col.Field("WorkOrderSKUId").HeaderText("SKU ID").IsPrimaryKey(true).Visible(false).Add();
    col.Field("SKU").HeaderText("SKU").ForeignKeyField("Model").ForeignKeyValue("Model").DataSource(((IEnumerable<object>)Model.SKUList))
        .ValidationRules(r => r.AddRule("required", true)).Add();
    col.Field("Description").HeaderText("Description").AllowEditing(false).Add();
    col.Field("Qty").HeaderText("Qty").Type(ColumnType.Number).ValidationRules(r => r.AddRule("min", 1).AddRule("required", true).AddRule("number", true)).Add();
    col.Field("UnitPrice").HeaderTextAlign(TextAlign.Right).HeaderText("Unit Price").TextAlign(TextAlign.Right).AllowEditing(false).ValidationRules(r => r.AddRule("number", true)).Add();
    col.Field("UnitPrice").HeaderTextAlign(TextAlign.Right).HeaderText("Total Line Amount").TextAlign(TextAlign.Right).AllowEditing(false).Format("{0:n2}").Add();

})
.ClientSideEvents(eve =>
{
    eve.ActionComplete("CompleteBillableModels")
        .BeginEdit("FBBillableDetailsBeginEdit")
        .ActionBegin("FBBillableDetailsBegin")
        .EndEdit("FBBillableDetailsEndEdit")
        .EndAdd("FBBillableDetailsEndAdd")
        .QueryCellInfo("queryCellInfoBillable")
        .DetailsExpand("DetailRowExpand")
        .ToolbarClick("onBillableToolbarClick");
}))
                            </div>

                        </div>
                    </div>
                </section>
            }

            <style>
                .closure-content {
                    display: block !important;
                }
            </style>
            <section class="block margin-top">
                <div class="container-fluid">
                    <h2 class="closure-head arrow-down tabheader">Closure</h2>
                    <div class="closure-content margin-top" style="display:block !important;">
                        <div class="row customer">

                            <div class="col-md-12 customer-col2">
                                <div class="col-md-3 customer-col1 sm-pad-reset">
                                    <div class="col-sm-6-o">
                                        <div class="form-group">
                                            @*<span class="col-md-3">State of Equipment:</span>*@
                                            <div class="col-md-8" style="margin-left:10px;">
                                                <div class="form-group">
                                                    <span class="required1">
                                                        State of Equipment upon arrival:
                                                    </span><br />
                                                    @Html.TextArea("stateofEquipment", Model.Closure.StateOfEquipment, new { @class = "form-control WorkOrderFields stateofEquipment NonSurveyPanel", @style = "width:300px;height:150px" })
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="col-sm-6-o">
                                        <div class="form-group">
                                            @*<span class="col-md-3">Service Delayed (explain):</span>*@
                                            <div class="col-md-8" style="margin-left:10px;">
                                                <div class="form-group">
                                                    <span class="required1">
                                                        Was Service Delayed (explain):
                                                    </span><br />
                                                    @Html.TextArea("serviceDelayed", Model.Closure.serviceDelayed, new { @class = "form-control WorkOrderFields serviceDelayed NonSurveyPanel", @style = "width:300px;height:150px" })
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div class="col-md-3 customer-col1 sm-pad-reset">
                                    <div class="col-sm-6-o">
                                        <div class="form-group">
                                            @*<span class="col-md-3">Steps to Troubleshoot and Resolve:</span>*@
                                            <div class="col-md-8" style="margin-left:10px;">
                                                <div class="form-group">
                                                    <span class="required1">
                                                        Steps to Troubleshoot and Resolve:
                                                    </span><br />
                                                    @Html.TextArea("troubleshootSteps", Model.Closure.troubleshootSteps, new { @class = "form-control WorkOrderFields troubleshootSteps NonSurveyPanel", @style = "width:300px;height:150px" })
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="col-sm-6-o">
                                        <div class="form-group">
                                            @*<span class="col-md-3">Is Under Warranty:</span>*@
                                            <div class="col-md-4" style="margin-left:10px;">
                                                <div class="form-group">
                                                    <span class="required1">
                                                        Is Under Warranty:
                                                    </span><br />
                                                    @Html.DropDownListFor(w => w.Closure.IsUnderWarrenty, new SelectList(Model.Closure.WarrentyList, Model.Closure.IsUnderWarrenty), new
                                                    {
                                                        @class = "form-control SearchPanelControl",
                                                        @Id = "WarrentyDropDownList",
                                                        onchange = "WarrentyRequiredDropdownChange()"
})
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-sm-6-o">
                                        <div class="form-group">
                                            @*<span class="col-md-3">Warranty For:</span>*@
                                            <div class="col-md-4" style="margin-left:10px;">
                                                <div class="form-group" id="WarrentyForSection">
                                                    <span class="required1">
                                                        Warranty For:
                                                    </span><br />
                                                    @Html.DropDownListFor(w => w.Closure.WarrentyFor, new SelectList(Model.Closure.WarrentyForList, Model.Closure.WarrentyFor), new
                                                    {
                                                        @class = "form-control SearchPanelControl",
                                                        @Id = "WarrentyForDropDownList"@*, onchange = "TechTypeChange(this)"*@
})
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="col-sm-6-o">
                                        <div class="form-group">
                                            @*<span class="col-md-3">Steps to Troubleshoot and Resolve:</span>*@
                                            <div class="col-md-8" style="margin-left:10px;">
                                                <div class="form-group">
                                                    <span class="required1">Full name of person you review the work with:</span><br />
                                                    @Html.TextBoxFor(c => c.Closure.ReviewedBy, new { @class = "form-control SearchPanelControl", @id = "ReviewedBy" })
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>


                                <div class="col-md-3 customer-col1 sm-pad-reset">
                                    <div class="col-sm-6-o">
                                        <div class="form-group">
                                            <div class="col-md-8" style="margin-left:10px;">
                                                <div class="form-group">
                                                    <span class="required1">
                                                        Is Additional Followup Needed:
                                                    </span><br />
                                                    @Html.DropDownListFor(w => w.Closure.AdditionalFollowup, new SelectList(Model.Closure.AdditionalFollowupList, Model.Closure.AdditionalFollowup), new
                                                    {
                                                        @class = "form-control SearchPanelControl",
                                                        @Id = "AdditionalFollowupDropDownList",
                                                        onchange = "FollowupRequiredChange()"
})
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="col-sm-6-o">
                                        <div class="form-group">
                                            <div class="col-md-8" style="margin-left:10px;">
                                                <div class="form-group" id="FollowupCommentsSection">
                                                    <span class="required1"> Additional Followup Comments:</span><br />
                                                    @Html.TextArea("FollowupComments", Model.Closure.followupComments, new { @class = "form-control WorkOrderFields followupComments NonSurveyPanel", @style = "width:300px;height:150px" })
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div class="col-md-3 customer-col1 sm-pad-reset">
                                    <div class="col-sm-6-o">
                                        <div class="form-group">
                                            <div class="col-md-8" style="margin-left:10px;">
                                                <div class="form-group">
                                                    <span class="required1">
                                                        Is Operational:
                                                    </span><br />
                                                    @Html.DropDownListFor(w => w.Closure.Operational, new SelectList(Model.Closure.OperationalList, Model.Closure.Operational), new
                                                    {
                                                        @class = "form-control SearchPanelControl",
                                                        @Id = "OperationalDropDownList"@*, onchange = "TechTypeChange(this)"*@
})
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    @*<div class="col-sm-6-o">
                                            <div class="form-group">
                                                <div class="col-md-8" style="margin-left:10px;">
                                                    <div class="form-group">
                                                        Operational Comments:<br />
                                                        @Html.TextArea("OperationalComments", Model.Closure.operationalComments, new { @class = "form-control WorkOrderFields operationalComments NonSurveyPanel", @style = "width:300px;height:150px" })
                                                    </div>
                                                </div>
                                            </div>
                                        </div>*@
                                </div>


                            </div>

                            <div class="col-md-12 customer-col2">
                                <h4 class="customer-head">Call Details</h4>
                            </div>
                            <div class="col-md-12 customer-col2">
                                <div class="col-md-3 customer-col1 sm-pad-reset">
                                    <div class="col-sm-6-o">
                                        <div class="form-group">
                                            <span class="required1">Start Date/Time:</span><br />
                                            @Html.TextBoxFor(w => w.Closure.StartDateTime, new
                                       {
                                           @class = "form-control WorkOrderFields",
                                           @Id = "StartDateTime"@*, @readOnly = Model.IsCCProcessComplete*@})
                                        </div>
                                    </div>
                                    <div class="col-sm-6-o">
                                        <div class="form-group" style="height: 55px;">
                                            <span class="required1"> Invoice:</span> <br />
                                            @*@Html.TextBoxFor(w => w.Closure.InvoiceNo, new { @class = "form-control WorkOrderFields" })
                                                @Html.ValidationMessageFor(m => m.Closure.InvoiceNo, "", new { @class = "text-danger" })*@


                                            <div class="col-md-5" style="padding:0px;">
                                                @Html.TextBoxFor(w => w.Closure.InvoiceNo, new { @class = "form-control WorkOrderFields" })
                                                @Html.ValidationMessageFor(m => m.Closure.InvoiceNo, "", new { @class = "text-danger" })
                                            </div>

                                            <div class="col-md-6"><button class="btn btn-primary" id="InvoiceGenerateBtn">AutoGen Invoice</button></div>
                                            <div class="clear"></div>


                                        </div>
                                    </div>
                                    <div class="col-sm-6-o">
                                        <div class="form-group">
                                            Technician Name:<br />
                                            @Html.TextBoxFor(w => w.Closure.ResponsibleTechName, new { @class = "form-control WorkOrderFields", @Id = "ResponsibleTechName" })
                                            @Html.ValidationMessageFor(m => m.Closure.ResponsibleTechName, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="col-sm-6-o">
                                        <div class="form-group">
                                            <br />
                                            <div class="col-md-5" style="padding:0px;">
                                                Water Tested: @Html.CheckBoxFor(w => w.Closure.WaterTested, new { @class = "WorkOrderFields WaterTested" })
                                                @Html.Hidden("WaterTested_" + DateTime.Now.ToString("ddMMyyyyHHmmss"), "{{:WaterTested}}", new { @class = "WaterTestedHidden" })
                                            </div>

                                            @*</div>

                                                <div class="col-sm-3-o">*@
                                            <div class="col-md-5" style="padding:0px;">
                                                @*<br />*@
                                                Filter Replaced: @Html.CheckBoxFor(w => w.Closure.FilterReplaced, new { @class = "WorkOrderFields FilterReplaced" })
                                                @Html.Hidden("FilterReplaced_" + DateTime.Now.ToString("ddMMyyyyHHmmss"), "{{:FilterReplaced}}", new { @class = "FilterReplacedHidden" })
                                            </div>
                                            <div class="clear"></div>
                                        </div>
                                    </div>

                                </div>
                                <div class="col-md-3 customer-col1 sm-pad-reset">
                                    <div class="col-sm-6-o">
                                        <div class="form-group">
                                            <span class="required1"> Arrival Date/Time:</span><br />
                                            @Html.TextBoxFor(w => w.Closure.ArrivalDateTime, new
                                       {
                                           @class = "form-control WorkOrderFields",
                                           @Id = "ArrivalDateTime"@*, @readOnly = Model.IsCCProcessComplete*@})
                                        </div>
                                    </div>
                                    <div class="col-sm-6-o">
                                        <div class="form-group" style="height:54px;">
                                            @*Travel Time:<br />
                                                <div class="col-md-5" style="padding:0px;"><span style="float:left;margin-top:6px;">Hrs.</span>@Html.TextBoxFor(w => w.Closure.TravelHours, new { @class = "form-control WorkOrderFields", @style = "width:80px;float:left;", @Id = "TravelTimeHours" })</div>

                                                <div class="col-md-6"><span style="float:left;margin-top:6px;">Mins.</span>@Html.DropDownListFor(w => w.Closure.TravelMinutes, new SelectList(Model.Closure.MinutesList, "Description", "Description", Model.Closure.TravelMinutes), new { @style = "width:80px;float:left;", @Id = "TravelMinutes", @class = "form-control WorkOrderFields" })</div>*@

                                            Travel Distance: <br />
                                            <div class="col-md-5" style="padding:0px;"><span style="float:left;margin-top:6px;">Miles : </span>@Html.TextBoxFor(w => w.Distance, new { @class = "form-control WorkOrderFields", @style = "width:80px;float:left;", @Id = "TravelDistance" })</div>


                                            <div class="clear"></div>
                                        </div>
                                    </div>
                                    <div class="col-sm-6-o">
                                        <div class="form-group">
                                            Customer Name:<br />
                                            @Html.TextBoxFor(w => w.Closure.CustomerName, new { @class = "form-control WorkOrderFields" })
                                            @Html.ValidationMessageFor(m => m.Closure.CustomerName, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="col-sm-6-o">
                                        <div class="form-group">
                                            Hardness Rating:<br />
                                            @Html.DropDownListFor(w => w.Closure.HardnessRating, new SelectList(Model.Closure.HardnessRatingList, null, null, Model.Closure.HardnessRating), new { @class = "form-control WorkOrderFields" })
                                        </div>
                                    </div>

                                </div>

                                <div class="col-md-3 customer-col1 sm-pad-reset">

                                    <div class="col-sm-6-o">
                                        <div class="form-group">
                                            <span class="required1">Completion Date/Time:</span><br />
                                            @Html.TextBoxFor(w => w.Closure.CompletionDateTime, new
                                       {
                                           @class = "form-control WorkOrderFields",
                                           @Id = "CompletionDateTime"@*, @readOnly = Model.IsCCProcessComplete*@})
                                        </div>
                                    </div>
                                    <div class="col-sm-6-o">
                                        <div class="form-group">
                                            Mileage to Customer:<br />
                                            @Html.TextBoxFor(w => w.Closure.Mileage, new { @class = "form-control WorkOrderFields" })
                                        </div>
                                    </div>
                                    <div class="col-sm-6-o">
                                        <div class="form-group">
                                            Customer Email:<br />
                                            @Html.TextBoxFor(w => w.Closure.CustomerEmail, new { @class = "form-control WorkOrderFields" })
                                            @Html.ValidationMessageFor(m => m.Closure.CustomerEmail, "", new { @class = "text-danger" })
                                        </div>
                                    </div>


                                    <div class="col-sm-6-o">
                                        <div class="form-group">
                                            TDS:<br />
                                            @Html.TextBoxFor(w => w.Closure.TDS, new { @class = "form-control WorkOrderFields" })
                                            @Html.ValidationMessageFor(m => m.Closure.TDS, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                </div>
                                <div class="col-md-3 customer-col1 sm-pad-reset" style="background: #b5b4b440;  width: auto;">
                                    <div class="col-sm-6-o">
                                        <br />
                                        <span class="required1">Signature By: </span><br />
                                        <div class="form-group">
                                            @Html.TextBoxFor(w => w.Closure.CustomerSignedBy, new { @class = "form-control WorkOrderFields" })
                                        </div>
                                        <br />
                                        @*<div class="col-md-5">*@
                                        <span class="required1">Customer Signature:</span>
                                        @*</div>
                                            <div class="col-md-7">*@
                                        <div class="form-group">
                                            <img id="CustomerSignatureImage" height="100" width="250" onerror='ImageNotFound()' alt="Customer Signature" src=@Html.DisplayFor(w => w.Closure.CustomerSignatureDetails) />
                                        </div>
                                        <div class="form-group">
                                            @Html.EJ().Signature("CustomerSignatureArea").Height("100px").Width("250px").StrokeWidth(3).IsResponsive(true)
                                        </div>

                                        <button class="btn btn-primary" onclick="onclear()">Clear</button><br />
                                    </div>
                                    @*</div>*@
                                </div>
                                <div class="col-md-3 customer-col1 sm-pad-reset" style="background: #b5b4b440;  width: auto;">
                                    <div class="col-sm-6-o">
                                        @*<div class="col-md-5">*@
                                        <br />
                                        Technician Signature:
                                        @*</div>
                                            <div class="col-md-7">*@
                                        <div class="form-group">
                                            <img id="TechnicianSignatureImage" height="100" width="250" onerror='TechSignatureImageNotFound()' alt="Technician Signature" src=@Html.DisplayFor(w => w.Closure.TechnicianSignatureDetails) />
                                        </div>
                                        <div class="form-group">
                                            @Html.EJ().Signature("TechnicianSignatureArea").Height("100px").Width("250px").StrokeWidth(3).IsResponsive(true)
                                        </div>

                                        <button class="btn btn-primary" onclick="onTechSignatureclear()">Clear</button><br />
                                    </div>
                                    @*</div>*@
                                </div>

                            </div>


                            <div class="col-md-12 customer-col2">
                                <div style="float: left; padding-top: 2em;"><h4 class="customer-head required">Asset Details</h4></div>
                                <div class="col-md-6 customer-col1 sm-pad-reset" style="float: right;">
                                    <div class="col-md-2" style="padding: 0px; padding-left: 10px; padding-top: 2em;">
                                        <label>Service Quote with Parts</label>
                                    </div>
                                    <div class="col-md-3" style="padding: 0px; padding-left: 10px;">
                                        <div class="form-group">
                                            Parts:<br />
                                            @Html.TextBoxFor(w => Model.ServiceQuoteDetails.PartsTotal, new { @class = "form-control", @readonly = "readonly", @id = "newPartsQuote", Value = String.Format("$ {0:n2}", Model.ServiceQuoteDetails.PartsTotal) })
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="form-group">
                                            @{var prevtotal = Convert.ToDecimal(Model.ServiceQuoteDetails.TotalServiceQuote);}
                                            Previous Quote:@Html.TextBoxFor(w => prevtotal, new { @class = "form-control", @readonly = "readonly", @id = "previousQuote", Value = String.Format("$ {0:n2}", Model.ServiceQuoteDetails.TotalServiceQuote) })
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="form-group">
                                            @{var finaltotal = Convert.ToDecimal(Model.ServiceQuoteDetails.TotalServiceQuote) + Convert.ToDecimal(Model.ServiceQuoteDetails.PartsTotal);}
                                            Total Quote:@Html.TextBoxFor(w => finaltotal, new { @class = "form-control", @readonly = "readonly", @id = "newTotalQuote", Value = String.Format("$ {0:n2}", finaltotal) })
                                        </div>
                                    </div>

                                </div>

                            </div>
                            @*<div class="col-md-12 customer-col2">
                                    <div class="col-md-6">
                                        <h4 class="customer-head required">Asset Details</h4>
                                    </div>

                                </div>*@
                            <div class="col-md-12" style="position:inherit;">
                                <div class="table-responsive">
                                    @if (string.Compare(Model.WorkOrder.WorkorderCallstatus, "Closed", true) == 0
|| string.Compare(Model.WorkOrder.WorkorderCallstatus, "Invoiced", true) == 0)
                                    {
                                        @(Html.EJ().Grid<FarmerBrothers.Models.WorkOrderManagementEquipmentModel>
("ClosureAssets")
.Datasource(ds => ds.Json((IEnumerable<object>)Model.WorkOrderEquipments).UpdateURL(Url.Action("ClosureEquipmentsUpdate", "Workorder")).InsertURL(Url.Action("ClosureEquipmentsInsert", "Workorder")).RemoveURL(Url.Action("ClosureEquipmentsDelete", "Workorder")).Adaptor(AdaptorType.RemoteSaveAdaptor))
.EditSettings(edit => { edit.AllowAdding(false).AllowDeleting(false).AllowEditing(false); })
// .AllowPaging()
.AllowKeyboardNavigation(false)
.ToolbarSettings(toolbar =>
{
    toolbar.ShowToolbar().ToolbarItems(items =>
    {
        items.AddTool(ToolBarItems.Add);
        items.AddTool(ToolBarItems.Edit);
        items.AddTool(ToolBarItems.Delete);
        items.AddTool(ToolBarItems.Update);
        items.AddTool(ToolBarItems.Cancel);
    });
})
.ClientSideEvents(e => e.DetailsExpand("DetailRowExpand").ToolbarClick("onToolbarClick"))
.Columns(col =>
{
    //col.Field("SequenceNumber").HeaderText("Asset").IsIdentity(true).Width(50).Add();
    col.Field("AssetId").HeaderText("Asset").IsPrimaryKey(true).Visible(false).Add();
    col.Field("FeastMovementId").Visible(false).Add();
    col.Field("CallTypeID").HeaderText("Service Code").ForeignKeyField("CallTypeID").ForeignKeyValue("Description").DataSource(((IEnumerable<object>
        )Model.ClosureCallTypes)).DefaultValue("").Add();
    col.Field("Solution").HeaderText("Completion Code").ForeignKeyField("SolutionId").ForeignKeyValue("Description").DataSource(((IEnumerable<object>
       )Model.Solutions)).DefaultValue("").Add();
    col.Field("Category").HeaderText("Equipment Type").ForeignKeyField("Category").ForeignKeyValue("Category").DataSource(((IEnumerable<object>
        )Model.TaggedCategories)).DefaultValue("").Add();
    col.Field("Manufacturer").HeaderText("Manufacturer").ForeignKeyField("VendorDescription").ForeignKeyValue("VendorDescription").DataSource(((IEnumerable<object>
        )Model.TaggedManufacturer)).DefaultValue("").Add();
    //col.Field("Model").HeaderText("Model").ForeignKeyField("Model").ForeignKeyValue("Model").DataSource(((IEnumerable<object>
    //    )Model.TaggedModels)).DefaultValue("").Add();
    col.Field("Model").HeaderText("Model").Type(ColumnType.String).Add();
    col.Field("Location").HeaderText("Location").Width(0).Type(ColumnType.String).Add();
    col.Field("SerialNumber").HeaderText("Serial Number").Type(ColumnType.String).Add();

    col.Field("IsSlNumberImageExist").HeaderText("IsSlNumberImageExist").Visible(false).Add();
    //col.Field("AssetImage").HeaderText("Asset Image").AllowEditing(false).TextAlign(TextAlign.Center).Template("#assetImageTemplate").Add();
})
.DetailsTemplate("#tabGridContents")
.ClientSideEvents(e => e.DetailsDataBound("detailGridData"))
.ClientSideEvents(eve => { eve.ActionComplete("ClosureAssetsComplete").BeginEdit("ClosureAssetsBeginEdit").DataBound("ClosureAssetsDataBound").ActionBegin("ClosureAssetsBegin").EndEdit("ClosureAssetsEndEdit").EndAdd("ClosureAssetsEndAdd"); })
.CssClass("")
                                                                                                )
                                    }
                                    else
                                    {
                                        @(Html.EJ().Grid<FarmerBrothers.Models.WorkOrderManagementEquipmentModel>
("ClosureAssets")
.Datasource(ds => ds.Json((IEnumerable<object>)Model.WorkOrderEquipments).UpdateURL(Url.Action("ClosureEquipmentsUpdate", "Workorder")).InsertURL(Url.Action("ClosureEquipmentsInsert", "Workorder")).RemoveURL(Url.Action("ClosureEquipmentsDelete", "Workorder")).Adaptor(AdaptorType.RemoteSaveAdaptor))
.EditSettings(edit => { edit.AllowAdding().AllowDeleting().AllowEditing().AllowEditOnDblClick(false); })
//.AllowPaging()
.AllowKeyboardNavigation(false)
.AllowTextWrap()
.TextWrapSettings(wrap => { wrap.WrapMode(WrapMode.Both); })
.ToolbarSettings(toolbar =>
{
    toolbar.ShowToolbar().ToolbarItems(items =>
    {
        items.AddTool(ToolBarItems.Add);
        items.AddTool(ToolBarItems.Edit);
        items.AddTool(ToolBarItems.Delete);
        items.AddTool(ToolBarItems.Update);
        items.AddTool(ToolBarItems.Cancel);
    });
})
.ClientSideEvents(e => e.DetailsExpand("DetailRowExpand").ToolbarClick("onToolbarClick"))
.Columns(col =>
{
    //col.Field("SequenceNumber").HeaderText("Asset").IsIdentity(true).Width(50).Add();
    col.Field("AssetId").HeaderText("Asset").IsPrimaryKey(true).Visible(false).Add();
    col.Field("FeastMovementId").Visible(false).Add();
    col.Field("CallTypeID").HeaderText("Service Code").ForeignKeyField("CallTypeID").ForeignKeyValue("Description").DataSource(((IEnumerable<object>
        )Model.ClosureCallTypes)).DefaultValue("").Add();
    col.Field("Solution").HeaderText("Completion Code").ForeignKeyField("SolutionId").ForeignKeyValue("Description").DataSource(((IEnumerable<object>
       )Model.Solutions)).DefaultValue("").Add();
    col.Field("Category").HeaderText("Equipment Type").ForeignKeyField("Category").ForeignKeyValue("Category").DataSource(((IEnumerable<object>
        )Model.TaggedCategories)).DefaultValue("").Add();
    col.Field("Manufacturer").HeaderText("Manufacturer").ForeignKeyField("VendorDescription").ForeignKeyValue("VendorDescription").DataSource(((IEnumerable<object>
        )Model.TaggedManufacturer)).DefaultValue("").Add();
    //col.Field("Model").HeaderText("Model").ForeignKeyField("Model").ForeignKeyValue("Model").DataSource(((IEnumerable<object>
    //    )Model.TaggedModels)).DefaultValue("").Add();
    col.Field("Model").HeaderText("Model").Type(ColumnType.String).Add();
    col.Field("Location").HeaderText("Location").Width(0).Add();
    //col.Field("SerialNumber").HeaderText("Serial Number").Type(ColumnType.String).Add();
    //col.Field("SerialNumber").HeaderText("Serial Number").EditType(EditingType.Dropdown).Add();
    col.Field("SerialNumber").HeaderText("Serial Number").ForeignKeyField("SerialNumber").ForeignKeyValue("SerialNumber").DataSource(((IEnumerable<object>
       )Model.SerialNumberList)).DefaultValue("").Add();
    col.Field("SerialNumberManual").HeaderText("Serial Number (Manual Entry, if 'Other' option is selected)").Type(ColumnType.String).Add();

    col.Field("IsSlNumberImageExist").HeaderText("IsSlNumberImageExist").Visible(false).Add();
    //col.Field("AssetImage").HeaderText("Asset Image").AllowEditing(false).TextAlign(TextAlign.Center).Template("#assetImageTemplate").Add();
})
.DetailsTemplate("#tabGridContents")
.ClientSideEvents(e => e.DetailsDataBound("detailGridData"))
.ClientSideEvents(eve => { eve.ActionComplete("ClosureAssetsComplete").BeginEdit("ClosureAssetsBeginEdit").DataBound("ClosureAssetsDataBound").ActionBegin("ClosureAssetsBegin").EndEdit("ClosureAssetsEndEdit").EndAdd("ClosureAssetsEndAdd"); })
.CssClass("")
                                                                                                )
                                    }
                                </div>
                            </div>
                            @{

                                if (UserPrivilege["Work Order"] == "Edit-Only" || UserPrivilege["Work Order"] == "Full")
                                {
                                    <div class="col-md-12 customer-col2" style="justify-content: flex-end; display: flex;">
                                        <span style="margin: 1em 2em 0 0; font-size: 1.5em; ">
                                            Service Billable: @Html.CheckBoxFor(w => w.IsBillableFeed, new { @class = "WorkOrderFields IsServiceBillableFeed" })
                                            @Html.Hidden("IsServiceBillableFeed_" + DateTime.Now.ToString("ddMMyyyyHHmmss"), "{{:IsServiceBillableFeed}}", new { @class = "IsServiceBillableFeedHidden" })
                                        </span>
                                        @if (Model.IsOpen == false)
                                        {
                                            @*<button onclick="OnCCProcessClick()" style="float:right;margin-top:10px;" class="btn btn-primary">CC Process</button>*@
                                            <button id="completeEventBtn" type="submit" style="margin-top:10px;" class="btn btn-primary" onclick="SetSubmitOperation(6)" name="action:WorkorderSave">Complete Work Order</button>
                                        }

                                    </div>
                                }
                            }

                        </div>
                    </div>
                </div>
            </section>
        }
    }

    <section class="block">
        <div class="container-fluid">
            <h2 class="notes-details-head arrow-down tabheader required1">Notes</h2>
            @Html.Partial("_ErfNotes", Model.Notes)
        </div>
    </section>

    //if (Model.WorkOrder.WorkorderID > 0)
    //{
    <section class="block">
        <div class="container-fluid">
            <h2 class="notes-details-head arrow-down tabheader required1">Documents</h2>
            @Html.Partial("_DocumentUpload", Model.Documents)
        </div>
    </section>
    //}
    <script id="tabGridContents" type="text/x-jsrender">
        <div id="SurveyPanel" class="SurveyPanel">
            <div class="col-md-12">
                <div class="col-md-6">
                    <span class="col-md-6">Wall Plug NEMW Number:</span>
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.DropDownList("NemwNumberDropDown_" + DateTime.Now.ToString("ddMMyyyyHHmmss"), new SelectList(Model.NmeaNumbers, "NemaNumberID", "NemaNumberDescription", "{{:NemwNumber}}"), new { @class = "form-control WorkOrderFields NemwNumberDropDown_{{:NemwNumber}} NemwNumber SurveyPanel" })
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <span class="col-md-6">Electrical Phase:</span>
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.DropDownList("ElectricalPhaseDropDown_" + DateTime.Now.ToString("ddMMyyyyHHmmss"), new SelectList(Model.ElectricalPhases, "ElectricalPhaseID", "ElectricalPhase", "{{:ElectricalPhase}}"), new { @class = "form-control WorkOrderFields ElectricalPhaseDropDown_{{:ElectricalPhase}} ElectricalPhase SurveyPanel" })
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-12">
                <div class="col-md-6">
                    <span class="col-md-6">Machine Amperage:</span>
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.DropDownList("MachineAmperageDropDown_" + DateTime.Now.ToString("ddMMyyyyHHmmss"), new SelectList(Model.Amps, "AMPSID", "AMPSDescription", "{{:MachineAmperage}}"), new { @class = "form-control WorkOrderFields MachineAmperageDropDown_{{:MachineAmperage}} MachineAmperage SurveyPanel" })
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <span class="col-md-6">Will the unit fit in the space provided:</span>
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.DropDownList("UnitFitSpaceDropDown_" + DateTime.Now.ToString("ddMMyyyyHHmmss"), new SelectList(Model.YesNoList, "Id", "Description", "{{:UnitFitSpace}}"), new { @class = "form-control WorkOrderFields UnitFitSpaceDropDown_{{:UnitFitSpace}} UnitFitSpace SurveyPanel" })
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-12">
                <div class="col-md-6">
                    <span class="col-md-6">Voltage:</span>
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.DropDownList("VoltageDropDown_" + DateTime.Now.ToString("ddMMyyyyHHmmss"), new SelectList(Model.Voltages, "VoltageID", "Voltage", "{{:Voltage}}"), new { @class = "form-control WorkOrderFields VoltageDropDown_{{:Voltage}} Voltage SurveyPanel" })
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <span class="col-md-6">Will the counter support the space of the unit:</span>
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.DropDownList("CounterUnitSpaceDropDown_" + DateTime.Now.ToString("ddMMyyyyHHmmss"), new SelectList(Model.YesNoList, "Id", "Description", "{{:CounterUnitSpace}}"), new { @class = "form-control WorkOrderFields CounterUnitSpaceDropDown_{{:CounterUnitSpace}} CounterUnitSpace SurveyPanel" })
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-12">
                <div class="col-md-6">
                    <span class="col-md-6">Water Line:</span>
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.DropDownList("WaterLineDropDown_" + DateTime.Now.ToString("ddMMyyyyHHmmss"), new SelectList(Model.WaterLines, "WaterLineID", "WaterLine", "{{:WaterLine}}"), new { @class = "form-control WorkOrderFields WaterLineDropDown_{{:WaterLine}} WaterLine SurveyPanel" })
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                </div>
            </div>
            <div class="col-md-12">
                <div class="col-md-6">
                    <span class="col-md-6">Comment:</span>
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.TextArea("Comments", "{{:Comments}}", new { @class = "form-control WorkOrderFields Comments SurveyPanel", @rows = "5" })
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <span class="col-md-6">What is the specific Location of the Asset:</span>
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.TextArea("AssetLocation", "{{:AssetLocation}}", new { @class = "form-control WorkOrderFields AssetLocation SurveyPanel", @rows = "5" })
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div id="NonSurveyPanel" class="NonSurveyPanel ClosurePanel">
            <div class="col-md-8">
                <div class="col-md-12">
                    <span class="col-md-2">Temperature:</span>
                    <div class="col-md-2">
                        <div class="form-group">
                            @Html.TextBox("Temparture", "{{:Temperature}}", new { @class = "form-control WorkOrderFields Temparture NonSurveyPanel" })
                        </div>
                    </div>
                    @*<span class="col-md-2">Settings:</span>
                        <div class="col-md-2">
                            <div class="form-group">
                                @Html.TextBox("Settings", "{{:Settings}}", new { @class = "form-control WorkOrderFields Settings NonSurveyPanel" })
                            </div>
                        </div>
                        <span class="col-md-2">Counter:</span>
                        <div class="col-md-2">
                            <div class="form-group">
                                @Html.TextBox("Counter", "{{:Counter}}", new { @class = "form-control WorkOrderFields Counter NonSurveyPanel" })
                            </div>
                        </div>*@
                    <span class="col-md-2">Weight:</span>
                    <div class="col-md-2">
                        <div class="form-group">
                            @Html.TextBox("Weight", "{{:Weight}}", new { @class = "form-control WorkOrderFields Weight NonSurveyPanel" })
                        </div>
                    </div>

                    <span class="col-md-2">Ratio:</span>
                    <div class="col-md-2">
                        <div class="form-group">
                            @Html.TextBox("Rato", "{{:Ratio}}", new { @class = "form-control WorkOrderFields Ratio NonSurveyPanel" })
                        </div>
                    </div>

                </div>
                <div class="col-md-12">
                    <span class="col-md-2">System:</span>
                    <div class="col-md-4">
                        <div class="form-group">
                            @Html.DropDownList("SystemDropDown_" + DateTime.Now.ToString("ddMMyyyyHHmmss"), new SelectList(Model.SystemInfoes, "SystemId", "Description"), new { @class = "form-control WorkOrderFields SystemDropDown_{{:System}} systeminfodrp" })
                        </div>
                    </div>
                    <span class="col-md-2">Symptom:</span>
                    <div class="col-md-4">
                        <div class=" form-group">
                            @Html.DropDownList("SymptomDropDown_" + DateTime.Now.ToString("ddMMyyyyHHmmss"), new SelectList(Model.Symptoms, "SymptomID", "Description"), new { @class = "form-control WorkOrderFields SymptomDropDown_{{:SymptomID}} symptomdrp" })
                        </div>
                    </div>
                </div>
                <div class="col-md-12" id="gridTab{{:AssetId}}">
                    <span class="col-md-4"> Non Serialized Items:</span>

                    <div id="detailGrid" class="gridcls_@DateTime.Now.ToString("ddMMyyyyHHmmss")"></div>

                    <div class="col-md-1">
                        <div class="form-group">
                            @Html.CheckBox("QualityIssue_" + DateTime.Now.ToString("ddMMyyyyHHmmss"), false, new { onchange = "QualityIssueOnChange(this)", @class = "QualityIssueChecks NonSurveyPanel", style = "visibility:hidden" })
                        </div>
                    </div>
                    @*<div id="QualityIssuesDiv">
                            <span class="col-md-2">Picture of Issue:</span>
                            <div class="col-md-3">
                                <input type="file" id="FileUpload" name="FileUpload" style="max-width:200px;overflow-x:hidden" class="issuepicturecls" />
                            </div>
                            <span class="col-md-2">Submitter's Email:</span>
                            <div class="col-md-2">
                                <div class="form-group">
                                    @Html.TextBox("Email", "{{:Email}}", new { @class = "form-control WorkOrderFields Email NonSurveyPanel" })
                                </div>
                            </div>
                        </div>*@
                </div>
            </div>
            <div class="col-md-4">
                <span class="col-md-3">Describe Work Performed:</span>
                <div class="col-md-8" style="margin-left:10px;">
                    <div class="form-group">
                        @Html.TextArea("WorkPerformed", "{{:WorkPerformed}}", new { @class = "form-control WorkOrderFields WorkPerformed NonSurveyPanel", @style = "width:300px;height:150px" })
                    </div>
                </div>

            </div>
            <div class="col-md-10">
                @*Non Serialized Items:*@
            </div>
            <div class="col-md-2">
                @*<div class="form-group">
                        No Parts Needed: @Html.CheckBox("NoPartsNeeded_" + DateTime.Now.ToString("ddMMyyyyHHmmss"), false, new { onchange = "NoPartsNeededOnChange(this)", @class = "NoPartsNeeded NonSurveyPanel" })
                        @Html.Hidden("NoPartsNeeded_" + DateTime.Now.ToString("ddMMyyyyHHmmss"), "{{:NoPartsNeeded}}", new { @class = "NoPartsNeededHidden NonSurveyPanel" })
                    </div>*@
            </div>
            @*<div class="col-md-12" id="gridTab{{:AssetId}}">
                    <div id="detailGrid" class="gridcls_@DateTime.Now.ToString("ddMMyyyyHHmmss")"></div>
                </div>*@
        </div>
    </script>

    <script type="text/javascript">

                                                                                            //function QualityIssueOnChange(element)
                                                                                            //{
                                                                                            //    var nextRow = $('#'+element.id).closest('tr');
                                                                                            //    if (nextRow.hasClass("e-detailrow"))
                                                                                            //    {
                                                                                            //        var gridObj = nextRow.find($("div[id^='detailGrid_']")).data("ejGrid");
                                                                                            //        var qualityIssueDiv = nextRow.find($("[id^='QualityIssuesDiv_']"));

                                                                                            //        if(element.checked)
                                                                                            //        {
                                                                                            //            gridObj.showColumns("Issue");//Uses field or headerText of column as the parameter.
                                                                                            //            qualityIssueDiv.show();
                                                                                            //        }
                                                                                            //        else
                                                                                            //        {
                                                                                            //            gridObj.hideColumns("Issue"); //Uses field or headerText of column as the parameter.
                                                                                            //            qualityIssueDiv.hide();
                                                                                            //        }
                                                                                            //    }
                                                                                            //}

                                                                                            function BillableFeedOnChange(element)
                                                                                            {
                                                                                                var gridcls = "gridcls_"+$(element).attr("id").split('_')[1];
                                                                                                var gridObj = $("."+gridcls).data("ejGrid");
                                                                                                if(element.checked)
                                                                                                {
                                                                                                    gridObj.visible = true;
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    gridObj.visible = false;
                                                                                                }
                                                                                            }

                                                                                            function DetailGridManufacturerChange(e) {
                                                                                                @*var currentSku = $("#detailGridSku").val();

            $.ajax({
                url: '@Url.Action("GetNonTaggedSkus", "Workorder")',
                type: 'GET',
                data: { "manufacturer": e.value },
                success: function (data1) {
                    $("#detailGridSku").ejDropDownList({ dataSource: data1, enableFilterSearch: true });
                    var skuDropDownListObj = $('#detailGridSku').ejDropDownList().data("ejDropDownList");
                    skuDropDownListObj.selectItemByText(currentSku);
                }
            });*@
                                                                                            }

                                                                                            function DetailGridSkuChange(e)
                                                                                            {
                                                                                                var gridId = this._id.substring(0, this._id.length - 3);

                                                                                                $.ajax({
                                                                                                    url: '@Url.Action("GetCloserNonTaggedManufacturer", "Workorder")',
                                                                                                    type: 'GET',
                                                                                                    data: { "skuValue": e.value },
                                                                                                    success: function (jsonResult) {
                                                                                                        if (jsonResult.success == true)
                                                                                                        {
                                                                                                            //$("#" + gridId + "Manufacturer").ejDropDownList().data("ejDropDownList").selectItemByText(jsonResult.data[0].text);
                                                                                                            $("#" + gridId + "Manufacturer").val(jsonResult.data[0].text);
                                                                                                        }
                                                                                                    }
                                                                                                });

                                                                                                $.ajax({
                                                                                                    url: '@Url.Action("GetCloserSkuDescription", "Workorder")',
                                                                                                    type: 'GET',
                                                                                                    data: { "skuValue": e.value },
                                                                                                    success: function (jsonResult) {
                                                                                                        //debugger;
                                                                                                        if (jsonResult.success == true)
                                                                                                        {
                                                                                                            $("#" + gridId + "Description").val(jsonResult.data);
                                                                                                        }
                                                                                                        else
                                                                                                        {
                                                                                                            AlertPopup("|There is a problem in getting Model description!");
                                                                                                        }
                                                                                                    }
                                                                                                });


                                                                                                var proxy = this;
                                                                                                if (proxy.inputSearch && proxy.inputSearch.val() != "") {
                                                                                                    var item = {}, alreadyAdded = false;
                                                                                                    item[proxy.model.fields.value] = args.selectedValue;
                                                                                                    item[proxy.model.fields.text] = args.selectedText;
                                                                                                    if (args.isChecked) {
                                                                                                        for (var i = 0; i < selectedItemsOnSearch.length; i++) {
                                                                                                            if (selectedItemsOnSearch[i].value == args.value) {
                                                                                                                alreadyAdded = true;
                                                                                                            }
                                                                                                        }
                                                                                                        if (!alreadyAdded) selectedItemsOnSearch.push(item);
                                                                                                    }
                                                                                                    else {
                                                                                                        for (var i = 0; i < selectedItemsOnSearch.length; i++) {
                                                                                                            if (selectedItemsOnSearch[i].value == args.value) {
                                                                                                                selectedItemsOnSearch.splice(i, 1);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                else if (selectedItemsOnSearch.length > 0) {
                                                                                                    appendList(proxy, selectedItemsOnSearch);
                                                                                                    selectedItemsOnSearch = [];
                                                                                                }

                                                                                            }

                                                                                            function detailGridActionBegin(args) {
                                                                                                //show loader
                                                                                                //alert("add start")
                                                                                                //$( '#ForWaitCursor' ).addClass( "loading" );
                                                                                            }

                                                                                            var skuTmpDropDown = "";
                                                                                            var selectedItemsOnSearch = [];
                                                                                            var skuDropDown = "";
                                                                                            function detailGridActionComplete(args)
                                                                                            {
                                                                                                if (args.requestType == "beginedit" || args.requestType == "add" || args.requestType == "save") {

                                                                                                    if (args.requestType == "add") {
                                                                                                        //hide loader
                                                                                                        //alert("add close")
                                                                                                        //$( '#ForWaitCursor' ).addClass( "loading" );

                                                                                                        $("#" + this._id + "PartReplenish").prop("checked", true); //Defaulting Parts replenish to true

                                                                                                    }
                                                                                                    if (args.requestType == "cancel") {
                                                                                                        //$( '#ForWaitCursor' ).removeClass( "loading" );
                                                                                                    }
                                                                                                    //$("#" + this._id + "Manufacturer").ejDropDownList({ change: "DetailGridManufacturerChange", enableFilterSearch: true });
                                                                                                    /*$("#" + this._id + "Sku").ejDropDownList({change : "DetailGridSkuChange", enableFilterSearch: true, allowVirtualScrolling: true, virtualScrollMode: "continuous" });*/

                                                                                                    if (args.requestType == "save") {
                                                                                                        var gridDatasource = $("#" + this._id).ejGrid("instance").model.dataSource;
                                                                                                        //var partsCost = 0;
                                                                                                        //$.each(gridDatasource, function (i, item) {
                                                                                                        //    partsCost = parseFloat(partsCost) + (parseFloat(item.StandardCost) * parseInt(item.Quantity));
                                                                                                        //});

                                                                                                        //$("#newPartsQuote").val(parseFloat(partsCost).toFixed(2));

                                                                                                        //var prevTotal = $("#previousQuote").val().replace('$', '');
                                                                                                        //$("#newTotalQuote").val(parseFloat(parseFloat(partsCost) + parseFloat(prevTotal)).toFixed(2));
                                                                                                        var quoteObj = {
                                                                                                            "WorkorderId": $("#WorkOrder_WorkorderID").val(),
                                                                                                            "PreviousQuote": $("#previousQuote").val().replace('$', ''),
                                                                                                            "SkuList": gridDatasource
                                                                                                            }

                                                                                                         $.ajax({
                                                                                                             type: "POST",
                                                                                                             url: "@Url.Action("GetServiceQuoteDetailsWithParts", "Workorder")",
                                                                                                             data: JSON.stringify(quoteObj),
                                                                                                             contentType: "application/json",
                                                                                                            }).done(function (jsonResult) {
                                                                                                                if (jsonResult.success) {
                                                                                                                    $("#newPartsQuote").val("$ " + jsonResult.data.PartsTotal.toFixed(2));
                                                                                                                    $("#newTotalQuote").val("$ " + jsonResult.data.TotalServiceQuote.toFixed(2));

                                                                                                                    var prevQuot = $("#previousQuote").val().replace('$', '');
                                                                                                                    $("#previousQuote").val("$ " + parseFloat(prevQuot).toFixed(2));
                                                                                                                }
                                                                                                            });



                                                                                                    }



                                                                                                    //************111
                                                                                                    skuDropDown =  this._id + "Sku";


                                                                                                    @*$("#" + skuDropDown).keyup(function(){
                                                                                                        if(this.value.length == 4)
                                                                                                        {
                                                                                                            $.ajax({
                                                                                                                url: '@Url.Action("GetCloserSKUs", "Workorder")',
                                                                                                                type: 'GET',
                                                                                                                data: { "SearchString": this.value  },
                                                                                                                success: function (jsonResult) {
                                                                                                                    if (jsonResult.success == true)
                                                                                                                    {
                                                                                                                        $("#" + skuDropDown).ejDropDownList({
                                                                                                                                dataSource : jsonResult.data,
                                                                                                                                fields:  { "text": "VendorDescription", "value": "VendorDescription" },
                                                                                                                                enableFilterSearch: true,
                                                                                                                                showRoundedCorner: true,
                                                                                                                                change : "DetailGridSkuChange",
                                                                                                                                watermarkText: "Please Select",
                                                                                                                            });
                                                                                                                    }
                                                                                                                    else{
                                                                                                                        AlerPopup("There is a problem in getting Models!");
                                                                                                                    }
                                                                                                                }
                                                                                                            });
                                                                                                        }
                                                                                                    });*@


                                                                                                    @*var query1 = new ej.Query().select("VendorDescription");
                var dm = ej.DataManager({ url: '@Url.Action("CloserSKU", "Workorder")' });
                var promise = dm.executeQuery(query1);
                promise.done(function (e) {
                    skuTmpDropDown = $("#" + skuDropDown).ejDropDownList({
                        dataSource :  e.result.data,
                        fields:  { "text": "VendorDescription", "value": "VendorDescription" },
                        showRoundedCorner: true,
                        enableFilterSearch: true,
                        allowVirtualScrolling: true,
                        virtualScrollMode: "continuous",
                        itemsCount: 5,
                        sortOrder : "ascending",
                        watermarkText: "Please Select",
                        change : "DetailGridSkuChange",
                        search: "onSearch",
                            actionBegin: "onBegin",
                            //change: "onChange",
                            create: "onCreate"
                    }).data("ejDropDownList");
                });*@

                                                                                                    //************222
                                                                                                    @*var query1 = new ej.Query().select("VendorDescription");
                var dm = ej.DataManager({ url: '@Url.Action("CloserSKU", "Workorder")' });
                var promise = dm.executeQuery(query1);
                promise.done(function (e) {
                skuTmpDropDown = $("#" + skuDropDown).ejDropDownList({
                    dataSource :  e.result.data,
                    fields:  { "text": "VendorDescription", "value": "VendorDescription" },
                    showRoundedCorner: true,
                    enableFilterSearch: true,
                    allowVirtualScrolling: true,
                    virtualScrollMode: "continuous",
                    itemsCount: 10,
                    sortOrder : "ascending",
                    watermarkText: "Please Select",
                    change : "DetailGridSkuChange",
                    allowFiltering: true,
                    popupShown: function (args)
                    {
                        if (!this.isInitial) {
                            var start = 11;
                            var end = 20;
                            var instance = $("#"+skuDropDown).ejDropDownList("instance");
                            //var listElement = instance.popupObj.element.querySelector(".e-content");
                            var listElement = $("#"+skuDropDown+"_popup").find(".e-content");
                            listElement[0].addEventListener('onscroll', () => {
                                if ((listElement.scrollTop + listElement.offsetHeight + 2 >= listElement.scrollHeight)) {
                                    var filterQuery = new ej.data.Query().select(['VendorDescription']).take(10);
                                    this.dataSource.executeQuery(filterQuery.range(start, end)).then((event) => {
                                        start = end;
                                        end += 10;
                                        instance.addItem(event.result);
                                    }).catch((e) => {
                                    });
                                }
                            })
                        }
                    }
                }).data("ejDropDownList");
                });*@
                                                                                                    //********************************************

                                                                                                    if (args.requestType == "beginedit") {
                                                                                                        @*var manufacturerObj = $("#" + this._id + "Manufacturer").data("ejDropDownList");
                                                                                                        if (manufacturerObj.currentValue != null && manufacturerObj.currentValue != "undefined")
                                                                                                        {
                                                                                                            $.ajax({
                                                                                                                url: '@Url.Action("GetTaggedSkus", "Workorder")',
                                                                                                                type: 'GET',
                                                                                                                data: { "manufacturer": manufacturerObj.currentValue  },
                                                                                                                success: function (jsonResult) {

                                                                                                                    if (jsonResult.success == true)
                                                                                                                    {
                                                                                                                        $("#" + this._id + "Sku").ejDropDownList({ dataSource: jsonResult.data, enableFilterSearch: true });
                                                                                                                    }
                                                                                                                    else{
                                                                                                                        AlerPopup("There is a problem in getting Models!");
                                                                                                                    }
                                                                                                                }
                                                                                                            });
                                                                                                        }*@

                                                                                                        var gridSkuId = $("#" + this._id + "Sku");
                                                                                                        var manufacturerObj = $("#" + this._id + "Manufacturer").val();
                                                                                                        var descObj = $("#" + this._id + "Description").val();
                                                                                                        if (manufacturerObj != null && manufacturerObj != "undefined" && descObj != null && descObj != "undefined")
                                                                                                        {
                                                                                                            $.ajax({
                                                                                                                url: '@Url.Action("GetFBClosureSku", "Workorder")',
                                                                                                                type: 'GET',
                                                                                                                data: { "manufacturer": manufacturerObj, "Desc" :  descObj},
                                                                                                                success: function (jsonResult) {

                                                                                                                    if (jsonResult.success == true)
                                                                                                                    {
                                                                                                                        gridSkuId.val(jsonResult.data);
                                                                                                                    }
                                                                                                                    else{
                                                                                                                        AlerPopup("There is a problem in getting Models!");
                                                                                                                    }
                                                                                                                }
                                                                                                            });
                                                                                                        }




                                                                                                    }
                                                                                                }
                                                                                            }

                                                                                            function onOpen(args) {
                                                                                                var skuDropDown =  this._id + "Sku";
                                                                                                if (!this.isInitial) {
                                                                                                    var start = 11;
                                                                                                    var end = 20;
                                                                                                    var instance = $("#" + skuDropDown).ejDropDownList("instance");
                                                                                                    //var listElement = instance.popupObj.element.firstChild;
                                                                                                    var listElement = $("#detailGrid_3437956Sku_popup");
                                                                                                    listElement.addEventListener('scroll', () => {
                                                                                                        if ((listElement.scrollTop + listElement.offsetHeight >= listElement.scrollHeight)) {
                                                                                                            var filterQuery = this.query.clone();
                                                                                                            this.dataSource.executeQuery(filterQuery.range(start, end)).then((event) => {
                                                                                                                start = end;
                                                                                                                end += 5;
                                                                                                                instance.addItem(event.result);
                                                                                                            }).catch((e) => {
                                                                                                            });
                                                                                                        }
                                                                                                    })
                                                                                                }
                                                                                            }

                                                                                            function onCreate(args) {
                                                                                                skuTmpDropDown = this;
                                                                                                skuTmpDropDown._updateSelectedIndexByValue = function () { }
                                                                                                skuTmpDropDown.addItemMethod = skuTmpDropDown.addItem;
                                                                                                skuTmpDropDown.addItem = function (list) {
                                                                                                    appendList(this, list);
                                                                                                }
                                                                                            }

                                                                                            function appendList(proxy, selectedList) {
                                                                                                var alreadyPushed = false;
                                                                                                if (selectedList.length) {
                                                                                                    for (var i = 0; i < selectedList.length; i++) {
                                                                                                        for (var j = 0; j < proxy._rawList.length; j++) {
                                                                                                            if (proxy._rawList[j][proxy.model.fields.value] === selectedList[i][proxy.model.fields.value]) {
                                                                                                                alreadyPushed = true;
                                                                                                                break;
                                                                                                            }
                                                                                                        }
                                                                                                        if (!alreadyPushed) {
                                                                                                            skuTmpDropDown.addItemMethod(selectedList[i]);
                                                                                                        }
                                                                                                        alreadyPushed = false;
                                                                                                    }
                                                                                                }
                                                                                            }

                                                                                            function onBegin(args) {
                                                                                                var proxy = this;
                                                                                                if (proxy.inputSearch && proxy.inputSearch.val() != "") {
                                                                                                    args.cancel = true;
                                                                                                    var skipQuery = proxy._addSearchQuery(ej.Query(), !proxy._isPlainType(proxy._rawList)).skip(proxy._getLi().length).clone();
                                                                                                    queryPromise = proxy.model.dataSource.executeQuery(skipQuery);
                                                                                                    queryPromise.done(function (e) {
                                                                                                        dynamicItems(proxy, e.result);
                                                                                                    }).fail(function () {
                                                                                                        console.log("failure triggered")
                                                                                                    }).always(function (e) {
                                                                                                        proxy._removeLoadingClass();
                                                                                                    });
                                                                                                }
                                                                                            }

                                                                                            function dynamicItems(proxy, itemTag) {

                                                                                                if (!itemTag) return false;
                                                                                                proxy._mapFields();
                                                                                                var list = $.isArray(itemTag) ? itemTag : [itemTag];
                                                                                                if (list.length < 1) return false;
                                                                                                proxy._generateLi(list, proxy.mapFld);
                                                                                                proxy.ultag.append(proxy.dummyUl);
                                                                                                if (proxy.model.showCheckbox) {
                                                                                                    proxy._appendCheckbox(proxy.dummyUl);
                                                                                                }
                                                                                                if (proxy._isPopupShown()) {
                                                                                                    var scrollerPosition = proxy.scrollerObj ? proxy.scrollerObj.scrollTop() : 0;
                                                                                                    proxy._refreshScroller();
                                                                                                    if (proxy.scrollerObj) proxy.scrollerObj.option("scrollTop", scrollerPosition);
                                                                                                }
                                                                                            }

                                                                                            function onSearch(args) {
                                                                                                window.search = args;
                                                                                                if (!window.searchFlag) {
                                                                                                    window.searchFlag = true;
                                                                                                    window.processSearchString = args.searchString;
                                                                                                    var proxy = skuTmpDropDown;
                                                                                                    if (args.searchQuery && proxy.inputSearch.val() !== "") {

                                                                                                        var query1 = new ej.Query().select("VendorDescription");
                                                                                                        var dm = ej.DataManager({ url: '@Url.Action("CloserSKU", "Workorder")' });
                                                                                                        var queryPromise = dm.executeQuery(query1);

                                                                                                        //var searchQuery = args.searchQuery.clone();
                                                                                                        //var queryPromise = proxy.dataSource.executeQuery(searchQuery);
                                                                                                        queryPromise.done(function (e) {
                                                                                                            if (window.processSearchString == window.search.searchString) {
                                                                                                                //proxy._filterSearch(args.searchQuery, e.result.data);
                                                                                                                //console.log("added");
                                                                                                                var filterResult = [];
                                                                                                                e.result.data.filter(function(el) {
                                                                                                                    if(el.VendorDescription.toLowerCase().indexOf(window.processSearchString.toLowerCase()) == 1)
                                                                                                                    {
                                                                                                                        filterResult.push(el);
                                                                                                                    }
                                                                                                                });

                                                                                                                var ddInstance =  $("#" + skuDropDown).ejDropDownList("instance");
                                                                                                                ddInstance.dataSource =     filterResult;
                                                                                                            }
                                                                                                            else {
                                                                                                                window.searchFlag = false;
                                                                                                                console.log("recursive called");
                                                                                                                onSearch(window.search);
                                                                                                            }
                                                                                                        }).fail(function () {
                                                                                                            console.log("fail triggered");
                                                                                                        }).always(function () {
                                                                                                            window.searchFlag = false;
                                                                                                        });
                                                                                                        args.cancel = true;
                                                                                                    }
                                                                                                    else if (selectedItemsOnSearch.length > 0) {
                                                                                                        appendList(proxy, selectedItemsOnSearch);
                                                                                                        selectedItemsOnSearch = [];
                                                                                                        window.searchFlag = false;
                                                                                                    }
                                                                                                    else {
                                                                                                        window.searchFlag = false;
                                                                                                        args.cancel = true;
                                                                                                    }
                                                                                                }
                                                                                                else {
                                                                                                    console.log("continuous search have restricted");
                                                                                                }
                                                                                            }

                                                                                            function onChange(args) {
                                                                                                var proxy = this;
                                                                                                if (proxy.inputSearch && proxy.inputSearch.val() != "") {
                                                                                                    var item = {}, alreadyAdded = false;
                                                                                                    item[proxy.model.fields.value] = args.selectedValue;
                                                                                                    item[proxy.model.fields.text] = args.selectedText;
                                                                                                    if (args.isChecked) {
                                                                                                        for (var i = 0; i < selectedItemsOnSearch.length; i++) {
                                                                                                            if (selectedItemsOnSearch[i].value == args.value) {
                                                                                                                alreadyAdded = true;
                                                                                                            }
                                                                                                        }
                                                                                                        if (!alreadyAdded) selectedItemsOnSearch.push(item);
                                                                                                    }
                                                                                                    else {
                                                                                                        for (var i = 0; i < selectedItemsOnSearch.length; i++) {
                                                                                                            if (selectedItemsOnSearch[i].value == args.value) {
                                                                                                                selectedItemsOnSearch.splice(i, 1);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                else if (selectedItemsOnSearch.length > 0) {
                                                                                                    appendList(proxy, selectedItemsOnSearch);
                                                                                                    selectedItemsOnSearch = [];
                                                                                                }
                                                                                            }

                                                                                            function detailGridData(e)
                                                                                            {
                                                                                                //alert("123");



                                                                                                var filteredData = e.data["AssetId"];

                                                                                                $("#detailGrid").attr("id","detailGrid_"+ filteredData);

                                                                                                e.detailsElement.find($("[id^='QualityIssue_']")).attr("id","QualityIssue_"+ filteredData);
                                                                                                e.detailsElement.find($("[id^='QualityIssuesDiv']")).attr("id","QualityIssuesDiv_"+ filteredData);

                                                                                                if (e.data["QualityIssue"] == true)
                                                                                                {
                                                                                                    $("#QualityIssue_" + filteredData)[0].checked = true;
                                                                                                    $("#QualityIssuesDiv_" + filteredData).show();
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    $("#QualityIssue_" + filteredData)[0].checked = false;
                                                                                                    $("#QualityIssuesDiv_" + filteredData).hide();
                                                                                                }

                                                                                                var newDetailGrid = e.detailsElement.find("#detailGrid_"+ filteredData);

                                                                                                var query = new ej.Query().addParams("AssetId", filteredData);
                                                                                                var dm = ej.DataManager({ url: '@Url.Action("GetPartsForAsset", "Workorder")', adaptor: new ej.UrlAdaptor() });
                                                                                                var promise = dm.executeQuery(query);
                                                                                                promise.done(function (e) {
                                                                                                    var dataResults = e.result;

                                                                                                    newDetailGrid.ejGrid({
                                                                                                        allowSelection: true,
                                                                                                        toolbarSettings : {	showToolbar : true, toolbarItems : ["add","edit", "delete", "update", "cancel"] },
                                                                                                        toolbarClick: function (args) {
                                                                                                            //$( '#ForWaitCursor' ).addClass( "loading" );
                                                                                                            //alert(args.itemName);
                                                                                                            if ((args.itemName == "Edit" || args.itemName == "Delete") & this.getSelectedRecords().length == 0) {
                                                                                                                //$( '#ForWaitCursor' ).removeClass( "loading" );
                                                                                                                //prevent the default alert popup
                                                                                                                alert = function () { };

                                                                                                                //here you can call your own customize alert method
                                                                                                                AlertPopup( "|No records selected for " + args.itemName + " operation" );

                                                                                                            }

                                                                                                        },
                                                                                                        dataSource : dataResults,
                                                                                                        columns: [
                                                                                                            { field: "Issue", headerText: "Issue", template: true, width: 80, templateID: "#checkboxTemplate", visible: false, textAlign: ej.TextAlign.Center, allowEditing: false, isPrimaryKey: true },//The checkbox column is bound to the grid using template property and headerTemplateID property
                                                                                                            { field: "PartReplenish", headerText: "Part Replenish", width: 80, textAlign: ej.TextAlign.Center, type: 'boolean', displayAsCheckBox: true, editType: 'booleanedit' },
                                                                                                            { field: "Quantity", headerText: 'Quantity', width: 80, textAlign: ej.TextAlign.Left },
                                                                                                            //{ field: "Sku", headerText: 'Part#/SKU', width: 120, textAlign: ej.TextAlign.Left, foreignKeyField: "VendorDescription",foreignKeyValue: "VendorDescription",dataSource: @Html.Raw(jsonClosurePartsModel), width: 120  },
                                                                                                            //{ field: "Sku", headerText: 'Part#/SKU', width: 120, textAlign: ej.TextAlign.Left, width: 120 },
                                                                                                            { field: "Sku", headerText: 'Part#/SKU', width: 120, textAlign: ej.TextAlign.Left, width: 120, editTemplate:
                                                                                                                {
                                                                                                                    create: () =>{return "<input>";},
                                                                                                                    read: (args) => {
                                                                                                                        args.ejAutocomplete('suggestionList').css('display', 'none');
                                                                                                                        return args.ejAutocomplete("getValue");},
                                                                                                                    destroy: () => {},
                                                                                                                    write: (args) => {
                                                                                                                        var dataList = @Html.Raw(jsonClosurePartsModel);
                                                                                                                        var data = ej.DataManager(dataList).executeLocal(new ej.Query().select("VendorDescription"));
                                                                                                                         args.element.ejAutocomplete(
                                                                                                                             {
                                                                                                                                 width: "100%",
                                                                                                                                 dataSource: data,
                                                                                                                                 enableDistinct: true,
                                                                                                                                 value: args.rowdata !== undefined ? args.rowdata["VendorDescription"] : "" ,
                                                                                                                                 select: function (argument) {
                                                                                                                                     var item = argument.item;
                                                                                                                                     var gridId = this._id.substring(0, this._id.length - 3);

                                                                                                                                     $.ajax({
                                                                                                                                         url: '@Url.Action("GetCloserNonTaggedManufacturer", "Workorder")',
                                                                                                                                         type: 'GET',
                                                                                                                                         data: { "skuValue": item },
                                                                                                                                         success: function (jsonResult) {
                                                                                                                                             if (jsonResult.success == true)
                                                                                                                                             {
                                                                                                                                                 $("#" + gridId + "Manufacturer").val(jsonResult.data[0].text);
                                                                                                                                             }
                                                                                                                                         }
                                                                                                                                     });

                                                                                                                                     $.ajax({
                                                                                                                                         url: '@Url.Action("GetCloserSkuDescription", "Workorder")',
                                                                                                                                         type: 'GET',
                                                                                                                                         data: { "skuValue": item },
                                                                                                                                         success: function (jsonResult) {
                                                                                                                                             //debugger;
                                                                                                                                             if (jsonResult.success == true)
                                                                                                                                             {
                                                                                                                                                 $("#" + gridId + "Description").val(jsonResult.data);
                                                                                                                                             }
                                                                                                                                             else
                                                                                                                                             {
                                                                                                                                                 AlertPopup("|There is a problem in getting Model description!");
                                                                                                                                             }
                                                                                                                                         }
                                                                                                                                     });

                                                                                                                                     $.ajax({
                                                                                                                                         url: '@Url.Action("GetSkuCost", "Workorder")',
                                                                                                                                         type: 'GET',
                                                                                                                                         data: { "skuValue": item },
                                                                                                                                         success: function (jsonResult) {
                                                                                                                                             if (jsonResult.success == true)
                                                                                                                                             {

                                                                                                                                                 $("#" + gridId + "StandardCost").val(parseFloat(jsonResult.data).toFixed(2));

                                                                                                                                                 //var partsCost = $("#quoteParts").val();
                                                                                                                                                 //var latestTotal = parseFloat(partsCost.replace('$', '')) + parseFloat(jsonResult.data);
                                                                                                                                                 //$("#quoteParts").val(latestTotal);
                                                                                                                                             }
                                                                                                                                             else
                                                                                                                                             {
                                                                                                                                                 AlertPopup("|There is a problem in getting Sku Cost!");
                                                                                                                                             }
                                                                                                                                         }
                                                                                                                                     });

                                                                                                                                     var proxy = this;
                                                                                                                                     if (proxy.inputSearch && proxy.inputSearch.val() != "") {
                                                                                                                                         var item = {}, alreadyAdded = false;
                                                                                                                                         item[proxy.model.fields.value] = args.selectedValue;
                                                                                                                                         item[proxy.model.fields.text] = args.selectedText;
                                                                                                                                         if (args.isChecked) {
                                                                                                                                             for (var i = 0; i < selectedItemsOnSearch.length; i++) {
                                                                                                                                                 if (selectedItemsOnSearch[i].value == args.value) {
                                                                                                                                                     alreadyAdded = true;
                                                                                                                                                 }
                                                                                                                                             }
                                                                                                                                             if (!alreadyAdded) selectedItemsOnSearch.push(item);
                                                                                                                                         }
                                                                                                                                         else {
                                                                                                                                             for (var i = 0; i < selectedItemsOnSearch.length; i++) {
                                                                                                                                                 if (selectedItemsOnSearch[i].value == args.value) {
                                                                                                                                                     selectedItemsOnSearch.splice(i, 1);
                                                                                                                                                 }
                                                                                                                                             }
                                                                                                                                         }
                                                                                                                                     }
                                                                                                                                     else if (selectedItemsOnSearch.length > 0) {
                                                                                                                                         appendList(proxy, selectedItemsOnSearch);
                                                                                                                                         selectedItemsOnSearch = [];
                                                                                                                                     }
                                                                                                                                 }
                                                                                                                             });
                                                                                                                     }

                                                                                                                }
                                                                                                            },
                                                                                                            { field: "Manufacturer", headerText: 'Manufacturer', width: 200, textAlign: ej.TextAlign.Left },
                                                                                                            { field: "Description", headerText: 'Description', width: 400, textAlign: ej.TextAlign.Left },
                                                                                                            { field: "StandardCost", headerText: 'SkuCost', width: 400, textAlign: ej.TextAlign.Left, visible: false }
                                                                                                        ],
                                                                                                        actionBegin: "detailGridActionBegin",
                                                                                                        actionComplete: "detailGridActionComplete"
                                                                                                    });

                                                                                                    newDetailGrid.keyup(function (e) {
                                                                                                        if (e.keyCode == 40 && $(e.target).hasClass("e-autocomplete")) {
                                                                                                            var autocomp = $("#detailGrid_VendorDescription").ejAutocomplete("instance")
                                                                                                            if (autocomp.getValue()!="" && autocomp.getActiveText() != "No suggestions")
                                                                                                                $(e.target).val(autocomp.getActiveText());
                                                                                                        }
                                                                                                    });

                                                                                                    if (workOrderStatus.localeCompare("Closed") != 0
                                                                                                        && workOrderStatus.localeCompare("Invoiced") != 0)
                                                                                                    {
                                                                                                        newDetailGrid.ejGrid({
                                                                                                            allowSelection: true,
                                                                                                            editSettings:{allowAdding:true,allowDeleting:true,allowEditing:true,allowSaving:true,allowCanceling:true},
                                                                                                        });
                                                                                                    }

                                                                                                    if($("#QualityIssue_" + filteredData)[0].checked == true)
                                                                                                    {
                                                                                                        newDetailGrid.data("ejGrid").showColumns("Issue");//Uses field or headerText of column as the parameter.
                                                                                                        $("#FileUpload_" + filteredData).removeAttr('disabled');
                                                                                                        $("#Email_" + filteredData).removeAttr('disabled');
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        newDetailGrid.data("ejGrid").hideColumns("Issue"); //Uses field or headerText of column as the parameter.
                                                                                                        $("#FileUpload_" + filteredData).attr('disabled', 'disabled');
                                                                                                        $("#Email_" + filteredData).attr('disabled', 'disabled');
                                                                                                    }
                                                                                                });

                                                                                                if (e.data["CallTypeID"] == 1600)
                                                                                                {
                                                                                                    e.detailsElement.find("#NonSurveyPanel").hide();
                                                                                                    e.detailsElement.find("#SurveyPanel").show();
                                                                                                }
                                                                                                else{
                                                                                                    e.detailsElement.find("#SurveyPanel").hide();
                                                                                                    e.detailsElement.find("#NonSurveyPanel").show();
                                                                                                }

                                                                                                e.detailsElement.css("display", "");


                                                                                                $.each(e.detailsElement.find("[class*='SymptomDropDown_']"),function(i,item){
                                                                                                    var dropValue = $(item).attr("class").match(/[\w-]*SymptomDropDown_[\w-]*/g)[0].split('_')[1];
                                                                                                    $(item).val(dropValue);
                                                                                                });

                                                                                                $.each(e.detailsElement.find("[class*='SystemDropDown_']"),function(i,item){
                                                                                                    var dropValue = $(item).attr("class").match(/[\w-]*SystemDropDown_[\w-]*/g)[0].split('_')[1];
                                                                                                    $(item).val(dropValue);
                                                                                                });

                                                                                                $.each(e.detailsElement.find("[class*='NemwNumberDropDown_']"),function(i,item){
                                                                                                    var dropValue = $(item).attr("class").match(/[\w-]*NemwNumberDropDown_[\w-]*/g)[0].split('_')[1];
                                                                                                    $(item).val(dropValue);
                                                                                                });

                                                                                                $.each(e.detailsElement.find("[class*='ElectricalPhaseDropDown_']"),function(i,item){
                                                                                                    var dropValue = $(item).attr("class").match(/[\w-]*ElectricalPhaseDropDown_[\w-]*/g)[0].split('_')[1];
                                                                                                    $(item).val(dropValue);
                                                                                                });

                                                                                                $.each(e.detailsElement.find("[class*='MachineAmperageDropDown_']"),function(i,item){
                                                                                                    var dropValue = $(item).attr("class").match(/[\w-]*MachineAmperageDropDown_[\w-]*/g)[0].split('_')[1];
                                                                                                    $(item).val(dropValue);
                                                                                                });

                                                                                                $.each(e.detailsElement.find("[class*='UnitFitSpaceDropDown_']"),function(i,item){
                                                                                                    var dropValue = $(item).attr("class").match(/[\w-]*UnitFitSpaceDropDown_[\w-]*/g)[0].split('_')[1];
                                                                                                    $(item).val(dropValue);
                                                                                                });

                                                                                                $.each(e.detailsElement.find("[class*='VoltageDropDown_']"),function(i,item){
                                                                                                    var dropValue = $(item).attr("class").match(/[\w-]*VoltageDropDown_[\w-]*/g)[0].split('_')[1];
                                                                                                    $(item).val(dropValue);
                                                                                                });

                                                                                                $.each(e.detailsElement.find("[class*='CounterUnitSpaceDropDown_']"),function(i,item){
                                                                                                    var dropValue = $(item).attr("class").match(/[\w-]*CounterUnitSpaceDropDown_[\w-]*/g)[0].split('_')[1];
                                                                                                    $(item).val(dropValue);
                                                                                                });

                                                                                                $.each(e.detailsElement.find("[class*='WaterLineDropDown_']"),function(i,item){
                                                                                                    var dropValue = $(item).attr("class").match(/[\w-]*WaterLineDropDown_[\w-]*/g)[0].split('_')[1];
                                                                                                    $(item).val(dropValue);
                                                                                                });


                                                                                            }

                                                                                            function checkEmail()
                                                                                            {
                                                                                                var email = document.getElementById("EmailEventEmail").value;
                                                                                                if(email.length>0)
                                                                                                {
                                                                                                    var pattern = /^([\w-\.]+@@([\w-]+\.)+[\w-]{2,4})?$/;

                                                                                                    if(email.toLowerCase().includes("jmsmucker"))
                                                                                                    {
                                                                                                        return false;
                                                                                                    }

                                                                                                    return email.match(pattern);
                                                                                                }
                                                                                                else{
                                                                                                    return false;
                                                                                                }
                                                                                            }

                                                                                            function showAssetImage(assetId, serialNumber)
                                                                                            {
                                                                                                $.ajax({
                                                                                                    url: '@Url.Action("GetAssetImages", "Workorder")',
                                                                                                    type: 'GET',
                                                                                                    data: { "serialNumber": serialNumber, "assetId" : assetId },
                                                                                                    success: function (jsonResult) {

                                                                                                        if (jsonResult.success == true)
                                                                                                        {
                                                                                                            if (jsonResult.data.length > 0)
                                                                                                            {
                                                                                                                $("#PopupAssetImage").attr("src",jsonResult.data[0]);
                                                                                                                $('[data-popup="popup-7"]').fadeIn(350);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                });
                                                                                            }
    </script>

    <!--Code corresponding to columnTemplate-->
    <script type="text/x-jsrender" id="checkboxTemplate">
        <input type="checkbox" class="rowCheckbox" />
    </script>

    <!--Code corresponding to headerTemplate-->
    <script type="text/x-jsrender" id="headerTemplate">
        <input type="checkbox" id="headchk" />
    </script>

    <script type="text/x-jsrender" id="assetImageTemplate">
        {{if IsSlNumberImageExist == true }}
        <a onclick='showAssetImage({{:AssetId}},{{:SerialNumber}})'><img align='center' src='/images/attachment.png' /></a>
        {{/if}}
    </script>

    <div class="popup" data-popup="popup-6">
        @Html.HiddenFor(m => m.RowId)
        <div class="popup-inner">
            <h4>Removal Questionnaire</h4>
            <div class="col-md-12" style="margin-top:10px;position:relative;">
                <span class="col-md-6">How many FarmerBrothers owned machines will we be removing?</span>
                <div class="col-md-6">
                    <div class="form-group">
                        @Html.TextBoxFor(m => m.RemovalCount, new { @class = "form-control" })
                    </div>
                </div>
            </div>
            <div class="col-md-12" style="margin-top:10px;position:relative;">
                <span class="col-md-6">What date will you need these machines removed by?</span>
                <div class="col-md-6">
                    <div class="form-group">
                        @Html.TextBoxFor(m => m.RemovalDate, new { @class = "form-control" })
                    </div>
                </div>
            </div>
            <div class="col-md-12" style="margin-top:10px;position:relative;">
                <span class="col-md-6">Are we removing all machines from your facility?</span>
                <div class="col-md-6">
                    <div class="form-group">
                        @Html.RadioButtonFor(m => m.RemovaAll, "true") Yes
                        @Html.RadioButtonFor(m => m.RemovaAll, "false") No
                    </div>
                </div>
            </div>
            <div id="AdditionalQuestions" style="display:none">
                <div class="col-md-12" style="margin-top:10px;position:relative;">
                    <span class="col-md-6">May I ask the reason you have chosen to remove our machines from your location?</span>
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.DropDownListFor(m => m.RemovalReason, new SelectList(Model.RemovalReasons, "FBStatusID", "FBStatus"), new { @class = "form-control WorkOrderFields" })
                        </div>
                    </div>
                </div>
                <div class="col-md-12" style="margin-top:10px;position:relative;">
                    <span class="col-md-6">Who will be supplying your beverages going forward?</span>
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.TextBoxFor(m => m.BeveragesSupplier, new { @class = "form-control" })
                        </div>
                    </div>
                </div>
                <div class="col-md-12" style="margin-top:10px;position:relative;">
                    <span class="col-md-6">What were the main reasons to change your beverage solution?</span>
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.CheckBoxFor(m => m.ClosingBusiness) Closing Business
                        </div>
                        <div class="form-group">
                            @Html.CheckBoxFor(m => m.FlavorOrTasteOfCoffee) Flavor/Taste of Coffee
                        </div>
                        <div class="form-group">
                            @Html.CheckBoxFor(m => m.EquipmentServiceReliabilityorResponseTime) Equipment service reliability / response time
                        </div>
                        <div class="form-group">
                            @Html.CheckBoxFor(m => m.EquipmentReliability) Equipment reliability
                        </div>
                        <div class="form-group">
                            @Html.CheckBoxFor(m => m.CostPerCup) Cost per Cup
                        </div>
                        <div class="form-group">
                            @Html.CheckBoxFor(m => m.ChangingGroupPurchasingProgram) Changing group purchasing program
                        </div>
                        <div class="form-group">
                            @Html.CheckBoxFor(m => m.ChangingDistributor) Changing Distributor
                        </div>
                    </div>
                </div>
            </div>
            <button data-popup-close="popup-6" style="margin-top:10px;float:right;" class="btn btn-primary ">Save</button>
            <a class="popup-close" data-popup-close="popup-6">x</a>
        </div>
    </div>

    <div class="popup" data-popup="popup-7">
        <div class="popup-inner">
            <h4>Asset Image</h4>
            <div style="height:400px;overflow-x:scroll;overflow-y:scroll">
                <img align='center' id="PopupAssetImage" />
            </div>
            <a class="popup-close" data-popup-close="popup-7">x</a>
        </div>
    </div>

    <div class="popup" data-popup="popup-8">
        <div class="popup-inner" style="width:500px;">
            <h4>Email WorkOrder</h4>
            <div class="col-md-12" style="margin-top:10px;position:relative;">
                <span class="col-md-6">Email Address:</span>
                <div class="col-md-6">
                    <div class="form-group">
                        <input style="margin-left:2px;" id="EmailEventEmail" />
                    </div>
                </div>
            </div>
            <a id="SendMailButton" style="margin-top:10px;float:right;" class="btn btn-primary enableonclose">Send Mail</a>
            <a class="popup-close" data-popup-close="popup-8">x</a>
        </div>
    </div>

    <div class="popup" data-popup="popup-9">
        <div class="popup-inner">
            <h4>Reason / Notes</h4>
            <div class="col-md-12" style="margin-top:10px;position:relative;">
                <span class="col-md-4">Spawn Reason</span>
                <div class="col-md-8">
                    <div class="form-group">
                        @Html.TextBox("SpawnReasonDropdown")
                    </div>
                </div>
            </div>
            <div class="col-md-12" style="margin-top:10px;position:relative;">
                <span class="col-md-4">Notes</span>
                <div class="col-md-8">
                    <div class="form-group">
                        @Html.TextArea("SpanReasonNotes", new { @rows = "5", @class = "form-control", @Style = "width:100%", @id = "SpanReasonNotes" })
                    </div>
                </div>
            </div>
            <button data-popup-close="popup-9" style="margin-top:10px;float:right;" class="btn btn-primary ">Save</button>
            <a class="popup-close" data-popup-close="popup-9">x</a>
        </div>
    </div>


    <div class="popup" data-popup="popup-10">
        <div class="popup-inner">
            <table>
                <tr>
                    <td><h4>Add to Notes</h4></td>
                </tr>
                <tr>
                    <td>@Html.TextAreaFor(n => n.Notes.Notes, new { @rows = "5", @class = "form-control", @Style = "width:500px", @id = "NotesText1" })</td>
                </tr>
                <tr>
                    <td>
                        <button type="submit" class="btn btn-primary enableonclose" style="margin-top:5px;" name="action:UpdateNotes">Add</button>
                        @*<button data-popup-close="popup-10" class="btn btn-primary btn-orange enableonclose" style="margin-top:5px;">Cancel</button>*@
                        <button type="submit" class="btn btn-primary btn-orange enableonclose" style="margin-top:5px;">Cancel</button>
                    </td>
                </tr>
            </table>
            <a class="popup-close" data-popup-close="popup-10" href="#">x</a>
        </div>
    </div>

    <div class="popup" data-popup="popup-11">
        <div class="popup-inner">
            <h4>Reason for NSR </h4>
            <div class="col-md-12" style="margin-top:10px;position:relative;">
                <span class="col-md-4">NSR Reason</span>
                <div class="col-md-8">
                    <div class="form-group">
                        @Html.TextBox("NSRReasonDropdown")
                    </div>
                </div>
            </div>
            <div class="col-md-12" style="margin-top:10px;position:relative;">
                <span class="col-md-4">Notes</span>
                <div class="col-md-8">
                    <div class="form-group">
                        @Html.TextArea("NSRReasonNotes", new { @rows = "5", @class = "form-control", @Style = "width:100%", @id = "NSRReasonNotes" })
                    </div>
                </div>
            </div>
            <button data-popup-close="popup-11" style="margin-top:10px;float:right;" class="btn btn-primary ">Save</button>
            <a class="popup-close" data-popup-close="popup-11">x</a>
        </div>
    </div>

    <div class="popup" data-popup="popup-SN">
        <div class="popup-inner" style="width:500px;">
            <h4>Enter Serial Number</h4>
            <div class="col-md-12" style="margin-top:10px;">
                <span class="col-md-6">Serial Number:</span>
                <div class="col-md-6">
                    <div class="form-group">
                        <input style="margin-left:2px;" id="serialNumberTxt" />
                    </div>
                </div>
            </div>
            <a id="UpdateSerialNumber" style="margin-top:10px;float:right;" class="btn btn-primary enableonclose">Add</a>
            <a class="popup-close" data-popup-close="popup-SN">x</a>
        </div>
    </div>

    <div class="popup" data-popup="popup-dataVerify-1">
        <div class="popup-inner">
            <table>
                <tr>
                    <td>Data Modified. \n Are You Sure You Want to Exit This WO Without Saving? </td>
                    <td id="custId"></td>
                </tr>
                <tr>
                    <td><button style="margin-top:10px;" class="btn btn-orange" onclick="ExirWorkorder(1)">Yes</button></td>
                    <td><button style="margin-top:10px;" class="btn btn-orange" onclick="ExirWorkorder(0)">No</button></td>
                </tr>
            </table>
            <a class="popup-close" data-popup-close="popup-dataVerify-1" href="#">x</a>
        </div>
    </div>

}



<div id="woPdfDiv" @*style="display:none;"*@>
    <canvas id="WoCanvasElement" style="border:2px solid black;display:none" width="200" height="200"></canvas>

</div>


<div class="popup" data-popup="popup-clover">

    <div class="popup-inner" style="width: 100%; border-radius: 1em; padding: 1.5em; ">
        <h2>Credit Card Processing</h2>
        <hr style="border-color: #b89898;" />
        <script>
    var accessKey = '@System.Configuration.ConfigurationManager.AppSettings["CloverAccessKey"].ToString()';
    const clover = new Clover(accessKey);
    const elements = clover.elements();
    const form = $('#clover-form');

    const styles = {
        'card-number input': {
            'width': '100%',
            'height': '100%',
            'font-size': '20px',
            'padding': '3px',
            'font-weight': 'bold'
        }
        //'card-number input': {
        //    'background-color': '#BBBBBB'
        //},
        //'card-date input': {
        //    'background-color': '#CCCCCC'
        //},
        //'card-cvv input': {
        //    'background-color': '#DDDDDD'
        //},
        //'card-postal-code input': {
        //    'background-color': '#EEEEEE'
        //}
    };

    $(document).ready(function () {
        const cardNumber = elements.create('CARD_NUMBER', styles);
        const cardDate = elements.create('CARD_DATE', styles);
        const cardCvv = elements.create('CARD_CVV', styles);
        const cardPostalCode = elements.create('CARD_POSTAL_CODE', styles);

        cardNumber.mount('#card-number');
        cardDate.mount('#card-date');
        cardCvv.mount('#card-cvv');
        cardPostalCode.mount('#card-postal-code');

        const cardResponse = document.getElementById('card-response');
        const displayCardNumberError = document.getElementById('card-number-errors');
        const displayCardDateError = document.getElementById('card-date-errors');
        const displayCardCvvError = document.getElementById('card-cvv-errors');
        const displayCardPostalCodeError = document.getElementById('card-postal-code-errors');

        // Handle real-time validation errors from the card element
        cardNumber.addEventListener('change', function (event) {
            console.log(`cardNumber changed ${JSON.stringify(event)}`);
        });

        cardNumber.addEventListener('blur', function (event) {
            console.log(`cardNumber blur ${JSON.stringify(event)}`);
        });

        cardDate.addEventListener('change', function (event) {
            console.log(`cardDate changed ${JSON.stringify(event)}`);
        });

        cardDate.addEventListener('blur', function (event) {
            console.log(`cardDate blur ${JSON.stringify(event)}`);
        });

        cardCvv.addEventListener('change', function (event) {
            console.log(`cardCvv changed ${JSON.stringify(event)}`);
        });

        cardCvv.addEventListener('blur', function (event) {
            console.log(`cardCvv blur ${JSON.stringify(event)}`);
        });

        cardPostalCode.addEventListener('change', function (event) {
            console.log(`cardPostalCode changed ${JSON.stringify(event)}`);
        });

        cardPostalCode.addEventListener('blur', function (event) {
            console.log(`cardPostalCode blur ${JSON.stringify(event)}`);
        });

        $('#clover-form').submit(function (event) {
            event.preventDefault();
            // Use the iframe's tokenization method with the user-entered card details
            clover.createToken()
                .then(function (result) {
                    if (result.errors) {
                        Object.values(result.errors).forEach(function (value) {
                            displayCardNumberError.textContent = value;
                        });
                    } else {
                        ProcessPayment(result.token);
                    }
                });
        });
    });

    function ProcessPayment(token) {
        $.ajax({
            url: '@Url.Action("ProcessBillPayment", "DispatchResponse")',
            type: 'POST',
            data: { "sourceToken": token, "Amount": TotalCost, "Capture": true },
            success: function (jsonResult) {
                if (jsonResult.success == true) {
                    $("#cloverTransactionId").val(jsonResult.data);
                }
                $('[data-popup="popup-clover"]').fadeOut(350);
                AlertPopup("Transaction Success, Proceed with Wokorder Save");
            },
            error: function (er) {
                AlertPopup("Problem in Processing the Payment, Please contact Support !");
            }
        });
    }

        </script>
        <form id="clover-form">

            <div class="form-control" style="margin: 1em 0em; height: 50px; ">
                <div id="card-number" style="height:100%;"></div>
                <div class="input-errors" id="card-number-errors" role="alert"></div>
            </div>

            <div style="display: grid; grid-template-columns: 220px 20px auto; grid-template-rows: auto;">
                <div class="form-control" style="margin: 1em 0em; height: 50px; grid-column-start:1; grid-column-end: 2; grid-row-start: 1; grid-row-end: 3;">
                    <div id="card-date" style="height:100%;"></div>
                    <div class="input-errors" id="card-date-errors" role="alert"></div>
                </div>

                <div class="form-control" style="margin: 1em 0em; height: 50px; grid-column-start: 3; grid-column-end: 4; grid-row-start: 1; grid-row-end: 1;">
                    <div id="card-cvv" style="height:100%;"></div>
                    <div class="input-errors" id="card-cvv-errors" role="alert"></div>
                </div>

                <div class="form-control" style="margin: 1em 0em; height: 50px; grid-column-start: 5; grid-column-end: 6; grid-row-start: 1; grid-row-end: 1;">
                    <div id="card-postal-code" style="height:100%;"></div>
                    <div class="input-errors" id="card-postal-code-errors" role="alert"></div>
                </div>
            </div>
            <div id="card-response" role="alert"></div>

            <div class="button-container">
                <input type="submit" value="Submit Payment">
            </div>
        </form>


        <a class="popup-close" data-popup-close="popup-clover" href="#">x</a>
    </div>
</div>

<div class="popup" data-popup="popup-coremark-successBlock">
    <div class="popup-inner">
        <table>
            <tr>
                <td id="successAlertTxt"></td>
            </tr>
            <tr>
                <td>
                    <button type="button" class="btn btn-primary enableonclose" style="margin:1vw;" onclick="CompleteEventTrigger()">Yes</button>
                    <button data-popup-close="popup" class="btn btn-primary btn-orange enableonclose" style="margin:1vw;" onclick="HideSuccessPopup()">No</button>
                </td>
                <td></td>
            </tr>
        </table>
        <a class="popup-close" data-popup-close="popup-coremark-successBlock" href="#">x</a>
    </div>
</div>