@{
    ViewBag.Title = "WorkorderSearch";
}

@model FarmerBrothers.Models.WorkorderSearchModel

@using FarmerBrothers.Data;
@using Newtonsoft.Json;
@using Syncfusion.MVC.EJ;
@using Syncfusion.JavaScript;

<script type="text/javascript">
    var formDirty = false;

    var serverTimeZoneDiff = -7.0   // if your server is in EST time zone (UTC -5.0) (in hours)
    var clientSideTimeZoneDiff = new Date().getTimezoneOffset() / 60; // get client time zone differents and convert it to hours;
    ej.serverTimezoneOffset = clientSideTimeZoneDiff;



    function RecordClick(args)
    {
        if (args.columnName == "Print")
        {
            //window.location.href = "@Url.Action("WorkorderPdf", "Workorder")" + "?workOrderId=" + args.data["WorkorderID"];
            getPdfData(args.data["WorkorderID"], args.data["WorkorderCallstatus"]);
        }
        else if (args.columnName == "ERF ID" && args.data["WorkorderErfid"]!=null)
        {
            @*window.open('@Url.Action("ErfDetails",  "ERF")' + "/" + args.data["WorkorderErfid"], 'Erf_' + args.data["WorkorderErfid"], '');*@
            window.location.href = "@Url.Action("ErfDetails", "ERF")" + "/"+ args.data["WorkorderErfid"];
        }
        else
        {
            //alert(JSON.stringify(args.data["CustomerID"]));
            if (args.data["SearchInNonServiceWorkOrder"]==true) {
                @*window.open('@Url.Action("NonServiceEventCall", "NonServiceEvent")' + "/" + args.data["CustomerID"] + '/' + args.data["WorkorderID"]);*@
                window.location.href = "@Url.Action("NonServiceEventCall", "NonServiceEvent")" + "/" + args.data["CustomerID"] + "/" + args.data["WorkorderID"] + "/false/false";
            }
            else{
                @*window.open('@Url.Action("WorkorderManagement", "Workorder")' + "/" + args.data["CustomerID"] + '/' + args.data["WorkorderID"], 'WorkOrder_' + args.data["WorkorderID"], '');*@
                window.location.href = "@Url.Action("WorkorderManagement", "Workorder")" + "/" + args.data["CustomerID"] + "/" + args.data["WorkorderID"] + "/false/false";
            }

        }
    }

    var workorderPDFId = "", WOStatus = "";
    function getPdfData(varWorkorderID, varWOStatus) {
        $(window).scrollTop(0);
        $('body').css({'overflow-y':'hidden'});
        workorderPDFId = varWorkorderID;
        WOStatus = varWOStatus;
        $.ajax({
            method: "GET",
            datatype: 'json',
            url: "@Url.Action("WorkorderPdfData", "Workorder")",
            data: { WorkorderID: varWorkorderID },
            success: function (msg) {

            var pdfDiv = $(msg.Content);
            $("#woPdfDiv").append(pdfDiv);

            /*var element = $("#WOpdfDiv")
            var canvas = $("#WoCanvasElement")[0];
            html2canvas(element, {
                background: "#e2e2e2",
                color: "#0000",
                onrendered: function (canvas) {
                    var image = canvas.toDataURL("image/jpeg");
                    var doc = new jsPDF();
                    var width = doc.internal.pageSize.width;
                    var height = doc.internal.pageSize.height;
                    doc.addImage(image, 'JPEG', 0, 0, width, height);
                    doc.save('WorkorderFor_' + workorderPDFId + '.pdf');
                    $("#WOPdfBlock").remove();

                    $('body').css({'overflow':'auto'});
                }
            });*/
            generatePDF();
        },
        error: function (err) {
            debugger;
            $('body').css({'overflow-y':'auto'});
        }
    })
    }
    //==============================================

    function generatePDF() {
        $( '#ForWaitCursor' ).addClass( "loading" );
        var img1, img2, hratio1, hratio2;
        var imgArr = [];
        var heightRatio = [];

        var headerBlock = $(".work-order")
        var reqEqpBlock = $(".reqEquipmentBlock")
        var eqpBlock = $(".equipmentBlock")
        var CustomerSurveyBlock = $(".CustomerSurveyBlock");
        if (WOStatus == "Accepted" || WOStatus == "Accepted-Partial"
                 || WOStatus == "On Site" || WOStatus == "In Progress"
                 || WOStatus == "Completed" || WOStatus == "Closed" || WOStatus == "Invoiced")
        {
            EquipmentGridRender(eqpBlock, imgArr, heightRatio)
        }
        else
        {
            var renderCount = 0;
            if ($(".reqEqpSec").length > 0) {
                headerBlock.append($(".wrkReqHeading"));
                $(".reqEqpSec").each(function (index, element) {
                    var currentElement = element;

                    if (index == 0) {
                        currentElement = headerBlock;
                        currentElement.append(element);
                    }

                    html2canvas(currentElement, {
                        onrendered: function (canvas) {
                            var wid;
                            var hgt;
                            var img = canvas.toDataURL('image/png', wid = canvas.width, hgt = canvas.height);
                            heightRatio.push(hgt / wid);
                            imgArr.push(img);

                            renderCount++;
                            if (renderCount == $(".reqEqpSec").length) {
                                //savePDF(eqpBlock, imgArr, heightRatio);
                                //EquipmentGridRender(eqpBlock, imgArr, heightRatio)
                                var eqpImgArr = [];
                                var eqpHeightRatio = [];
                                savePDF(imgArr, heightRatio, eqpImgArr, eqpHeightRatio);
                            }
                        }
                    });
                });
            }
        }
    };


    function EquipmentGridRender(eqpBlock, imgArr, heightRatio) {
        var renderCount = 0;
        var eqpImgArr = [];
        var eqpHeightRatio = [];
        var headerBlock = $(".work-order")

        var costBlock = $(".costDetailsBlock");
        var timeBlock = $(".timeDetailsBlock");
        var CustomerSurveyBlock = $(".CustomerSurveyBlock");

        if ($(".eqpSec").length > 0) {
            //eqpBlock.append($(".closureEqpHeading"));
            headerBlock.append($(".closureEqpHeading"));
            $(".eqpSec").each(function (index, element) {
                var currentElement = element;
                //if (index == 0) {
                //    currentElement = $(".closureEqpHeading");
                //    currentElement.append(element);
                //}
                if (index == 0) {
                    currentElement = headerBlock;
                    currentElement.append(element);
                }

                if (index == $(".eqpSec").length-1)
                {
                    currentElement.append(costBlock);
                    currentElement.append(timeBlock);
                    currentElement.append($(".CustomerSignatureBlock"));
                }

                html2canvas(currentElement, {
                    onrendered: function (canvas) {
                        var wid;
                        var hgt;
                        var img = canvas.toDataURL('image/png', wid = canvas.width, hgt = canvas.height);
                        eqpHeightRatio.push(hgt / wid);
                        eqpImgArr.push(img);

                        renderCount++;
                        if (renderCount == $(".eqpSec").length) {
                            savePDF(imgArr, heightRatio, eqpImgArr, eqpHeightRatio);
                        }
                    }
                });
            });
        }
        else {
            savePDF(imgArr, heightRatio, eqpImgArr, eqpHeightRatio);
        }
    }

    function RequestedGridRenderer(imgArr, heightRatio, eqpImgArr, eqpHeightRatio)
    {
        var timeBlock = $(".timeDetailsBlock");
        var renderCount = 0;
        if ($(".reqEqpSec").length > 0) {
            //headerBlock.append($(".wrkReqHeading"));
            $(".reqEqpSec").each(function (index, element) {
                var currentElement = element;

                if (index == $(".reqEqpSec").length-1)
                {
                    //currentElement.append(costBlock);
                    //currentElement.append(timeBlock);
                }

                html2canvas(currentElement, {
                    onrendered: function (canvas) {
                        var wid;
                        var hgt;
                        var img = canvas.toDataURL('image/png', wid = canvas.width, hgt = canvas.height);
                        heightRatio.push(hgt / wid);
                        imgArr.push(img);

                        renderCount++;
                        if (renderCount == $(".reqEqpSec").length) {
                            //savePDF(eqpBlock, imgArr, heightRatio);
                            //EquipmentGridRender(eqpBlock, imgArr, heightRatio)
                            //var eqpImgArr = [];
                            //var eqpHeightRatio = [];
                            savePDF(imgArr, heightRatio, eqpImgArr, eqpHeightRatio);
                        }
                    }
                });
            });
        }
    }


    var x = 2, y = 10;
    function savePDF(imgArr, heightRatio, eqpImgArr, eqpHeightRatio) {
        var doc = new jsPDF('p', 'pt', 'a4');

        for (var im = imgArr.length - 1; im >= 0; im--) {
            if (im != imgArr.length - 1) {
                doc.addPage();
            }
            var width = doc.internal.pageSize.width;
            var height = width * heightRatio[im]; //doc.internal.pageSize.height;
            doc.addImage(imgArr[im], 'PNG', x, y, width, height, 'Image'+im, 'fast');

        }

        if (WOStatus == "Accepted" || WOStatus == "Accepted-Partial"
           || WOStatus == "On Site" || WOStatus == "In Progress"
           || WOStatus == "Completed" || WOStatus == "Closed" || WOStatus == "Invoiced") {
            for (var im = eqpImgArr.length - 1; im >= 0; im--) {
                if (im != eqpImgArr.length - 1) {
                    doc.addPage();
                }
                var width = doc.internal.pageSize.width;
                var height = width * eqpHeightRatio[im]; //doc.internal.pageSize.height;
                doc.addImage(eqpImgArr[im], 'PNG', x, y, width, height, 'Image'+im, 'fast');
            }
        }

        html2canvas($(".CustomerSurveyBlock"), {
            onrendered: function (canvas) {
                //for terms and conditions
                //WordSection1
                var wid;
                var hgt;
                var img = canvas.toDataURL('image/png', wid = canvas.width, hgt = canvas.height);
                var ratio = hgt / wid;
                //eqpHeightRatio.push(hgt / wid);
                //eqpImgArr.push(img);
                var rectX = 200, rectY = 800, rectW = 100, rectH = 8;
                doc.setFontSize(8);
                doc.setTextColor(0, 0, 255);
                doc.textWithLink('Click here for Customer Satisfaction Survey', rectX, rectY, { url: 'https://goo.gl/forms/KgvSAgobIEee3kEz2'});
                doc.link(rectX, rectY, rectW, rectH, {url: 'https://goo.gl/forms/KgvSAgobIEee3kEz2'});

                html2canvas($(".WordSection1"), {
                    onrendered: function (canvas) {
                        var wid;
                        var hgt;
                        var img = canvas.toDataURL('image/png', wid = canvas.width, hgt = canvas.height);
                        var ratio = hgt / wid;
                        //eqpHeightRatio.push(hgt / wid);
                        //eqpImgArr.push(img);

			//TODO: Uncomment once updated terms are ready
                        /*doc.addPage();
                        var width = doc.internal.pageSize.width;
                        var height = doc.internal.pageSize.height;
                        doc.addImage(img, 'PNG', x, y, width, height, 'Image', 'fast');*/

                        doc.save('WorkorderFor_' + workorderPDFId + '.pdf');

                        $("#mainBodyDiv").remove();

                        $('body').css({ 'overflow': 'auto' });
                        $( '#ForWaitCursor' ).removeClass( "loading" );
                    }
                });
            }
        });

        // end of terms and conditions

    }

    //==============================================

    function generatePDF1() {
        $( '#ForWaitCursor' ).addClass( "loading" );
        var img1, img2, hratio1, hratio2;
        var imgArr = [];
        var heightRatio = [];

        var headerBlock = $(".work-order")
        var reqEqpBlock = $(".reqEquipmentBlock")
        var eqpBlock = $(".equipmentBlock")
        if (WOStatus == "Accepted" || WOStatus == "Accepted-Partial"
                 || WOStatus == "On Site" || WOStatus == "In Progress"
                 || WOStatus == "Completed" || WOStatus == "Closed" || WOStatus == "Invoiced")
        {
            EquipmentGridRender1(eqpBlock, imgArr, heightRatio)
        }
        else
        {
            var renderCount = 0;
            if ($(".reqEqpSec").length > 0) {
                headerBlock.append($(".wrkReqHeading"));
                $(".reqEqpSec").each(function (index, element) {
                    var currentElement = element;

                    if (index == 0) {
                        currentElement = headerBlock;
                        currentElement.append(element);
                    }

                    html2canvas(currentElement, {
                        onrendered: function (canvas) {
                            var wid;
                            var hgt;
                            var img = canvas.toDataURL('image/png', wid = canvas.width, hgt = canvas.height);
                            heightRatio.push(hgt / wid);
                            imgArr.push(img);

                            renderCount++;
                            if (renderCount == $(".reqEqpSec").length) {
                                var eqpImgArr = [];
                                var eqpHeightRatio = [];
                                savePDF(imgArr, heightRatio, eqpImgArr, eqpHeightRatio);
                            }
                        }
                    });
                });
            }
        }
    };


    function EquipmentGridRender1(eqpBlock, imgArr, heightRatio) {
        var renderCount = 0;
        var eqpImgArr = [];
        var eqpHeightRatio = [];
        var headerBlock = $(".work-order")

        var costBlock = $(".costDetailsBlock");
        var timeBlock = $(".timeDetailsBlock");

        if ($(".eqpSec").length > 0) {
            headerBlock.append($(".closureEqpHeading"));
            $(".eqpSec").each(function (index, element) {
                var currentElement = element;

                if (index == 0) {
                    currentElement = headerBlock;
                    currentElement.append(element);
                }

                if (index == $(".eqpSec").length-1)
                {
                    currentElement.append(costBlock);
                    //currentElement.append(timeBlock);
                }

                html2canvas(currentElement, {
                    onrendered: function (canvas) {
                        var wid;
                        var hgt;
                        var img = canvas.toDataURL('image/png', wid = canvas.width, hgt = canvas.height);
                        eqpHeightRatio.push(hgt / wid);
                        eqpImgArr.push(img);

                        renderCount++;
                        if (renderCount == $(".eqpSec").length) {
                            savePDF1(imgArr, heightRatio, eqpImgArr, eqpHeightRatio);
                            //RequestedGridRenderer1(imgArr, heightRatio, eqpImgArr, eqpHeightRatio);
                        }
                    }
                });
            });
        }
        else {
            savePDF1(imgArr, heightRatio, eqpImgArr, eqpHeightRatio);
            //RequestedGridRenderer1(imgArr, heightRatio, eqpImgArr, eqpHeightRatio);
        }
    }

    function RequestedGridRenderer1(imgArr, heightRatio, eqpImgArr, eqpHeightRatio)
    {
        var headerBlock = $(".wrkReqHeading")
        var timeBlock = $(".timeDetailsBlock");
        var renderCount = 0;
        if ($(".reqEqpSec").length > 0) {
            //headerBlock.append($(".wrkReqHeading"));
            $(".reqEqpSec").each(function (index, element) {
                var currentElement = element;

                if (index == 0) {
                    currentElement = headerBlock;
                    currentElement.append(element);
                }

                if (index == $(".reqEqpSec").length-1)
                {
                    //currentElement.append(costBlock);
                    currentElement.append(timeBlock);
                }

                html2canvas(currentElement, {
                    onrendered: function (canvas) {
                        var wid;
                        var hgt;
                        var img = canvas.toDataURL('image/png', wid = canvas.width, hgt = canvas.height);
                        heightRatio.push(hgt / wid);
                        imgArr.push(img);

                        renderCount++;
                        if (renderCount == $(".reqEqpSec").length) {
                            //savePDF(eqpBlock, imgArr, heightRatio);
                            //EquipmentGridRender(eqpBlock, imgArr, heightRatio)
                            //var eqpImgArr = [];
                            //var eqpHeightRatio = [];
                            savePDF1(imgArr, heightRatio, eqpImgArr, eqpHeightRatio);
                        }
                    }
                });
            });
        }
    }


    function savePDF1(imgArr, heightRatio, eqpImgArr, eqpHeightRatio) {
        var doc = new jsPDF('p', 'pt', 'a4');

        if (WOStatus == "Accepted" || WOStatus == "Accepted-Partial"
            || WOStatus == "On Site" || WOStatus == "In Progress"
            || WOStatus == "Completed" || WOStatus == "Closed" || WOStatus == "Invoiced") {
            for (var im = eqpImgArr.length - 1; im >= 0; im--) {
                if (im != eqpImgArr.length - 1) {
                    doc.addPage();
                }
                var width = doc.internal.pageSize.width;
                var height = width * eqpHeightRatio[im]; //doc.internal.pageSize.height;
                doc.addImage(eqpImgArr[im], 'PNG', x, y, width, height, 'Image'+im, 'fast');
            }
        }


        var headerBlock = $(".wrkReqHeading")
        var timeBlock = $(".timeDetailsBlock");
        var renderCount = 0;
        if ($(".reqEqpSec").length > 0) {
            //headerBlock.append($(".wrkReqHeading"));
            $(".reqEqpSec").each(function (index, element) {
                var currentElement = element;

                if (index == 0) {
                    currentElement = headerBlock;
                    currentElement.append(element);
                    doc.addPage();
                }

                if (index == $(".reqEqpSec").length-1)
                {
                    //currentElement.append(costBlock);
                    currentElement.append(timeBlock);
                }

                html2canvas(currentElement, {
                    onrendered: function (canvas) {
                        var wid;
                        var hgt;
                        var img = canvas.toDataURL('image/png', wid = canvas.width, hgt = canvas.height);
                        var width = doc.internal.pageSize.width;
                        var height = width * (hgt / wid);
                        doc.addImage(img, 'PNG', x, y, width, height, 'Image'+im, 'fast');

                        renderCount++;
                        if (renderCount == $(".reqEqpSec").length) {

                            html2canvas($(".WordSection1"), {
                                onrendered: function (canvas) {
                                    var wid;
                                    var hgt;
                                    var img = canvas.toDataURL('image/png', wid = canvas.width, hgt = canvas.height);
                                    var ratio = hgt / wid;
                                    //eqpHeightRatio.push(hgt / wid);
                                    //eqpImgArr.push(img);
                                    doc.addPage();
                                    var width = doc.internal.pageSize.width;
                                    var height = doc.internal.pageSize.height;
                                    doc.addImage(img, 'PNG', x, y, width, height, 'Image', 'fast');

                                    doc.save('WorkorderFor_' + workorderPDFId + '.pdf');

                                    $("#mainBodyDiv").remove();

                                    $('body').css({ 'overflow': 'auto' });
                                    $( '#ForWaitCursor' ).removeClass( "loading" );
                                }
                            });

                        }
                    }
                });
            });
        }


       /* for (var imm = imgArr.length - 1; imm >= 0; imm--) {
            if (imm != imgArr.length - 1 || eqpImgArr.length > 0) {
                doc.addPage();
            }
            var width = doc.internal.pageSize.width;
            var height = width * heightRatio[imm]; //doc.internal.pageSize.height;
            doc.addImage(imgArr[imm], 'PNG', x, y, width, height, 'Image'+imm, 'fast')
        }

        //for terms and conditions
        //WordSection1
        html2canvas($(".WordSection1"), {
            onrendered: function (canvas) {
                var wid;
                var hgt;
                var img = canvas.toDataURL('image/png', wid = canvas.width, hgt = canvas.height);
                var ratio = hgt / wid;
                //eqpHeightRatio.push(hgt / wid);
                //eqpImgArr.push(img);
                doc.addPage();
                var width = doc.internal.pageSize.width;
                var height = doc.internal.pageSize.height;
                doc.addImage(img, 'PNG', x, y, width, height, 'Image', 'fast');

                doc.save('WorkorderFor_' + workorderPDFId + '.pdf');

                //$("#mainBodyDiv").remove();

                $('body').css({ 'overflow': 'auto' });
                $( '#ForWaitCursor' ).removeClass( "loading" );
            }
        });*/

        // end of terms and conditions

    }

    //===============================================

    function rowDataBound(args)
    {
        //if (args.data.PriorityCode != null
        //    && args.data.PriorityCode.indexOf('Critical') >= 0)
        //{
        //    args.row.css("backgroundColor", "Red");
        //}
    }

    function queryCellInfo(args)
    {
        //var gridObj = $("#WorkOrderSearchResults").data("ejGrid");
        if (args.column.field == "WorkorderID"
            || args.column.field == "WorkorderErfid") {
            args.cell.className	+= " urlStyle";
        }

        if (args.data.PriorityCode != null && args.data.PriorityCode.indexOf('Critical') >= 0) {
            args.cell.style.color = "red";
        }
        else if (args.data.PriorityCode != null &&(args.data.WorkorderCallstatus.indexOf('Open') >= 0)) {
            args.cell.style.color = "blue";
        }
        //if (args.data.WorkorderCallstatus != null
        //    && (args.data.WorkorderCallstatus.indexOf('Open') >= 0
        //    || args.data.WorkorderCallstatus.indexOf('Pending Acceptance') >= 0))
        //{
        //    args.cell.style.color = "blue";
        //}

    }

    $(document).ready(function () {

        //console.debug("at page lode = "+ej.serverTimeZoneOffset)
        $('#WorkOrderLink').css("color", "white");

      if ('@ViewBag.WOSearchResultsMessage'!="") {
          AlertPopup("| "+'@ViewBag.WOSearchResultsMessage');
        }
        $('.StatesDropDownList').ejDropDownList({
            dataSource : @Html.Raw(Json.Encode(Model.States)),
            fields: { value : "StateCode", text : "StateName" },
            showCheckbox: true,
            showRoundedCorner: true,
            watermarkText: "Please Select",
        });

        var states = "@string.Join(",", Model.State)";
        var stateList = states.split(",");

        for(var count = 0; count < stateList.length; count++ )
        {
            $('.StatesDropDownList').data("ejDropDownList").selectItemByValue(stateList[count]);
        }

        $('.WorkorderTypeDropDownList').ejDropDownList({
            dataSource : @Html.Raw(Json.Encode(Model.WorkOrderTypes)),
            fields: { value : "CallTypeID", text : "Description" },
            showCheckbox: true,
            showRoundedCorner: true,
            watermarkText: "Please Select"
        });

        var workOrderTypes = "@string.Join(",", Model.WorkorderType)";
        var workOrderLists = workOrderTypes.split(",");

        for(var count = 0; count < workOrderLists.length; count++)
        {
            $('.WorkorderTypeDropDownList').data("ejDropDownList").selectItemByValue(workOrderLists[count]);
        }

        $('.StatusDropDownList').ejDropDownList({
            dataSource : @Html.Raw(Json.Encode(Model.WorkOrderStatusList)),
            fields: { value : "FBStatus", text : "FBStatus" },
            showCheckbox: true,
            showRoundedCorner: true,
            watermarkText: "Please Select"
        }).data("ejDropDownList").selectItemByValue("," + "@string.Join(",", Model.Status)");

        var statuses = "@string.Join(",", Model.Status)";
        var statusList = statuses.split(",");

        for(var count = 0 ; count < statusList.length; count++)
        {
            $('.StatusDropDownList').data("ejDropDownList").selectItemByValue(statusList[count]);
        }

        $('.EsmDropDownList').ejDropDownList({
            dataSource : @Html.Raw(Json.Encode(Model.EsmList)),
            fields: { value : "ESMName", text : "ESMName" },
            showCheckbox: true,
            showRoundedCorner: true,
            watermarkText: "Please Select"
        }).data("ejDropDownList").selectItemByValue("," + "@string.Join(",", (Model.Esm == null ? new List<string>() :Model.Esm))");

        var esms = "@string.Join(",", (Model.Esm == null ? new List<string>() : Model.Esm)))";
        var EsmList = esms.split(",");

        for(var count = 0 ; count < EsmList.length; count++)
        {
            $('.EsmDropDownList').data("ejDropDownList").selectItemByValue(EsmList[count]);
        }


        $('.PriorityDropDownList').ejDropDownList({
            dataSource : @Html.Raw(Json.Encode(Model.PriorityList)),
            fields: { value : "FBStatusID", text : "FBStatus" },
            showCheckbox: true,
            showRoundedCorner: true,
            watermarkText: "Please Select"
        }).data("ejDropDownList").selectItemByValue("," + "@string.Join(",", Model.Priority)");

        var priorities = "@string.Join(",", Model.Priority)";
        var priorityList = priorities.split(",");

        for(var count = 0 ; count < priorityList.length; count++)
        {
            $('.PriorityDropDownList').data("ejDropDownList").selectItemByValue(priorityList[count]);
        }


        $('.TimeZoneDropDownList').ejDropDownList({
            dataSource : @Html.Raw(Json.Encode(Model.TimeZoneList)),
            fields: { value : "TimeZoneValue", text : "TimeZoneName" },
            showRoundedCorner: true,
            showCheckbox: true,
            watermarkText: "Please Select"
        }).data("ejDropDownList").selectItemByValue("," + "@string.Join(",", Model.TimeZoneName)");

        var timezones = "@string.Join(",", Model.TimeZone)";
        var timezoneList = timezones.split(",");

        for(var count = 0 ; count < timezoneList.length; count++)
        {
            $('.TimeZoneDropDownList').data("ejDropDownList").selectItemByValue(timezoneList[count]);
        }
        //Model.TimeZoneName = $("#TimeZoneName").val();


       // var date30 = new Date(new Date().setDate(new Date().getDate() - 30));
        $("#AppointmentDateTo").ejDatePicker({value: new Date($("#AppointmentDateTo").val()) });
        $("#AppointmentDateFrom").ejDatePicker({  value: new Date($("#AppointmentDateFrom").val()) });
        //$("#DateFrom").ejDatePicker({ minDate: new Date(date30),  value: new Date($("#DateFrom").val()) });
        $("#DateFrom").ejDatePicker({ value: new Date($("#DateFrom").val()) });
        $("#DateTo").ejDatePicker({ value: new Date($("#DateTo").val()) });

        $("#ClosedDate").ejDatePicker({ value: new Date($("#ClosedDate").val()) });
        $("#StartDate").ejDatePicker({ value: new Date($("#StartDate").val()) });
        $("#ArrivalDate").ejDatePicker({ value: new Date($("#ArrivalDate").val()) });
        $("#CompletedDate").ejDatePicker({ value: new Date($("#CompletedDate").val()) });

        $(".SavedSearchButton").click(function (){
            $("#SelectedSavedSearchName").val(this.id);
        });

        $(".SearchPanelControl").change(function (){
            formDirty = true;
        });

        $(".CloseButton").click(function(e){
            var array = this.id.split('-_');
            $.confirm({
                title:"Warning",
                text:"You have selected to delete Saved Search '" + array[0] +"'. Are you sure you want to delete this Saved Filter?",
                confirmButton: "Delete",
                cancelButton: "Cancel",
                confirm: function(button) {
                    $.ajax({
                        url: "@Url.Action("DeleteSavedSearch", "Workorder")",
                        data: { savedSearchName: array[0] }
                    }).done(function( msg ) {
                        $('#' + array[0] + '-_box').removeClass("box");
                        $('#' + array[0] + '-_boxclose').removeClass("boxclose");
                        $('#' + array[0]).remove();
                    });
                    location.reload();
                },
                cancel: function(button) {
                }
            });
        });

        $('#activator').click(function(){
            $('.edit_box').addClass("box");
            $('.CloseButton').addClass("boxclose");
            return false;
        });


        $('#workOrderSearchForm').submit(function (e) {

            var operation = $("#Operation").val();

            if (operation == 3 || operation == 4 || operation == 1)
            {
                //alert("1")

                if ( ValidateSearchCriteria() == true ) {
                    // alert("1.1")
                    if (formDirty == true && $("#SelectedSavedSearchName").val() != "")
                    {
                        //alert("2")
                        e.preventDefault(); //prevent default form submit
                        $.confirm({
                            title:"Warning",
                            text:"Changes have been made to this Save Fields. Do you wish to save these changes?",
                            confirmButton: "Save",
                            cancelButton: "No",
                            backgroundDismiss : false,
                            confirm: function(button) {
                                $("#Operation").val(2);
                                $('#workOrderSearchForm').unbind('submit');
                                var input = $("<input>")
                                                .attr("type", "hidden")
                                                .attr("name", "action:WorkorderSearch").val("");
                                $('#workOrderSearchForm').append($(input));
                                $('#workOrderSearchForm').submit();
                            },
                            cancel: function(button) {
                                $("#SelectedSavedSearchName").val("");
                                $('#workOrderSearchForm').unbind('submit');
                                var input = $("<input>")
                                                .attr("type", "hidden")
                                                .attr("name", "action:WorkorderSearch").val("");
                                $('#workOrderSearchForm').append($(input));
                                $('#workOrderSearchForm').submit();
                            }
                        });
                    }
                }
                else
                {
                    //alert("3")
                    e.preventDefault();
                    //alert("4")
                }
                //alert("5")
            }
        });

        $(window).on("beforeunload", function() {
            if (formDirty == true && $("#SelectedSavedSearchName").val() != "" && $("#Operation").val() != 2)
            {
                return "Changes made to Search Fields not Saved!";
            }
        });
    });

    function SetSubmitOperation(operation)
    {
        $("#Operation").val(operation);
    }

    function TechTypeChange()
    {
        $('#ServiceCenterList').empty();
        $.ajax({
            url: "@Url.Action("GetServiceCenter", "Workorder")",
            data: { TechType: $('#TechTypeList option:selected').val() }
        }).done(function( data ) {
            for (var i = 0 ; i < data.length; i++) {
                $('#ServiceCenterList').append('<option value=' + data[i].Id + '>' + data[i].Name + '</option>');
            }
        });
    }

    function ServiceCenterChange()
    {
        $('#TechnicianList').empty();
        $('#TechnicianIdList').empty();
        $('#TeamLeadList').empty();

        $.ajax({
            url: "@Url.Action("GetTechnician", "Workorder")",
            data: { serviceCenterId: $('#ServiceCenterList option:selected').val() }
        }).done(function( data ) {
            for (var i = 0 ; i < data.length; i++) {
                $('#TechnicianList').append('<option value=' + data[i].TechId + '>' + data[i].TechName + '</option>');
                $('#TechnicianIdList').append('<option value=' + data[i].TechId + '>' + data[i].TechId + '</option>');
            }
        });

        $.ajax({
            url: "@Url.Action("GetTeamLeads", "Workorder")",
            data: { serviceCenterId: $('#ServiceCenterList option:selected').val() }
        }).done(function( data ) {
            for (var i = 0 ; i < data.length; i++) {
                $('#TeamLeadList').append('<option value=' + data[i].Id + '>' + data[i].Name + '</option>');
            }
        });
    }

    function SearchClear() {
        $('.form-control').val('');
        $('#StatesDropDown').val("n/a");
        $('#Submitclear').val('true');
        $("#Operation").val(5);
        $('#workOrderSearchForm').submit();
    }

    function ValidateSearchCriteria()
    {
        //alert($('#CustomerId').val() +"|==="+  $('#ErfId').val()+"|==="+  $('#WorkorderId').val() +"|==="+  $('#WorkorderType').val() +"|==="+  $('#Status').val()
        //    +"|==="+  $('#Priority').val() +"|==="+  $('#FollowupCall').val()+"|==="+  $('#SerialNumber').val() +"|==="+  $('#OriginalWorkOrderId').val()
        //    +"|==="+  $('#OriginalWorkOrderId').val()
        //    +"|==="+  $('#State').val() +"|==="+  $('#Zipcode').val() +"|==="+  $('#AppointmentDateFrom').val() +"|==="+  $('#AppointmentDateTo').val()
        //    +"|==="+  $('#DateFrom').val()
        //    + "|===" + $('#DateTo').val() + "|===" + $('#TimeZone').val() + "|===" + $('#TechTypeList').val() + "|===" + $('#ServiceCenterList').val() +"|==="+  $('#TechId').val()
        //    +"|==="+  $('#City').val())
        var valid = true;
        if ($('#CustomerId').val() == ""
            && $('#ErfId').val() == ""
            && $('#WorkorderId').val() == ""
            && $('#WorkorderType').val() == ""
            && $('#Status').val() == ""
            && $('#Priority').val()  == ""
            && $('#FollowupCall').val()  == "603"
            && $('#SerialNumber').val() == ""
            && $('#OriginalWorkOrderId').val() == ""
            && $('#State').val() ==""
            && $('#Zipcode').val() == ""
            && $('#AppointmentDateFrom').val() == ""
            && $('#AppointmentDateTo').val() == ""
            && $('#DateFrom').val() == ""
            && $('#DateTo').val() == ""
            && $('#TimeZone').val()  == ""
            && $('#ParentAccount').val() == ""
            && $('#TechTypeList').val() == ""
            && $('#ServiceCenterList').val() == null
            && $('#TechId').val() == ""
            && $('#City').val() == ""
            && $('#Esm').val() == ""
            && $('#CustomerPO').val() == ""
            && $('#ClosedDate').val() == ""
            && $('#StartDate').val() == ""
            && $('#ArrivalDate').val() == ""
            && $('#CompletedDate').val() == "")
        {
            var operation = $("#Operation").val();
            if (operation != 4) {
                AlertPopup("|Please Select at least one Search Criteria!");
                valid = false;
            }

        }

        var from = $("#DateFrom").val();
        var to = $("#DateTo").val();
        var ndate = new Date();
        if(from != "" && to != ""){
            if(Date.parse(from) > Date.parse(to)){
                AlertPopup("| Invalid Date Range.");
                valid = false;
            }else {
                var diff1 = new Date(Date.parse(to) - Date.parse(from));
                // get days
                var days1 = diff1/1000/60/60/24;
                var DayCount1=Math.round(days1);
                if(DayCount1 >= 31){
                    AlertPopup("| Date Range Must be Below 30 Days.");
                    valid = false;
                }
            }
        }else if(from != "" && to == ""){
            var diff = new Date(Date.parse(ndate) - Date.parse(from));
            // get days
            var days = diff/1000/60/60/24;
            var DayCount=Math.round(days);
            if(DayCount >= 31){
                AlertPopup("| From Date Must be Below 30 Days From Current Date.");
                valid = false;
            }
        }

        return valid;
    }

</script>


@using (Html.BeginForm("WorkorderSearch", "Workorder", FormMethod.Post, new { id = "workOrderSearchForm" }))
{
    <section class="container-fluid white-bg pad">
        <div class="row top-info">
            <div class="col-xs-12 col-sm-4 col-md-3">
                <b>Work Order Search</b>
            </div>
        </div>
    </section>

    <section class="well">
        <div class="row top-info">
            <div class="customer-content margin-top">
                <div class="row customer clear-input">
                    <div class="col-lg-12">
                        <div class="col-md-2">
                            <div class="form-group">
                                Account Number:
                                @Html.TextBoxFor(c => c.CustomerId, new { @class = "form-control SearchPanelControl", @type = "number" })
                                @*@Html.EJ().MaskEditTextBoxFor(m => m.CustomerId).WatermarkText("Enter phone no").MaskFormat("(999)999-9999")*@
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="form-group">
                                ERF ID:
                                @Html.TextBoxFor(c => c.ErfId, new { @class = "form-control SearchPanelControl", @type = "number" })
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="form-group">
                                Work Order ID:
                                @Html.TextBoxFor(c => c.WorkorderId, new { @class = "form-control SearchPanelControl", @type = "number" })
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="form-group">
                                Status:
                                @Html.TextBoxFor(c => c.Status, new { @class = "form-control SearchPanelControl StatusDropDownList" })
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="form-group right-inner-addon">
                                Date From:
                                @Html.TextBoxFor(c => c.DateFrom, new { @class = "form-control SearchPanelControl", @Id = "DateFrom" })
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="form-group right-inner-addon">
                                Date To:
                                @Html.TextBoxFor(c => c.DateTo, new { @class = "form-control SearchPanelControl", @Id = "DateTo" })
                            </div>
                        </div>

                        <div class="col-md-2">
                            <div class="form-group">
                                Service Code:
                                @Html.TextBoxFor(c => c.WorkorderType, new { @class = "form-control SearchPanelControl WorkorderTypeDropDownList" })
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="form-group">
                                Serial Number:
                                @Html.TextBoxFor(c => c.SerialNumber, new { @class = "form-control SearchPanelControl" })
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="form-group">
                                Original Work Order ID:
                                @Html.TextBoxFor(c => c.OriginalWorkOrderId, new { @class = "form-control SearchPanelControl" })
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="form-group">
                                City:
                                @Html.TextBoxFor(c => c.City, new { @class = "form-control SearchPanelControl" })
                            </div>
                        </div>

                        <div class="col-md-2">
                            <div class="form-group">
                                State:
                                @Html.TextBoxFor(c => c.State, new { @class = "form-control SearchPanelControl StatesDropDownList" })
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="form-group">
                                Zip Code:
                                @Html.TextBoxFor(c => c.Zipcode, new { @class = "form-control SearchPanelControl" })
                            </div>
                        </div>

                        <div class="col-md-2">
                            <div class="form-group">
                                Priority:
                                @Html.TextBoxFor(c => c.Priority, new { @class = "form-control SearchPanelControl PriorityDropDownList" })
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="form-group">
                                Follow-up Call:
                                @Html.DropDownListFor(c => c.FollowupCall, new SelectList(Model.FollowUpCallList, "FBStatusID", "FBStatus", "None"), new { @class = "form-control SearchPanelControl" })
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="form-group right-inner-addon">
                                Appt. Date From:
                                @Html.TextBoxFor(c => c.AppointmentDateFrom, new { @class = "form-control SearchPanelControl", @Id = "AppointmentDateFrom" })
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="form-group right-inner-addon">
                                Appt. Date To:
                                @Html.TextBoxFor(c => c.AppointmentDateTo, new { @class = "form-control SearchPanelControl", @Id = "AppointmentDateTo" })
                            </div>
                        </div>


                        <div class="col-md-2">
                            <div class="form-group right-inner-addon">
                                Time Zone:
                                @*@Html.DropDownListFor(w => w.timeZoneModel.TimeZoneName, new SelectList(Model.timeZoneModel.TimeZones, "TimeZoneValue", "TimeZoneName", Model.TimeZone.TimeZoneName), new { @class = "form-control WorkOrderFields" })*@
                                @Html.TextBoxFor(c => c.TimeZone, new { @class = "form-control SearchPanelControl TimeZoneDropDownList" })
                            </div>
                        </div>

                        <div class="col-md-2">
                            <div class="form-group right-inner-addon">
                                Parent Number:
                                @Html.TextBoxFor(c => c.ParentAccount, new { @class = "form-control SearchPanelControl", @type = "number" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-12">
                        <div class="col-md-2">
                            <div class="form-group">
                                Tech Type:
                                @Html.DropDownListFor(c => c.TechType, new SelectList(Model.TechTypeList), new { @class = "form-control SearchPanelControl", @Id = "TechTypeList", onchange = "TechTypeChange(this)" })
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="form-group">
                                Service Center /Technician:
                                @Html.DropDownListFor(c => c.ServiceCompany, new SelectList(Model.ServiceCenterList, "Id", "Name"), new { @class = "form-control SearchPanelControl", @Id = "ServiceCenterList", onchange = "ServiceCenterChange(this)" })
                            </div>
                        </div>
                        @*<div class="col-sm-6-o">
                            <span class="col-md-5">Technician:</span>
                            <div class="col-md-7">
                            <div class="form-group">
                            @Html.DropDownListFor(c => c.Technician, new SelectList(Model.TechniciansList, "TechId", "TechName"), new { @class = "form-control SearchPanelControl", @Id = "TechnicianList" })
                            </div>
                            </div>
                            </div>*@
                        <div class="col-md-2">
                            <div class="form-group">
                                Tech ID:
                                @*@Html.DropDownListFor(c => c.TechId, new SelectList(Model.TechnicianIds, "TechId", "TechId"), new { @class = "form-control SearchPanelControl", @Id = "TechnicianIdList" })*@
                                @*//LG : As per RAM changed from dropdown to Textbox*@
                                @Html.TextBoxFor(c => c.TechId, new { @class = "form-control SearchPanelControl", @type = "number" })
                            </div>
                        </div>

                        <div class="col-md-2">
                            <div class="form-group">
                                ESM:
                                @Html.TextBoxFor(c => c.Esm, new { @class = "form-control SearchPanelControl EsmDropDownList" })
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="form-group">
                                Customer PO:
                                @Html.TextBoxFor(c => c.CustomerPO, new { @class = "form-control SearchPanelControl" })
                            </div>
                        </div>
                        @*</div>
                            <div class="col-md-12">
                                <div class="col-md-8">
                                    <div class="form-group">
                                        &nbsp;
                                    </div>
                                </div>*@
                        
                        <!--<div class="col-md-2">
                        <fieldset class="form-group">-->
                        @*<legend>Non Service Work Order</legend>*@
                        <!--<div class="form-group">
                                    <h5>Customer Service Work Order: @Html.CheckBoxFor(m => m.SearchInNonServiceWorkOrder, new { @class = "NoPartsNeeded NonSurveyPanel" })</h5>

                                </div>
                            </fieldset>
                        </div>-->

                    </div>

                    <div class="col-md-12">
                        <div class="col-md-2">
                            <div class="form-group right-inner-addon">
                                Closed Date:
                                @Html.TextBoxFor(c => c.ClosedDate, new { @class = "form-control SearchPanelControl", @Id = "ClosedDate" })
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="form-group right-inner-addon">
                                Start Date Time:
                                @Html.TextBoxFor(c => c.StartDate, new { @class = "form-control SearchPanelControl", @Id = "StartDate" })
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="form-group right-inner-addon">
                                Arrival Date Time:
                                @Html.TextBoxFor(c => c.ArrivalDate, new { @class = "form-control SearchPanelControl", @Id = "ArrivalDate" })
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="form-group right-inner-addon">
                                Completed Date Time:
                                @Html.TextBoxFor(c => c.CompletedDate, new { @class = "form-control SearchPanelControl", @Id = "CompletedDate" })
                            </div>
                        </div>

                        <div class="col-md-2">
                            <div class="form-group right-inner-addon" style="margin-top: 19px;">
                                <button type="submit" class="btn btn-primary" onclick="SetSubmitOperation(1);" name="action:WorkorderSearch">Search</button>
                                <a href="@Url.Action("WorkorderSearch", "Workorder")" style="margin-left:10px;" class="btn btn-orange">Clear</a>
                                <h5>Customer Service Work Order: @Html.CheckBoxFor(m => m.SearchInNonServiceWorkOrder, new { @class = "NoPartsNeeded NonSurveyPanel" })</h5>
                            </div>

                        </div>
                    </div>

                    <div class="col-md-12">
                        <div class="col-md-12 customer">
                            @*<div class="col-md-8">
                                    <div class="form-group">
                                        &nbsp;
                                    </div>
                                </div>*@
                            <div class="col-md-2">
                                <div class="form-group">
                                    @Html.TextBoxFor(c => c.SavedSearchName, new { @class = "form-control SearchPanelControl" })
                                    @Html.ValidationMessageFor(c => c.SavedSearchName)
                                </div>
                            </div>
                            <div class="col-md-2">
                                <div class="form-group">
                                    @if (string.IsNullOrWhiteSpace(Model.SelectedSavedSearchName))
                                    {
                                        <button type="submit" class="btn btn-primary" onclick="SetSubmitOperation(0);" name="action:WorkorderSearch">Save Search</button>
                                    }
                                    else
                                    {
                                        <button type="submit" style="display: inline-block;margin-right:5px;" class="btn btn-primary" onclick="SetSubmitOperation(2);" name="action:WorkorderSearch">Update</button>
                                        <button class="btn btn-primary" style="display: inline-block;margin-right:5px;" name="action:WorkorderSearch" onclick="SetSubmitOperation(3);" id="SavedSearchUpdateCancel">Cancel</button>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
    </section>

    @Html.HiddenFor(c => c.Operation)
    @Html.HiddenFor(c => c.SelectedSavedSearchName)

    <section class="container-fluid white-bg pad">
        <div class="row top-info">
            <div class="col-xs-12 col-sm-12 col-md-12">
                <b>Saved Search Criteria</b>
                @if (Model.SavedSearches.Count > 0)
                {

                    <a href="#" id="activator">Delete Saved Search</a>

                }
            </div>
            <div class="col-xs-12 col-sm-12 col-md-12">
                @foreach (var item in Model.SavedSearches)
                {
                    <div style="display: inline-block;margin-right:5px;">
                        <div id="@string.Concat(item.SavedSearchName, "-_box")" class="edit_box">
                            <a id="@string.Concat(item.SavedSearchName, "-_boxclose")" class="CloseButton"></a>
                            <button type="submit" class="btn btn-primary SavedSearchButton" id="@item.SavedSearchName" onclick="SetSubmitOperation(4);" name="action:WorkorderSearch">@item.SavedSearchName</button>
                        </div>
                    </div>
                }
            </div>
        </div>
    </section>
}

@Html.HiddenFor(m => m.UtcOffset)

<section class="block margin-top">
    <div class="container-fluid">
        <div class="row top-info">
            <div class="col-xs-12 col-sm-4 col-md-3">
                <b>Search Results</b>
            </div>
        </div>
        <div class="row">
            <div class="col-xs-12 col-sm-12 col-md-12">
                @{
                    if ((int)System.Web.HttpContext.Current.Session["CanExportSessionValue"] == 1)
                    {
                        if (Model.SearchInNonServiceWorkOrder == true)
                        {
                            <table id="WorkOrderSearchResults" class="display" cellspacing="0" width="100%">
                                <tr>
                                    <td>
                                        @(Html.EJ().Grid<object>
                            ("WorkOrderSearchResults")
                            .Datasource((IEnumerable<object>)Model.SearchResults)

                            .AllowPaging()
                            .AllowScrolling()
                            .AllowSorting()
                            .AllowTextWrap(true)
                            .PageSettings(Page => Page.PageSize(25))
                            .IsResponsive(true)
                            .EnableResponsiveRow(true)
                            .Mappers(map => map.ExportToExcelAction(Url.Action("ExcelExportWorkorderSearchResults", "Workorder")))
                            .ToolbarSettings(toolbar =>
                            {
                                toolbar.ShowToolbar().ToolbarItems(items =>
                                {
                                    items.AddTool(ToolBarItems.ExcelExport);
                                });
                            })
                            .ClientSideEvents(eve => { eve.RowDataBound("rowDataBound").RecordClick("RecordClick").QueryCellInfo("queryCellInfo"); })
                            .Columns(col =>
                            {
                                col.Field("WorkorderID").HeaderText("Work Order ID").Width(100).Add();
                                col.Field("WorkorderEntryDate").HeaderText("Work Order Date/Time").Width(150).Add();
                                col.Field("ElapsedTime").HeaderText("Mod. Elapsed Time").Width(80).Add();
                                col.Field("CustomerName").HeaderText("Customer").Width(100).Add();
                                col.Field("CustomerCity").HeaderText("City").Width(100).Add();
                                col.Field("CustomerState").HeaderText("State").Width(70).Add();
                                col.Field("CustomerZipCode").HeaderText("Zip").Width(70).Add();
                                col.Field("CustomerID").HeaderText("Customer ID").Visible(false).Add();
                                col.Field("SearchInNonServiceWorkOrder").Width(100).Visible(false).Add();
                            }))
                                    </td>
                                </tr>
                            </table>
                        }
                        else
                        {
                            <table id="WorkOrderSearchResults" class="display" cellspacing="0" width="100%">
                                <tr>
                                    <td>
                                        @(Html.EJ().Grid<object>
                            ("WorkOrderSearchResults")
                            .Datasource((IEnumerable<object>)Model.SearchResults)

                            .AllowPaging()
                            .AllowScrolling()
                            .AllowSorting()
                            .AllowTextWrap(true)
                            .PageSettings(Page => Page.PageSize(25))
                            .IsResponsive(true)
                            .EnableResponsiveRow(true)
                            .Mappers(map => map.ExportToExcelAction(Url.Action("ExcelExportWorkorderSearchResults", "Workorder")))
                            .ToolbarSettings(toolbar =>
                            {
                                toolbar.ShowToolbar().ToolbarItems(items =>
                                {
                                    items.AddTool(ToolBarItems.ExcelExport);
                                });
                            })
                            .ClientSideEvents(eve => { eve.RowDataBound("rowDataBound").RecordClick("RecordClick").QueryCellInfo("queryCellInfo"); })
                            .Columns(col =>
                            {
                                col.HeaderText("Print").Commands(command =>
                                {
                                    command.Type(UnboundType.Edit)
                                    .ButtonOptions(new Syncfusion.JavaScript.Models.ButtonProperties()
                                    {
                                        ContentType = Syncfusion.JavaScript.ContentType.ImageOnly,
                                        PrefixIcon = "e-icon e-pdf"
                                    }).Add();
                                }).IsUnbound(true).Width(80).Add();
                                col.Field("WorkorderID").HeaderText("Work Order ID").Width(100).Add();
                                //col.Field("WorkorderErfid").HeaderText("ERF ID").Width(80).Add();
                                col.Field("WorkorderCalltypeDesc").HeaderText("Service Code").Width(100).Add();
                                col.Field("WorkorderCallstatus").HeaderText("Work Order Status").Width(100).Add();
                                col.Field("PriorityCode").HeaderText("Priority").Width(100).Add();
                                col.Field("ServiceTier").HeaderText("Customer Tier").Width(100).Add();
                                col.Field("WorkorderEntryDate").HeaderText("Work Order Date/Time").Width(150).Add();
                                col.Field("ElapsedTime").HeaderText("Mod. Elapsed Time").Width(80).Add();
                                col.Field("AppointmentDate").HeaderText("Appointment Date").Width(100).Add();
                                col.Field("CustomerName").HeaderText("Customer").Width(100).Add();
                                col.Field("CustomerCity").HeaderText("City").Width(100).Add();
                                col.Field("CustomerState").HeaderText("State").Width(70).Add();
                                col.Field("CustomerZipCode").HeaderText("Zip").Width(70).Add();
                                col.Field("CustomerID").HeaderText("Customer ID").Visible(false).Add();
                                col.Field("CustomerPO").HeaderText("Customer PO").Width(100).Add();
                                col.Field("NTE").HeaderText("NTE").Width(100).Add();
                                col.Field("AssignedTech").HeaderText("Assigned Tech").Width(100).Add();
                                col.Field("TechPhone").HeaderText("Tech Phone").Width(100).Add();
                                col.Field("TechBranch").HeaderText("Tech Branch").Width(100).Add();
                                //col.Field("FSMName").HeaderText("FSM Name").Width(100).Add();
                                //col.Field("FSMPhone").HeaderText("FSM Phone").Width(100).Add();
                                //col.Field("OriginalMarsWorkOrderId").HeaderText("Orig MARS Work Order ID").Width(120).Add();
                                //col.Field("ParentWorkOrderId").HeaderText("Parent Work Order ID").Width(100).Add();
                                //col.Field("SpawnReason").HeaderText("Spawn Reason").Width(100).Add();
                                col.Field("AcceptElapsedTime").HeaderText("Accepted Elapsed Time (HH:MM:SS)").Width(100).Add();
                                col.Field("DispatchElapsedTime").HeaderText("Dispatched Elapsed Time (HH:MM:SS)").Width(100).Add();
                                col.Field("SearchInNonServiceWorkOrder").Width(100).Visible(false).Add();
                            }))
                                    </td>
                                </tr>
                            </table>
                        }
                    }
                    else
                    {

                        if (Model.SearchInNonServiceWorkOrder == true)
                        {
                            <table id="WorkOrderSearchResults" class="display" cellspacing="0" width="100%">
                                <tr>
                                    <td>
                                        @(Html.EJ().Grid<object>
                            ("WorkOrderSearchResults")
                            .Datasource((IEnumerable<object>)Model.SearchResults)

                            .AllowPaging()
                            .AllowScrolling()
                            .AllowSorting()
                            .AllowTextWrap(true)
                            .PageSettings(Page => Page.PageSize(25))
                            .IsResponsive(true)
                            .EnableResponsiveRow(true)
                            .ClientSideEvents(eve => { eve.RowDataBound("rowDataBound").RecordClick("RecordClick").QueryCellInfo("queryCellInfo"); })
                            .Columns(col =>
                            {
                                col.Field("WorkorderID").HeaderText("Work Order ID").Width(100).Add();

                                col.Field("WorkorderEntryDate").HeaderText("Work Order Date/Time").Width(150).Add();
                                col.Field("ElapsedTime").HeaderText("Mod. Elapsed Time").Width(80).Add();
                                col.Field("CustomerName").HeaderText("Customer").Width(100).Add();
                                col.Field("CustomerCity").HeaderText("City").Width(100).Add();
                                col.Field("CustomerState").HeaderText("State").Width(70).Add();
                                col.Field("CustomerZipCode").HeaderText("Zip").Width(70).Add();
                                col.Field("CustomerID").HeaderText("Customer ID").Visible(false).Add();
                                col.Field("SearchInNonServiceWorkOrder").Width(100).Visible(false).Add();
                            }))
                                    </td>
                                </tr>
                            </table>
                        }
                        else
                        {
                            <table id="WorkOrderSearchResults" class="display" cellspacing="0" width="100%">
                                <tr>
                                    <td>
                                        @(Html.EJ().Grid<object>
                            ("WorkOrderSearchResults")
                            .Datasource((IEnumerable<object>)Model.SearchResults)

                            .AllowPaging()
                            .AllowScrolling()
                            .AllowSorting()
                            .AllowTextWrap(true)
                            .PageSettings(Page => Page.PageSize(25))
                            .IsResponsive(true)
                            .EnableResponsiveRow(true)
                            .ClientSideEvents(eve => { eve.RowDataBound("rowDataBound").RecordClick("RecordClick").QueryCellInfo("queryCellInfo"); })
                            .Columns(col =>
                            {
                                col.Field("WorkorderID").HeaderText("Work Order ID").Width(100).Add();
                                //col.Field("WorkorderErfid").HeaderText("ERF ID").Width(80).Add();
                                col.Field("WorkorderCalltypeDesc").HeaderText("Service Code").Width(100).Add();
                                col.Field("WorkorderCallstatus").HeaderText("Work Order Status").Width(100).Add();
                                col.Field("PriorityCode").HeaderText("Priority").Width(100).Add();
                                col.Field("ServiceTier").HeaderText("Customer Tier").Width(100).Add();
                                col.Field("WorkorderEntryDate").HeaderText("Work Order Date/Time").Width(150).Add();
                                col.Field("ElapsedTime").HeaderText("Mod. Elapsed Time").Width(80).Add();
                                col.Field("AppointmentDate").HeaderText("Appointment Date").Width(100).Add();
                                col.Field("CustomerName").HeaderText("Customer").Width(100).Add();
                                col.Field("CustomerCity").HeaderText("City").Width(100).Add();
                                col.Field("CustomerState").HeaderText("State").Width(70).Add();
                                col.Field("CustomerZipCode").HeaderText("Zip").Width(70).Add();
                                col.Field("CustomerID").HeaderText("Customer ID").Visible(false).Add();
                                col.Field("CustomerPO").HeaderText("Customer PO").Width(100).Add();
                                col.Field("NTE").HeaderText("NTE").Width(100).Add();
                                col.Field("AssignedTech").HeaderText("Assigned Tech").Width(100).Add();
                                col.Field("TechPhone").HeaderText("Tech Phone").Width(100).Add();
                                col.Field("TechBranch").HeaderText("Tech Branch").Width(100).Add();
                                //col.Field("FSMName").HeaderText("FSM Name").Width(100).Add();
                                //col.Field("FSMPhone").HeaderText("FSM Phone").Width(100).Add();
                                //col.Field("OriginalMarsWorkOrderId").HeaderText("Orig MARS Work Order ID").Width(120).Add();
                                //col.Field("ParentWorkOrderId").HeaderText("Parent Work Order ID").Width(100).Add();
                                //col.Field("SpawnReason").HeaderText("Spawn Reason").Width(100).Add();
                                col.Field("AcceptElapsedTime").HeaderText("Accepted Elapsed Time (HH:MM:SS)").Width(100).Add();
                                col.Field("DispatchElapsedTime").HeaderText("Dispatched Elapsed Time (HH:MM:SS)").Width(100).Add();
                                col.Field("SearchInNonServiceWorkOrder").Width(100).Visible(false).Add();
                            }))
                                    </td>
                                </tr>
                            </table>
                        }

                    }
                }

            </div>

        </div>
    </div>
</section>

<div id="woPdfDiv" @*style="display:none;"*@>
    <canvas id="WoCanvasElement" style="border:2px solid black;display:none" width="200" height="200"></canvas>

</div>