@{
    ViewBag.Title = "ERF Create";
}

@model FarmerBrothers.Models.ErfModel


@using FarmerBrothers.Data;
@using Newtonsoft.Json;
@using Syncfusion.MVC.EJ;
@using Syncfusion.JavaScript;
@using FarmerBrothers.Models;
<script src="~/Content/jquery.validate.min.js"></script>
<script src="~/Content/jquery.validate.unobtrusive.min.js"></script>



<script type="text/javascript">
    var saveErfOperation = false;
    var updateUrl = null;

    $( document ).ready( function ()
    {

        //if ( $( "#ErfAssetsModel_Erf_Phone" ).length )
        //{
        //    $( '#ErfAssetsModel_Erf_Phone' ).keypress( function ()
        //    {
        //        return this.value.length < 10
        //    } )
        //}

        if ( $( "#ERFFormDate" ).val() != null && $( "#ERFFormDate" ).val() != "" )
        {
            $( "#ERFFormDate" ).ejDatePicker( { value: new Date( $( "#ERFFormDate" ).val() ), dateFormat: "MM/dd/yyyy", minDate: new Date() } );
        }
        else
        {
            $( "#ERFFormDate" ).ejDatePicker( { minDate: new Date(), dateFormat: "MM/dd/yyyy" } );
        }


        if ( $( "#ERFDateRecived" ).val() != null && $( "#ERFDateRecived" ).val() != "" )
        {
            $( "#ERFDateRecived" ).ejDatePicker( { value: new Date( $( "#ERFDateRecived" ).val() ), dateFormat: "MM/dd/yyyy"} );
        }
        else
        {
            $( "#ERFDateRecived" ).ejDatePicker( { dateFormat: "MM/dd/yyyy" } );
        }

        if ( $( "#ERFDateProcessed" ).val() != null && $( "#ERFDateProcessed" ).val() != "" )
        {
            $( "#ERFDateProcessed" ).ejDatePicker( { value: new Date( $( "#ERFDateProcessed" ).val() ), dateFormat: "MM/dd/yyyy", minDate: new Date() } );
        }
        else
        {
            $( "#ERFDateProcessed" ).ejDatePicker( { minDate: new Date(), dateFormat: "MM/dd/yyyy" } );
        }

        if ( $( "#ERFRequestDate" ).val() != null && $( "#ERFRequestDate" ).val() != "" )
        {
            $( "#ERFRequestDate" ).ejDatePicker( { value: new Date( $( "#ERFRequestDate" ).val() ), dateFormat: "MM/dd/yyyy", minDate: new Date() } );
        }
        else
        {
            $( "#ERFRequestDate" ).ejDatePicker( { minDate: new Date(), dateFormat: "MM/dd/yyyy" } );
        }


        $( "#ErfLink" ).css( "color", "white" );

        $( "form" ).submit( function ( event )
        {

            //if ( $( "#ErfAssetsModel_Erf_Phone" ).length )
            //{

            //    if ( !( ( $( '#ErfAssetsModel_Erf_Phone' ).val() != '' && ValidatePhoneNumber( $( '#ErfAssetsModel_Erf_Phone' ).val() ) == true ) ||
            //           $( '#ErfAssetsModel_Erf_Phone' ).val() == '' ) )
            //    {
            //        event.preventDefault();
            //        return false;
            //    }

            //}
            //else
            //{
            //}

            var operation = $( "#Operation" ).val();

            var dateFromValue = $( "#ERFFormDate" ).val();
            var dateRecived = $( "#ERFDateRecived" ).val();
            var dateProcessed = $( "#ERFDateProcessed" ).val();
            var requestDate = $( "#ERFRequestDate" ).val();


            var notesItems = [];

            $.each( newNotesArray, function ( index, value )
            {
                var item = { Text: value, Value: -1 };
                notesItems.push( item );
            } );


            if ( $( "#FBERFEquipmentDetailsHidden" ).length )
            {
                $( "#FBERFEquipmentDetailsHidden" ).val( JSON.stringify( $( "#FBERFEquipmentDetails" ).ejGrid( "instance" ).model.dataSource.dataSource.json ) );
            }
            else
            {
                var input3 = $( "<input id='FBERFEquipmentDetailsHidden'>" )
                    .attr( "type", "hidden" )
                    .attr( "name", "FBERFEquipmentDetailsHidden" ).val( JSON.stringify( $( "#FBERFEquipmentDetails" ).ejGrid( "instance" ).model.dataSource.dataSource.json ) );
                $( this ).append( $( input3 ) );
            }

            if ( $( "#FBERFExpendableDetailsHidden" ).length )
            {
                $( "#FBERFExpendableDetailsHidden" ).val( JSON.stringify( $( "#FBERFExpendableDetails" ).ejGrid( "instance" ).model.dataSource.dataSource.json ) );
            }
            else
            {
                var input3 = $( "<input id='FBERFExpendableDetailsHidden'>" )
                    .attr( "type", "hidden" )
                    .attr( "name", "FBERFExpendableDetailsHidden" ).val( JSON.stringify( $( "#FBERFExpendableDetails" ).ejGrid( "instance" ).model.dataSource.dataSource.json ) );
                $( this ).append( $( input3 ) );
            }

            //if ($("#FBERFPOSDetailsHidden").length) {
            //    $("#FBERFPOSDetailsHidden").val(JSON.stringify($("#FBERFPOSDetails").ejGrid("instance").model.dataSource.dataSource.json));
            //}
            //else {
            //    var input3 = $("<input id='FBERFPOSDetailsHidden'>")
            //        .attr("type", "hidden")
            //        .attr("name", "FBERFPOSDetailsHidden").val(JSON.stringify($("#FBERFPOSDetails").ejGrid("instance").model.dataSource.dataSource.json));
            //    $(this).append($(input3));
            //}


            if ( $( "#ERFNotesHidden" ).length )
            {
                $( "#ERFNotesHidden" ).val( JSON.stringify( notesItems ) );
            }
            else
            {
                var input5 = $( "<input id='ERFNotesHidden'>" )
                        .attr( "type", "hidden" )
                        .attr( "name", "ERFNotesHidden" ).val( JSON.stringify( notesItems ) );
                $( this ).append( $( input5 ) );
            }




            if ( operation == 2 )
            {
                //alert( operation );
                if (validateData())//dateFromValue.length > 0 && dateRecived.length > 0 && dateProcessed.length > 0 && requestDate.length > 0 )
                {
                    //alert( operation );
                    //if ( ( ( $( "#FBERFEquipmentDetails" ).ejGrid( "instance" ) != null
                    //   && $( "#FBERFEquipmentDetails" ).ejGrid( "instance" ).model.dataSource.dataSource.json != null
                    //   && $( "#FBERFEquipmentDetails" ).ejGrid( "instance" ).model.dataSource.dataSource.json.length != 0 ) ||
                    //    ( $( "#FBERFExpendableDetails" ).ejGrid( "instance" ) != null
                    //   && $( "#FBERFExpendableDetails" ).ejGrid( "instance" ).model.dataSource.dataSource.json != null
                    //   && $( "#FBERFExpendableDetails" ).ejGrid( "instance" ).model.dataSource.dataSource.json.length != 0 ) ) )
                    //{
                        //alert( operation );
                        if ( saveErfOperation == true )
                        {
                            //alert( operation );
                            var input = $( "<input>" )
                                .attr( "type", "hidden" )
                                .attr( "name", "action:ErfSave" ).val( "" );
                            $( this ).append( $( input ) );

                            if (ValidateERFModel()) {
                                $(".btnERFSave").hide();
                                var $this = $(this);
                                var frmValues = $this.serialize();
                                $.ajax({
                                    type: $this.attr('method'),
                                    url: "@Url.Action("SaveErf", HttpContext.Current.Request.RequestContext.RouteData.Values["controller"].ToString())",
                                    data: frmValues
                                }).done(function (response) {
                                    if (response != null && response.success == true) {
                                        if (response.returnValue > 0) {
                                            if (operation == 2) {
                                                AlertPopup(response.message);
                                            }


                                            updateUrl = response.Url;
                                        }
                                        else {
                                            AlertPopup(response.message);
                                        }
                                        $(".btnERFSave").show();
                                    }
                                    else {
                                        $(".btnERFSave").show();
                                        AlertPopup('|There is a problem in ERF Create! Please contact support!');
                                    }
                                });
                            }
                            saveErfOperation = false;
                        }
                    //}
                    //else
                    //{
                    //    AlertPopup( '|Please add minimum one Equipment or Expendable to processed !' );
                    //}


                }
                else
                {
                    //AlertPopup( '|Please Enter Required Dates to processed !' );
                    AlertPopup('|Please Enter Required Fields !');
                }
            }
            event.preventDefault();
        } );

        $( ".work-requested-details-head" ).trigger( "click" );
        $(".notes-details-head").trigger("click");
        $( ".equipment - head" ).trigger( "click" );
        $(".expandible - head").trigger("click");

        $( "[data-popup-close='popupalert']" ).click( function ()
        {
            if ( updateUrl != null )
            {
                window.location.href = updateUrl;
            }
        });

        $("#accessOnlyWO").on("change", function () {
            if (this.checked) {
                //$("#OrderTypeList").prop("disabled", false);
                //$("#BranchList").prop("disabled", false);
            }
            else
            {
                //$("#OrderTypeList").prop("disabled", true);
                //$("#BranchList").prop("disabled", true)
            }
        })

        $("#EqpValidationList").change(function () {
            $.ajax({
                url: "@Url.Action("GetContingentDetails", "ERFNew")",
                data: { contingentId: $('#EqpValidationList option:selected').val() },
                success: function (Result) {

                }
            });
        });


        $("#TotalNSV").on("keyup", function (e) {
            var EqpTotal = 0;
            $.each($("#FBERFEquipmentDetails").ejGrid("instance").model.dataSource.dataSource.json, function (index, value) {
                if (value.TransactionType.toLowerCase() == "loan") {
                    EqpTotal = Number(EqpTotal) + Number(value.TotalCost);
                }
            });

            var TotalNVS_Value = $(this).val();
            var Current_NSV = $('#CurrentNSV').val();
            var CurrentEqpTotal = $('#CurrentEquipmentTotal').val();

            var status = "";
            var nsvCalculatedVal = Number(Current_NSV) + Number(TotalNVS_Value) * (.333);
            var eqpCalculatedVal = Number(CurrentEqpTotal) + Number(EqpTotal);

            if (Number(nsvCalculatedVal) > Number(eqpCalculatedVal)) {
                status = "Approved For Processing";
            }
            else {
                status = "Not Financially Qualified– Seek Approval";
            }

            $("#ApprovalStatus").val(status);
            $("#approvalStus").html(status);
        });

        $("#TotalNSV").on("keypress", function (evt) {
            var charCode = (evt.which) ? evt.which : event.keyCode
            if (charCode != 46 && charCode > 31 && (charCode < 48 || charCode > 57))
                return false;

            return true;
        });
    } );



    function SetErfSaveOperation( operation )
    {
        saveErfOperation = true;
        $( "#Operation" ).val( operation );
    }


    function FBERFEquipmentDetailsBegin( args )
    {
        $( '#FBERFEquipmentDetails_WaitingPopup' ).css( "visibility", "hidden" );
    }
    function FBERFEquipmentDetailsEndEdit( args )
    {
        $('#FBERFEquipmentDetails_WaitingPopup').css("visibility", "hidden");
        $("#FBERFEquipmentDetailsQuantity").off("keyup", FBERFEQPQuantityChange);
    }
    function FBERFEquipmentDetailsEndAdd( args )
    {
        var EqpTotal = 0;
        $.each( $("#FBERFEquipmentDetails").ejGrid("instance").model.dataSource.dataSource.json,  function (index, value) {
            if (value.TransactionType.toLowerCase() == "loan")
            {
                //var tmpVal = $("#AdditionalEquipmentTotal").val();
                EqpTotal = Number(EqpTotal) + Number(value.TotalCost);
            }
        });

        $("#AdditionalEquipmentTotal").val(EqpTotal);
        $("#additionalTot").html("$" + EqpTotal.toFixed(2));

        var TotalNVS_Value = $('#TotalNSV').val();
        var Current_NSV = $('#CurrentNSV').val();
        var CurrentEqpTotal = $('#CurrentEquipmentTotal').val();
        //nsv * .333 > currentEqp + AdditionalEqp = Approved For Processing
        var status = "";
        var nsvCalculatedVal = Number(Current_NSV) + Number(TotalNVS_Value) * (.333);
        var eqpCalculatedVal = Number(CurrentEqpTotal) + Number(EqpTotal);

        if (Number(nsvCalculatedVal) > Number(eqpCalculatedVal))
        {
            status = "Approved For Processing";
        }
        else
        {
            status = "Not Financially Qualified– Seek Approval";
        }

        $("#ApprovalStatus").val(status);
        $("#approvalStus").html(status);

        $( '#FBERFEquipmentDetails_WaitingPopup' ).css( "visibility", "hidden" );
    }

    var equipmentModel;
    var equipmentQty;
    var equipmentProductNo;
    var equipmentUnitPrice;
    var equipmentDescription;
    var equipmentTransactionType;
    var equipmentExtra;
    var equipmentEquipType;
    var equipmentSubstitutionType;

    function FBERFEquipmentDetailsBeginEdit( args )
    {
        var children = args.row.children();
        equipmentModel = $( children[1] ).text();
        equipmentQty = $( children[2] ).text();
        equipmentProductNo = $( children[3] ).text();
        equipmentDescription = $( children[4] ).text();
        equipmentEquipType = $( children[5] ).text();
        equipmentTransactionType = $( children[8] ).text();
        equipmentSubstitutionType = $( children[9] ).text();
        equipmentExtra = $( children[10] ).text();

    }
    function CompleteEquipmentModels( args )
    {
        if ( args.requestType == "beginedit" || args.requestType == "add" )
        {
            if ( args.requestType == "beginedit" )
            {
                $("#FBERFEquipmentDetailsCategory").ejDropDownList().data("ejDropDownList").selectItemByText(equipmentModel);
            }

            $("#FBERFEquipmentDetailsCategory").ejDropDownList({ change: "FBERFEquipmentDetailsCategoryChange", enableFilterSearch: false });
            $("#FBERFEquipmentDetailsQuantity").on("keyup", FBERFEQPQuantityChange);
        }
    }

    function FBERFEQPQuantityChange(e)
    {
        /*var QtyVal = $("#FBERFEquipmentDetailsQuantity").val();
        var LaidInCost = $("#FBERFEquipmentDetailsLaidInCost").val();
        var total = 0;
        if ((QtyVal != null || QtyVal != "") && LaidInCost != null) {
            total = QtyVal * LaidInCost;
        }
        $("#FBERFEquipmentDetailsTotalCost").val("$" + total.toFixed(2));*/

        var QtyVal = $("#FBERFEquipmentDetailsQuantity").val();
        var LdCost = $("#FBERFEquipmentDetailsLaidInCost").val();
        LdCost = LdCost.substring(1, LdCost.Length);
        var total = 0;
        if ((QtyVal != null || QtyVal != "") && LdCost != null) {
            total = QtyVal * LdCost;
        }
        $("#FBERFEquipmentDetailsTotalCost").val("$" + total.toFixed(2));
    }

    var RentalCost = 0;
    var CashSale = 0;
    var LaidInCost = 0;
    function ERFContingentDetailChange(e)
    {

        $.ajax({
            url: '@Url.Action("GetContingentDetailItem", "ErfNew")',
            type: 'GET',
            data: { contingentDetailName: e.value },
            success: function (jsonResult) {
                if (jsonResult.success == true) {

                    LaidInCost = jsonResult.data.LaidInCost
                    RentalCost = jsonResult.data.Rental;
                    CashSale = jsonResult.data.CashSale;

                    $("#FBERFEquipmentDetailsBrand_input").val(jsonResult.data.ID);
                    //$("#FBERFEquipmentDetailsEditForm > table > tbody > tr > td:nth-child(4)").html(jsonResult.data.Name);

                    $("#FBERFEquipmentDetailsLaidInCost").val("$" + LaidInCost.toFixed(2));

                    var quantity = $("#FBERFEquipmentDetailsQuantity").val();
                    var total = 0;
                    if ((quantity != null || quantity != "") && LaidInCost != null) {
                        total = quantity * LaidInCost;
                    }

                    //$("#FBERFEquipmentDetailsBrand").ejDropDownList().data("ejDropDownList").selectItemByText(jsonResult.data.Name);

                    if ($("#FBERFEquipmentDetailsTransactionType").val() == "Rental") {
                        $("#FBERFEquipmentDetailsRentalCost").val("$" + RentalCost.toFixed(2));
                    }
                    else if ($("#FBERFEquipmentDetailsTransactionType").val() == "Cash Sale") {
                        $("#FBERFEquipmentDetailsRentalCost").val("$" + CashSale.toFixed(2));
                    }
                    else
                        $("#FBERFEquipmentDetailsRentalCost").val(0);

                    $("#FBERFEquipmentDetailsTotalCost").val("$" + total.toFixed(2));

                }
                else {
                    AlertPopup("|There is a problem in getting Contingents!");
                }
            }
        });

    }

    function ERFTransTypeChange(e)
    {
        if (e.value == "Cash Sale") {
            if ($("#FBERFEquipmentDetailsEquipmentType").val() == "Refurb") {
                $("#FBERFEquipmentDetailsLaidInCost").val("$" + (0.75 * LaidInCost).toFixed(2));
                var laidCost = (0.75 * LaidInCost);
                //$("#FBERFEquipmentDetailsRentalCost").val("$" + (Number(laidCost) + Number((0.3 * laidCost))).toFixed(2));
            }
            else {
                $("#FBERFEquipmentDetailsLaidInCost").val("$" + (LaidInCost).toFixed(2));
                //$("#FBERFEquipmentDetailsRentalCost").val("$" + CashSale.toFixed(2));
            }
            $("#FBERFEquipmentDetailsRentalCost").val("$" + CashSale.toFixed(2));
        }
        else if (e.value == "Rental") {
            $("#FBERFEquipmentDetailsLaidInCost").val("$" + (LaidInCost).toFixed(2));
            if ($("#FBERFEquipmentDetailsEquipmentType").val() == "New") {
                //$("#FBERFEquipmentDetailsRentalCost").val("$" + (LaidInCost / 24).toFixed(2));
            }
            else
            {
                /*RentalCost = (0.75 * LaidInCost) / 24;
                $("#FBERFEquipmentDetailsRentalCost").val("$" + RentalCost.toFixed(2));*/
            }
            $("#FBERFEquipmentDetailsRentalCost").val("$" + RentalCost.toFixed(2));
        }
        else if (e.value == "Loan") {
            if ($("#FBERFEquipmentDetailsEquipmentType").val() == "Refurb") {
                $("#FBERFEquipmentDetailsLaidInCost").val("$" + (0.75 * LaidInCost).toFixed(2));
            }
            else {
                $("#FBERFEquipmentDetailsLaidInCost").val("$" + (LaidInCost).toFixed(2));
            }
            //$("#FBERFEquipmentDetailsLaidInCost").val("$" + (LaidInCost).toFixed(2));
            $("#FBERFEquipmentDetailsRentalCost").val(0);
        }

        var QtyVal = $("#FBERFEquipmentDetailsQuantity").val();
        var LdCost = $("#FBERFEquipmentDetailsLaidInCost").val();
        LdCost = LdCost.substring(1, LdCost.Length);
        var total = 0;
        if ((QtyVal != null || QtyVal != "") && LdCost != null) {
            total = QtyVal * LdCost;
        }
        $("#FBERFEquipmentDetailsTotalCost").val("$" + total.toFixed(2));

        /*if (e.value == "Rental") {
            $("#FBERFEquipmentDetailsRentalCost").val("$" + RentalCost.toFixed(2));
        }
        else if (e.value == "Cash Sale" && $("#FBERFEquipmentDetailsEquipmentType").val() != "Refurb") {
            $("#FBERFEquipmentDetailsRentalCost").val("$" + CashSale.toFixed(2));
        }
        else if ($("#FBERFEquipmentDetailsEquipmentType").val() == "Refurb") {
            RentalCost = (0.75 * LaidInCost) / 24;
            $("#FBERFEquipmentDetailsRentalCost").val("$" + RentalCost.toFixed(2));
        }
        else
            $("#FBERFEquipmentDetailsRentalCost").val(0);*/
    }

    function ERFEquipmentTypeChange(e) {
        if (e.value == "Refurb") {
            if ($("#FBERFEquipmentDetailsTransactionType").val() == "Cash Sale")
            {
                $("#FBERFEquipmentDetailsLaidInCost").val("$" + (0.75 * LaidInCost).toFixed(2));
                var laidCost = (0.75 * LaidInCost);
                //$("#FBERFEquipmentDetailsRentalCost").val("$" + (Number(laidCost) + Number((0.3 * laidCost))).toFixed(2));
                $("#FBERFEquipmentDetailsRentalCost").val("$" + CashSale.toFixed(2));
            }
            else if($("#FBERFEquipmentDetailsTransactionType").val() == "Rental")
            {
                /*RentalCost = (0.75 * LaidInCost) / 24;
                $("#FBERFEquipmentDetailsRentalCost").val("$" + RentalCost.toFixed(2));*/
                $("#FBERFEquipmentDetailsRentalCost").val("$" + RentalCost.toFixed(2));
                $("#FBERFEquipmentDetailsLaidInCost").val("$" + (LaidInCost).toFixed(2));
            }
            else
            {
                $("#FBERFEquipmentDetailsRentalCost").val(0);
                $("#FBERFEquipmentDetailsLaidInCost").val("$" + (0.75 * LaidInCost).toFixed(2));
                //$("#FBERFEquipmentDetailsLaidInCost").val("$" + (LaidInCost).toFixed(2));
            }
        }
        else
        {
            if ($("#FBERFEquipmentDetailsTransactionType").val() == "Rental")
            {
                $("#FBERFEquipmentDetailsLaidInCost").val("$" + (LaidInCost).toFixed(2));
                //$("#FBERFEquipmentDetailsRentalCost").val("$" + (LaidInCost / 24).toFixed(2));
                $("#FBERFEquipmentDetailsRentalCost").val("$" + RentalCost.toFixed(2));
            }
            else if ($("#FBERFEquipmentDetailsTransactionType").val() == "Cash Sale") {
                $("#FBERFEquipmentDetailsLaidInCost").val("$" + (LaidInCost).toFixed(2));
                $("#FBERFEquipmentDetailsRentalCost").val("$" + CashSale.toFixed(2));
            }
            else {
                $("#FBERFEquipmentDetailsLaidInCost").val("$" + (LaidInCost).toFixed(2));
                $("#FBERFEquipmentDetailsRentalCost").val(0);
            }
        }

        var QtyVal = $("#FBERFEquipmentDetailsQuantity").val();
        var LdCost = $("#FBERFEquipmentDetailsLaidInCost").val();
        LdCost = LdCost.substring(1, LdCost.Length);
        var total = 0;
        if ((QtyVal != null || QtyVal != "") && LdCost != null) {
            total = QtyVal * LdCost;
        }
        $("#FBERFEquipmentDetailsTotalCost").val("$" + total.toFixed(2));

        /*if (e.value == "Refurb") {

            RentalCost = (0.75 * LaidInCost) / 24;

            $("#FBERFEquipmentDetailsRentalCost").val("$" + RentalCost.toFixed(2));
        } else if ($("#FBERFEquipmentDetailsTransactionType").val() == "Cash Sale" && e.value != "Refurb") {
            $("#FBERFEquipmentDetailsRentalCost").val("$" + CashSale.toFixed(2));
        }
        else
            $("#FBERFEquipmentDetailsRentalCost").val(0);*/
    }

    function FBERFEquipmentDetailsProductNoChange( e )
    {
        $.ajax( {
            url: '@Url.Action("GetProductNoDescription", "Erf")',
            type: 'GET',
            data: { "modValue": e.value },
            success: function ( jsonResult )
            {
                if ( jsonResult.success == true )
                {

                    $( "#FBERFEquipmentDetailsDescription" ).val( jsonResult.data );
                }
                else
                {
                    AlertPopup( "|There is a problem in getting Description!" );
                }
            }
        } );

        $.ajax( {
            url: '@Url.Action("GetProductNoUnitPrice", "Erf")',
            type: 'GET',
            data: { "modValue": e.value },
            success: function ( jsonResult )
            {

                if ( jsonResult.success == true )
                {
                    $( "#FBERFEquipmentDetailsUnitPrice" ).val( jsonResult.data );
                }
                else
                {
                    AlertPopup( "|There is a problem in getting Unit price !" );
                }
            }
        } );
    }

    function FBERFEquipmentDetailsCategoryChange(e)
    {
        $.ajax( {
                    url: '@Url.Action("GetContingentDetails", "ErfNew")',
                    type: 'GET',
                    data: { contingentId: e.value},//$('#EqpValidationList option:selected').val() },
                    success: function ( jsonResult )
                    {
                        if ( jsonResult.success == true )
                        {
                            //var gridObj = $("#FBERFEquipmentDetails").data("ejGrid");

                            //$("#FBERFEquipmentDetailsBrand").ejDropDownList({ dataSource: jsonResult.data, enableFilterSearch: true, change: ERFContingentDetailChange });
                            ////$("#FBERFEquipmentDetailsBrand_inputSearch").val(e.selectedValue);
                            ////$("#FBERFEquipmentDetailsBrand").ejDropDownList().data("ejDropDownList").selectItemByText(jsonResult.data[0]);
                            //$("#FBERFEquipmentDetailsTransactionType").ejDropDownList({ change: ERFTransTypeChange });



                            $("#FBERFEquipmentDetailsBrand").ejDropDownList({ dataSource: jsonResult.data, enableFilterSearch: false, change: ERFContingentDetailChange });
                            $("#FBERFEquipmentDetailsTransactionType").ejDropDownList({ change: ERFTransTypeChange });
                            $("#FBERFEquipmentDetailsEquipmentType").ejDropDownList({ change: ERFEquipmentTypeChange });

                            $("#FBERFEquipmentDetailsBrand").val(null);
                        }
                        else
                        {
                            AlertPopup( "|There is a problem in getting Contingents!" );
                        }
                    }
                } );

    }



    function FBERFExpendableDetailsBegin( args )
    {
        $( '#FBERFExpendableDetails_WaitingPopup' ).css( "visibility", "hidden" );
    }
    function FBERFExpendableDetailsEndEdit( args )
    {
        $( '#FBERFExpendableDetails_WaitingPopup' ).css( "visibility", "hidden" );
    }
    function FBERFExpendableDetailsEndAdd( args )
    {
        $( '#FBERFExpendableDetails_WaitingPopup' ).css( "visibility", "hidden" );
    }

    var expendableModel;
    var expendableQty;
    var expendableProductNo;
    var expendableUnitPrice;
    var expendableDescription;
    var expendableTransactionType;
    var expendableExtra;


    function FBERFExpendableDetailsBeginEdit( args )
    {
        var children = args.row.children();
        expendableModel = $( children[1] ).text();
        expendableQty = $( children[2] ).text();
        expendableProductNo = $( children[3] ).text();
        expendableDescription = $( children[4] ).text();
        expendableTransactionType = $( children[5] ).text();
        expendableUnitPrice = $( children[6] ).text();
        expendableExtra = $(children[8]).text();
    }
    function CompleteExpendableModels( args )
    {
       if ( args.requestType == "beginedit" || args.requestType == "add" )
        {
            if ( args.requestType == "beginedit" )
            {
                $("#FBERFExpendableDetailsCategory").ejDropDownList().data("ejDropDownList").selectItemByText(equipmentModel);
            }

            $("#FBERFExpendableDetailsCategory").ejDropDownList({ change: "FBERFExpendableDetailsCategoryChange", enableFilterSearch: false });
            $("#FBERFExpendableDetailsQuantity").on("keyup", FBERFEXPQuantityChange);
        }
    }

    function FBERFExpendableDetailsCategoryChange(e) {
        $.ajax({
            url: '@Url.Action("GetContingentDetails", "ErfNew")',
            type: 'GET',
            data: { contingentId: e.value },//$('#EqpValidationList option:selected').val() },
            success: function (jsonResult) {
                if (jsonResult.success == true) {
                    //$("#FBERFExpendableDetailsBrand").ejDropDownList({ dataSource: jsonResult.data, enableFilterSearch: true, change: ERFExpContingentDetailChange });
                    //$("#FBERFExpendableDetailsTransactionType").ejDropDownList({ change: ERFExpTransTypeChange });
                    $("#FBERFExpendableDetailsBrand").ejDropDownList({ dataSource: jsonResult.data, enableFilterSearch: false, change: ERFExpContingentDetailChange });
                    $("#FBERFExpendableDetailsTransactionType").ejDropDownList({ change: ERFExpTransTypeChange });

                    $("#FBERFExpendableDetailsBrand").val(null);
                }
                else {
                    AlertPopup("|There is a problem in getting Contingents!");
                }
            }
        });

    }

    function ERFExpTransTypeChange(e)
    {
        if (e.value == "Rental") {
            $("#FBERFExpendableDetailsRentalCost").val("$" + ExpRentalCost.toFixed(2));
        }
        else if (e.value == "Cash Sale") {
            $("#FBERFExpendableDetailsRentalCost").val("$" + ExpCashSale.toFixed(2));
        }
        else
            $("#FBERFExpendableDetailsRentalCost").val(0);
    }

    var ExpLaidInCost = 0;
    var ExpRentalCost = 0;
    var ExpCashSale = 0;
    function ERFExpContingentDetailChange(e)
    {

        $.ajax({
            url: '@Url.Action("GetContingentDetailItem", "ErfNew")',
            type: 'GET',
            data: { contingentDetailName: e.value },
            success: function (jsonResult) {
                if (jsonResult.success == true) {

                    ExpLaidInCost = jsonResult.data.LaidInCost == null ? 0 : jsonResult.data.LaidInCost;
                    ExpRentalCost = jsonResult.data.Rental == null ? 0 : jsonResult.data.Rental;
                    ExpCashSale = jsonResult.data.CashSale == null ? 0 : jsonResult.data.CashSale;

                    $("#FBERFExpendableDetailsBrand_input").val(jsonResult.data.ID);

                    $("#FBERFExpendableDetailsLaidInCost").val("$" + ExpLaidInCost.toFixed(2));

                    var quantity = $("#FBERFExpendableDetailsQuantity").val();
                    var total = 0;
                    if ((quantity != null || quantity != "") && ExpLaidInCost != null) {
                        total = quantity * ExpLaidInCost;
                    }



                    if ($("#FBERFExpandableDetailsTransactionType").val() == "Rental") {
                        $("#FBERFExpendableDetailsRentalCost").val("$" + ExpRentalCost.toFixed(2));
                    }
                    else if ($("#FBERFExpandableDetailsTransactionType").val() == "Cash Sale") {
                        $("#FBERFExpendableDetailsRentalCost").val("$" + ExpCashSale.toFixed(2));
                    }
                    else
                        $("#FBERFExpendableDetailsRentalCost").val(0);

                    $("#FBERFExpendableDetailsTotalCost").val("$" + total.toFixed(2));

                }
                else {
                    AlertPopup("|There is a problem in getting Contingents!");
                }
            }
        });
    }

    function FBERFEXPQuantityChange(e)
    {
        var QtyVal = $("#FBERFExpendableDetailsQuantity").val();
        var LaidInCost = $("#FBERFExpendableDetailsLaidInCost").val();
        var total = 0;
        if ((QtyVal != null || QtyVal != "") && ExpLaidInCost != null) {
            total = QtyVal * ExpLaidInCost;
        }
        $("#FBERFExpendableDetailsTotalCost").val("$" + total.toFixed(2));
    }

    function FBERFExpendableDetailsProductNoChange( e )
    {
        var currentProductNo = $( "#FBERFExpendableDetailsProdNo" ).val();

        $.ajax( {
            url: '@Url.Action("GetExpendableProductNoDescription", "Erf")',
            type: 'GET',
            data: { "prdValue": e.value },
            success: function ( jsonResult )
            {
                if ( jsonResult.success == true )
                {

                    $( "#FBERFExpendableDetailsDescription" ).val( jsonResult.data );
                }
                else
                {
                    AlertPopup( "|There is a problem in getting Description!" );
                }
            }
        } );

        $.ajax( {
            url: '@Url.Action("GetExpendableProductNoUnitPrice", "Erf")',
            type: 'GET',
            data: { "prdValue": e.value },
            success: function ( jsonResult )
            {

                if ( jsonResult.success == true )
                {
                    $( "#FBERFExpendableDetailsUnitPrice" ).val( jsonResult.data );
                }
                else
                {
                    AlertPopup( "|There is a problem in getting Unit price !" );
                }
            }
        } );
    }

    function FBERFExpendableDetailsModelNoChange( e )
    {
        var selectedModel;
        $.ajax( {
            url: '@Url.Action("GetExpendableProductNumberByModel", "Erf")',
            type: 'GET',
            data: { "model": e.value },
            success: function ( jsonResult )
            {
                if ( jsonResult.success == true )
                {
                    $( "#FBERFExpendableDetailsProdNo" ).ejDropDownList( { dataSource: jsonResult.data, enableFilterSearch: true } );
                    $( "#FBERFExpendableDetailsProdNo" ).ejDropDownList().data( "ejDropDownList" ).selectItemByText( jsonResult.data[0].text );
                }
                else
                {
                    AlertPopup( "|There is a problem in getting Products!" );
                }
            }
        } );


    }

    function queryCellInfoEquipment( args )
    {
        //if ( args.column.headerText === "Total Line Amount" )
        //{
        //    var Qty = args.data.Quantity;
        //    if ( args.data.Quantity === null || args.data.Quantity == 0 )
        //    {
        //        Qty = 1;
        //    }

        //    $( args.cell ).text( "$" + ( Qty * args.data.UnitPrice ).toFixed( 2 ) );
        //}
        //if ( args.column.headerText === "Unit Price" )
        //{

        //    if ( args.data.UnitPrice !== null && args.data.UnitPrice != 0 )
        //    {
        //        //alert("UP ="+ args.data.UnitPrice );
        //        $( args.cell ).text( "$" + ( args.data.UnitPrice ).toFixed( 2 ) );
        //    }
        //    else
        //    {
        //        //alert( args.data.UnitPrice );
        //        $( args.cell ).text( "$" + ( args.data.UnitPrice ) );
        //    }

        //}
        //if ( args.column.headerText === "Qty" )
        //{
        //    if ( args.data.Quantity === null || args.data.Quantity == 0 )
        //    {
        //        $( args.cell ).text( 1 );
        //    }
        //}
        //if ( args.column.headerText === "Equip Type" )
        //{
        //    if ( args.data.EquipmentType !== null )
        //    {
        //        $( args.cell ).text( args.data.EquipmentType );
        //    }
        //}
        //if ( args.column.headerText === "Substitution Type" )
        //{
        //    if ( args.data.Substitution !== null )
        //    {
        //        $( args.cell ).text( args.data.Substitution );
        //    }
        //}

        //if ( args.column.headerText === "Transaction Type" )
        //{
        //    if ( args.data.TransactionType !== null )
        //    {
        //        $( args.cell ).text( args.data.TransactionType );
        //    }
        //}
        //if ( args.column.headerText === "Extra" )
        //{
        //    if ( args.data.Extra !== null )
        //    {
        //        $( args.cell ).text( args.data.Extra );
        //    }
        //}
    }

    function queryCellInfoExpendable( args )
    {

        if ( args.column.headerText === "Total Line Amount" )
        {
            var Qty = args.data.Quantity;
            if ( args.data.Quantity === null || args.data.Quantity == 0 )
            {
                Qty = 1;
            }

            if ( args.data.UnitPrice != 0 )
            {
                $( args.cell ).text( "$" + ( Qty * args.data.UnitPrice ).toFixed( 2 ) );
            }
            else
            {
                $( args.cell ).text( "$" + ( Qty * args.data.UnitPrice ) );
            }

        }
        if ( args.column.headerText === "Unit Price" )
        {

            if ( args.data.UnitPrice !== null && args.data.UnitPrice != 0 )
            {
                $( args.cell ).text( "$" + ( args.data.UnitPrice ).toFixed( 2 ) );
            }
            else
            {
                $( args.cell ).text( "$" + ( args.data.UnitPrice ) );
            }
        }
        if ( args.column.headerText === "Qty" )
        {
            if ( args.data.Quantity === null || args.data.Quantity == 0 )
            {
                $( args.cell ).text( 1 );
            }
        }
        if ( args.column.headerText === "Transaction Type" )
        {
            //alert( args.data.TransactionType );
            if ( args.data.TransactionType !== null )
            {
                $( args.cell ).text( args.data.TransactionType );
            }
        }
        if ( args.column.headerText === "Extra" )
        {
            if ( args.data.Extra !== null )
            {
                $( args.cell ).text( args.data.Extra );
            }
        }

    }

    function onToolbarClick( args )
    {
        if ( ( args.itemName == "Edit" || args.itemName == "Delete" ) & this.getSelectedRecords().length == 0 )
        {

            //prevent the default alert popup
            alert = function () { };

            //here you can call your own customize alert method
            AlertPopup( "|No records selected for " + args.itemName + " operation" );

        }
        //else if(args.itemName == "Update")
        //{
        //    if(args.itemId == "FBERFEquipmentDetails_update" && $("#FBERFEquipmentDetailsBrand_dropdown").val() == "")
        //    {
        //        AlertPopup("| Please select the Required Data ");
        //        return;
        //    }
        //    if (args.itemId == "FBERFExpendableDetails_add" && $("#FBERFExpendableDetailsBrand_dropdown").val() == "") {
        //        AlertPopup("| Please select the Required Data ");
        //        return;
        //    }
        //}
    }

    function ValidatePhoneNumber( phone )
    {

        if ( phone.replace( /\W+/g, '' ).length == 10 )
        {
            return true;
        }
        else
        {
            AlertPopup( "|Please Enter Valid Phone Number" );
            return false;
        }
    }
    function PhoneValidation( evt )
    {
        var charCode = ( evt.which ) ? evt.which : event.keyCode;
        //if ((charCode >= 48 && charCode <=57)|| charCode ==40 || charCode ==41 || charCode ==45)
        if ( charCode >= 48 && charCode <= 57 )
            return true;

        return false;
    }

    function ValidateERFModel() {
        debugger;
        var result = true;
        if ($('#ErfAssetsModel_Erf_HoursofOperation').val().length > 50 || $('#ErfAssetsModel_Erf_InstallLocation').val().length > 90 ||
            $('#ErfAssetsModel_Erf_UserName').val().length > 50 || $('#ErfAssetsModel_Erf_Phone').val().length > 25) {

            result = false;
        }

        return result;
    }

    function validateData() {
        var result = true;
        var ordTyp = $("#OrderTypeList").val();
        var dateFromValue = $("#ERFFormDate").val();
        var dateRecived = $("#ERFDateRecived").val();
        var dateProcessed = $("#ERFDateProcessed").val();
        var requestDate = $("#ERFRequestDate").val();
        var ShpToBranch = $("#BranchList").val();
        var TotalNSV = $("#TotalNSV").val();
        var MainContactName = $("#MainContactName").val();
        var PhoneNumber = $("#PhoneNumber").val();
        var HoursOfOpe = $("#ErfAssetsModel_Erf_HoursofOperation").val();
        var installLoc = $("#ErfAssetsModel_Erf_InstallLocation").val();
        var uName = $("#ErfAssetsModel_Erf_UserName").val();
        var phone = $("#ErfAssetsModel_Erf_Phone").val();
        var siteReady = $("#SiteReadyList").val();


        if (ordTyp.length <= 0) {
            result = false;
        }
        if (dateFromValue.length <= 0) {
            result = false;
        }
        if (dateRecived.length <= 0) {
            result = false;
        }
        if (dateProcessed.length <= 0) {
            result = false;
        }
        if (requestDate.length <= 0) {
            result = false;
        }
        if (ShpToBranch == "") {
            result = false;
        }
        if (TotalNSV == 0) {
            result = false;
        }
        //if (MainContactName.length <= 0) {
        //    result = false;
        //} if (PhoneNumber.length <= 0) {
        //    result = false;
        //}

        if (HoursOfOpe == "") {
            result = false;
        }
        if (installLoc == "") {
            result = false;
        }
        if (uName == "") {
            result = false;
        }
        if (phone == "") {
            result = false;
        }
        if (siteReady == "") {
            result = false;
        }
        return result;
    }

    //************** POS **************************

    @*function FBERFPosDetailsBegin(args) {
        $('#FBERFPosDetails_WaitingPopup').css("visibility", "hidden");
    }
    function FBERFPosDetailsEndEdit(args) {
        $('#FBERFPosDetails_WaitingPopup').css("visibility", "hidden");
    }
    function FBERFPosDetailsEndAdd(args) {
        $('#FBERFPosDetails_WaitingPopup').css("visibility", "hidden");
    }

    var posModel;
    var posQty;
    var posProductNo;
    var posUnitPrice;
    var posDescription;
    var posTransactionType;
    var posExtra;


    function FBERFPosDetailsBeginEdit(args) {
        var children = args.row.children();

        posModel = $(children[1]).text();
        posQty = $(children[2]).text();
        posProductNo = $(children[3]).text();
        posDescription = $(children[4]).text();
        posEquipType = $(children[5]).text();
        posTransactionType = $(children[8]).text();
        posSubstitutionType = $(children[9]).text();
        posExtra = $(children[10]).text();
    }
    function CompletePosModels(args) {
        if (args.requestType == "beginedit" || args.requestType == "add") {
            if (args.requestType == "beginedit") {
                $("#FBERFPOSDetailsCategory").ejDropDownList().data("ejDropDownList").selectItemByText(posModel);
            }

            $("#FBERFPOSDetailsCategory").ejDropDownList({ change: "FBERFPOSDetailsCategoryChange", enableFilterSearch: false });
            $("#FBERFPOSDetailsQuantity").on("keyup", FBERFPosQuantityChange);
        }
    }

    function FBERFPOSDetailsCategoryChange(e) {
        $.ajax({
            url: '@Url.Action("GetContingentDetails", "ErfNew")',
            type: 'GET',
            data: { contingentId: e.value },
            success: function (jsonResult) {
                if (jsonResult.success == true) {
                    $("#FBERFPOSDetailsBrand").ejDropDownList({ dataSource: jsonResult.data, enableFilterSearch: false, change: ERFPosContingentDetailChange });
                    $("#FBERFPOSDetailsTransactionType").ejDropDownList({ change: ERFPosTransTypeChange });
                }
                else {
                    AlertPopup("|There is a problem in getting Contingents!");
                }
            }
        });

    }

    function ERFPosTransTypeChange(e)
    {
        if (e.value == "Rental") {
            $("#FBERFPOSDetailsRentalCost").val("$" + PosRentalCost.toFixed(2));
        }
        else if (e.value == "Cash Sale") {
            $("#FBERFPOSDetailsRentalCost").val("$" + PosCashSale.toFixed(2));
        }
        else
            $("#FBERFPOSDetailsRentalCost").val(0);
    }

    var PosLaidInCost = 0;
    var PosRentalCost = 0;
    var PosCashSale = 0;
    function ERFPosContingentDetailChange(e)
    {

        $.ajax({
            url: '@Url.Action("GetContingentDetailItem", "ErfNew")',
            type: 'GET',
            data: { contingentDetailName: e.value },
            success: function (jsonResult) {
                if (jsonResult.success == true) {

                    PosLaidInCost = jsonResult.data.LaidInCost == null ? 0 : jsonResult.data.LaidInCost;
                    PosRentalCost = jsonResult.data.Rental == null ? 0 : jsonResult.data.Rental;
                    PosCashSale = jsonResult.data.CashSale == null ? 0 : jsonResult.data.CashSale;

                    $("#FBERFPOSDetailsBrand_input").val(jsonResult.data.ID);

                    $("#FBERFPOSDetailsLaidInCost").val("$" + PosLaidInCost.toFixed(2));

                    var quantity = $("#FBERFPOSDetailsQuantity").val();
                    var total = 0;
                    if ((quantity != null || quantity != "") && PosLaidInCost != null) {
                        total = quantity * PosLaidInCost;
                    }



                    if ($("#FBERFPOSDetailsTransactionType").val() == "Rental") {
                        $("#FBERFPOSDetailsRentalCost").val("$" + PosRentalCost.toFixed(2));
                    }
                    else if ($("#FBERFPOSDetailsTransactionType").val() == "Cash Sale") {
                        $("#FBERFPOSDetailsRentalCost").val("$" + PosCashSale.toFixed(2));
                    }
                    else
                        $("#FBERFPOSDetailsRentalCost").val(0);

                    $("#FBERFPOSDetailsTotalCost").val("$" + total.toFixed(2));

                }
                else {
                    AlertPopup("|There is a problem in getting Contingents!");
                }
            }
        });
    }

    function FBERFPosQuantityChange(e)
    {
        var QtyVal = $("#FBERFPOSDetailsQuantity").val();
        var LaidInCost = $("#FBERFPOSDetailsLaidInCost").val();
        var total = 0;
        if ((QtyVal != null || QtyVal != "") && PosLaidInCost != null) {
            total = QtyVal * PosLaidInCost;
        }
        $("#FBERFPOSDetailsTotalCost").val("$" + total.toFixed(2));
    }

    function queryCellInfoPos(args) {

        if (args.column.headerText === "Total Line Amount") {
            var Qty = args.data.Quantity;
            if (args.data.Quantity === null || args.data.Quantity == 0) {
                Qty = 1;
            }

            if (args.data.UnitPrice != 0) {
                $(args.cell).text("$" + (Qty * args.data.UnitPrice).toFixed(2));
            }
            else {
                $(args.cell).text("$" + (Qty * args.data.UnitPrice));
            }

        }
        if (args.column.headerText === "Unit Price") {

            if (args.data.UnitPrice !== null && args.data.UnitPrice != 0) {
                $(args.cell).text("$" + (args.data.UnitPrice).toFixed(2));
            }
            else {
                $(args.cell).text("$" + (args.data.UnitPrice));
            }
        }
        if (args.column.headerText === "Qty") {
            if (args.data.Quantity === null || args.data.Quantity == 0) {
                $(args.cell).text(1);
            }
        }
        if (args.column.headerText === "Transaction Type") {
            if (args.data.TransactionType !== null) {
                $(args.cell).text(args.data.TransactionType);
            }
        }
        if (args.column.headerText === "Extra") {
            if (args.data.Extra !== null) {
                $(args.cell).text(args.data.Extra);
            }
        }

    }*@
    
    //************ End Of POS *******************

</script>

@using (Html.BeginForm())
{
    @Html.HiddenFor(m => m.Operation)

    Dictionary<string, string> UserPrivilege = (Dictionary<string, string>)System.Web.HttpContext.Current.Session["UserPrivilege" + (int)System.Web.HttpContext.Current.Session["UserId"]] == null
            ? Security.GetUserPrivilegeByUserId((int)System.Web.HttpContext.Current.Session["UserId"], null) :
            (Dictionary<string, string>)System.Web.HttpContext.Current.Session["UserPrivilege" + (int)System.Web.HttpContext.Current.Session["UserId"]];

    <section class="container-fluid white-bg pad fixedSecond header">
        <div class="row vertical-align">
            <div class="col-md-12">
                <div class="col-md-9">
                    <div class="row">
                        <div class="col-md-3">
                            <b>ERF ID:</b>
                            <span>@Model.ErfAssetsModel.Erf.ErfID</span>
                            @Html.HiddenFor(w => w.ErfAssetsModel.Erf.ErfID)
                        </div>
                        <div class="col-md-3">
                        </div>
                        <div class="col-md-3">
                        </div>
                        <div class="col-md-3">
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-12">
                            <div class="col-md-4">
                                Created By: @Model.CreatedBy
                            </div>

                            <div class="col-md-8">
                                Created On: @Model.ErfAssetsModel.Erf.EntryDate
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-12">
                    <div class="col-md-3">
                    </div>
                    <div class="col-md-7">
                        <div class="form-group" style="float:right ">
                            @*<h4> @Html.CheckBoxFor(m => m.CrateWorkOrder)<b>Create Work Order</b> </h4>*@
                        </div>
                    </div>
                    <div class="col-md-1">
                        @{

                            //if (UserPrivilege["ERFNew"] == "Edit-Only" || UserPrivilege["ERFNew"] == "Full" || (UserPrivilege["Customer"] == "Full" && UserPrivilege["ERFNew"] == "Read-Only"))
                            //{

                            //if ((UserPrivilege["Customer"] == "Full") || (UserPrivilege["Customer"] == "Full" && UserPrivilege["ERFNew"] == "Read-Only"))
                            //{
                            if (Convert.ToInt32(Model.ErfAssetsModel.Erf.ErfID) == 0)
                            {
                                        <button type="submit" style="display: inline-block;margin-right:5px;float:right;" class="btn btn-primary btnERFSave" onclick="SetErfSaveOperation(2);" name="action:ErfSave">Save</button>
                                    }

                                //}
                                else
                                {
                                    if (Convert.ToInt32(Model.ErfAssetsModel.Erf.ErfID) > 0)
                                    {
                                        <button type="submit" style="display: inline-block;margin-right:5px;float:right;" class="btn btn-primary btnERFSave" onclick="SetErfSaveOperation(2);" name="action:ErfSave">Save</button>
                                    }

                                }
                           // }
                        }
                    </div>
                    <div class="col-md-1">
                        @Html.ActionLink("Back", "CustomerSearch", "CustomerSearch", new { @IsBack = 1 }, new { @Class = "btn btn-primary btn-orange" })
                    </div>
                </div>
            </div>
        </div>
    </section>

            @Html.Partial("~/Views/Shared/_CustomerDetailsPartial.cshtml", Model.Customer)

<section class="block">
    <div class="container-fluid">
        <h2 class="work-requested-details-head arrow-down tabheader">Assets</h2>
        <div class="work-requested-details-content margin-top">
            <div class="col-xs-12 customer sm-pad-reset">

                <div class="erf-Assets-content margin-top">
                    <div class="row clear-input">

                        <div class="col-md-4 customer-col1 sm-pad-reset">
                            @{
                                if (UserPrivilege["ERFNew"] == "Full")
                                {
                                    <div class="col-xs-12-o">
                                        <span class="col-md-6">Branch Stock / Accessory Only Order:</span>
                                        <div class="col-md-6">
                                            <div class="form-group">
                                                @Html.CheckBoxFor(m => m.CrateWorkOrder, new { @Id = "accessOnlyWO" })
                                            </div>
                                        </div>
                                    </div>
                                }
                            }


                            <div class="col-xs-12-o">
                                <span class="col-md-6 required">Order Type:</span>
                                <div class="col-md-6">
                                    <div class="form-group" style="float:right">
                                        @*@Html.DropDownListFor(c => c.OrderType, new SelectList(Model.OrderTypeList), new { @class = "form-control SearchPanelControl", @Id = "OrderTypeList" })*@
                                        @Html.DropDownListFor(c => c.OrderType, new SelectList(Model.OrderTypeList.OrderBy(x => x.OrderTypeDesc), "OrderTypeDesc", "OrderTypeDesc"), new { @Id = "OrderTypeList", @class = "form-control custom-select ThirdPartyDropDown", style = "width:100%" })
                                    </div>
                                </div>
                            </div>

                            @*<div class="col-md-12">
                                    <span class="col-md-6 required">Ship to Customer:</span>
                                    <div class="col-md-6">
                                        <div class="form-group">
                                            @Html.CheckBoxFor(m => m.CrateWorkOrder, new { @Id = "accessOnlyWO" })
                                        </div>
                                    </div>
                                </div>*@

                            @*<div class="col-md-12">
                                    <span class="col-md-6 required">Customer Direct:</span>
                                    <div class="col-md-6">
                                        <div class="form-group" style="float:right">
                                            @Html.DropDownListFor(c => c.ShipToCustomer, new SelectList(Model.ShipToCustomerList.OrderBy(x=>x.CompanyName), "ContactId", "CompanyName"), "Please select a  Customer", new { @Id = "CustomerList", @class = "form-control custom-select ThirdPartyDropDown", style = "width:100%" })
                                        </div>
                                    </div>
                                </div>*@

                            <div class="col-xs-12-o">
                                <span class="col-md-6 required">Ship to Branch if Different:</span>
                                <div class="col-md-6">
                                    <div class="form-group" style="float:right">
                                        @*@Html.DropDownListFor(c => c.BranchName, new SelectList(Model.BranchList), new { @class = "form-control SearchPanelControl", @Id = "BranchList", @disabled = "disabled" })*@
                                        @Html.DropDownListFor(c => c.BranchName, new SelectList(Model.BranchList.OrderBy(x => x.BranchName), "BranchNo", "BranchName"), "Please select a  Branch", new { @Id = "BranchList", @class = "form-control custom-select ThirdPartyDropDown", style = "width:100%" })
                                    </div>
                                </div>
                            </div>

                            <div class="col-xs-12-o">
                                <span class="col-md-6 required">Form Date:</span>
                                <div class="col-md-6">
                                    <div class="form-group" style="float:right">
                                        @Html.TextBoxFor(m => m.ErfAssetsModel.Erf.DateOnERF, new { @class = "form-control WorkOrderFields", @Id = "ERFFormDate" })
                                    </div>
                                </div>
                            </div>
                            <div class="col-xs-12-o">
                                <span class="col-md-6 required">ERF Received Date:</span>
                                <div class="col-md-6">
                                    <div class="form-group" style="float:right">
                                        @Html.TextBoxFor(m => m.ErfAssetsModel.Erf.DateERFReceived, new { @class = "form-control WorkOrderFields", @Id = "ERFDateRecived" })
                                    </div>
                                </div>
                            </div>
                            <div class="col-xs-12-o">
                                <span class="col-md-6 required">ERF Processed Date:</span>
                                <div class="col-md-6">
                                    <div class="form-group" style="float:right">
                                        @Html.TextBoxFor(m => m.ErfAssetsModel.Erf.DateERFProcessed, new { @class = "form-control WorkOrderFields", @Id = "ERFDateProcessed" })
                                    </div>
                                </div>
                            </div>
                            <div class="col-xs-12-o">
                                <span class="col-md-6 required"> Scheduled Install Date:</span> @*ERF Requested Date:</span>*@
                                <div class="col-md-6">
                                    <div class="form-group" style="float:right">
                                        @Html.TextBoxFor(m => m.ErfAssetsModel.Erf.OriginalRequestedDate, new { @class = "form-control WorkOrderFields", @Id = "ERFRequestDate" })
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="col-md-8 customer sm-pad-reset">
                            <div class="row">
                                <div class="col-md-6 customer-col2">
                                    <div class="col-xs-6-o">
                                        <span class="col-sm-4 col-md-5 m-b-more required">Hours of Operation:</span>
                                        <span class="col-md-7" id="approvalStus">
                                            @Html.TextBoxFor(m => m.ErfAssetsModel.Erf.HoursofOperation, new { @class = "form-control WorkOrderFields" })
                                                                                <br />@Html.ValidationMessageFor(m => m.ErfAssetsModel.Erf.HoursofOperation, "", new { @class = "text-danger" })
                                                                            </span>
                                        
                                    </div>


                                    @*<div class="col-xs-6-o">
                                        <span class="col-sm-4 col-md-5 m-b-more required">Hours of Operation:</span>
                                    </div>
                                    <div class="col-xs-4-o">
                                        <div class="form-group" style="float:right">
                                            @Html.TextBoxFor(m => m.ErfAssetsModel.Erf.HoursofOperation, new { @class = "form-control WorkOrderFields" })
                                            <br />@Html.ValidationMessageFor(m => m.ErfAssetsModel.Erf.HoursofOperation, "", new { @class = "text-danger" })
                                        </div>
                                    </div>*@
                                    <div class="col-xs-6-o">
                                        <span class="col-sm-4 col-md-5 m-b-more required">Install Location:</span>
                                    </div>
                                    <div class="col-xs-4-o">
                                        <div class="form-group" style="float:right">
                                            @Html.TextBoxFor(m => m.ErfAssetsModel.Erf.InstallLocation, new { @class = "form-control WorkOrderFields" })
                                            <br />@Html.ValidationMessageFor(m => m.ErfAssetsModel.Erf.InstallLocation, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="col-xs-6-o">
                                        <span class="col-sm-4 col-md-5 m-b-more required">Contact:</span>
                                    </div>
                                    <div class="col-xs-4-o">
                                        <div class="form-group" style="float:right">
                                            @Html.TextBoxFor(m => m.ErfAssetsModel.Erf.UserName, new { @class = "form-control WorkOrderFields" })
                                            <br />@Html.ValidationMessageFor(m => m.ErfAssetsModel.Erf.UserName, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="col-xs-6-o">
                                        <span class="col-sm-4 col-md-5 m-b-more required">Phone:</span>
                                    </div>
                                    <div class="col-xs-4-o">
                                        <div class="form-group" style="float:right">
                                            @Html.TextBoxFor(m => m.ErfAssetsModel.Erf.Phone, new { @class = "form-control WorkOrderFields" })
                                            @Html.ValidationMessageFor(m => m.ErfAssetsModel.Erf.Phone, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="col-xs-6-o">
                                        <span class="col-sm-4 col-md-5 m-b-more required">SITE READY AT TIME OF ERF PROCESSION?</span>
                                    </div>
                                    <div class="col-xs-4-o">
                                        <div class="form-group" style="float:right">
                                            @Html.DropDownListFor(c => c.SiteReady, new SelectList(Model.SiteReadyList), new { @class = "form-control SearchPanelControl", @Id = "SiteReadyList" })
                                        </div>
                                    </div>
                                </div>

                                <div class="col-md-6 customer-form-cnt">
                                    <div class="col-xs-6-o">
                                        <h2 class="tabheader" style="margin-bottom:20px; text-align:center;">Equipment Calculator</h2>
                                    </div>
                                    <div class="col-xs-6-o">
                                        <span class="col-sm-4 col-md-5 m-b-more required">Additional NSV:</span>
                                    </div>
                                    <div class="col-xs-4-o">
                                        <div class="form-group" style="float:left">
                                            @Html.TextBoxFor(m => m.TotalNSV, new { @class = "form-control WorkOrderFields" })
                                            <br />@Html.ValidationMessageFor(m => m.TotalNSV, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="col-xs-6-o">
                                        <span class="col-md-5">Current NSV:</span>
                                        <span class="col-md-7" id="currentTot">@String.Format("{0:C}", Model.CurrentNSV)</span>
                                        @Html.HiddenFor(m => m.CurrentNSV)
                                    </div>

                                    <div class="col-xs-6-o">
                                        <span class="col-md-5">Contribution Margin:</span>
                                        <span class="col-md-7" id="currentTot">@Model.ContributionMargin</span>
                                        @Html.HiddenFor(m => m.ContributionMargin)
                                    </div>

                                    <div class="col-xs-6-o">
                                        <span class="col-md-5">Current Equipment:</span>
                                        <span class="col-md-7" id="currentTot">@String.Format("{0:C}", Model.CurrentEquipmentTotal)</span>
                                        @Html.HiddenFor(m => m.CurrentEquipmentTotal)
                                    </div>

                                    <div class="col-xs-6-o">
                                        <span class="col-md-5">Additional Equipment:</span>
                                        <span class="col-md-7" id="additionalTot">@String.Format("{0:C}", Model.AdditionalEquipmentTotal)</span>
                                        @Html.HiddenFor(m => m.AdditionalEquipmentTotal)
                                    </div>

                                    <div class="col-xs-6-o">
                                        <span class="col-md-5">Approval Status:</span>
                                        <span class="col-md-7" id="approvalStus">@Model.ApprovalStatus</span>
                                        @Html.HiddenFor(m => m.ApprovalStatus)
                                    </div>

                                </div>
                            </div>
                            <br />

                        </div>



                    </div>
                    <div class="row clear-input">
                        <button class="btn btn-primary" onclick='window.open("https://docs.google.com/spreadsheets/d/e/2PACX-1vRkVq6wz4Hi_r2TFmDVF8Pnr_KUlcKmc5p2oN8iXRbQKcPKuri8d4yFlyyWnbdOx9oqK0LddHoo5pFc/pubhtml")' style="position: absolute;left: 50%;z-index:9999;">Reference Guide</button>
                        <div class="col-md-12">
                            <h2 class="equipment-head tabheader">Equipment:</h2>
                            @*<div class="equipment-details-content">*@
                            @*<div class="col-md-8 customer sm-pad-reset" style="width:100%;">
                                    <div class="row">
                                        <div class="col-md-6 customer-col2">
                                            <div class="col-xs-6-o">
                                                <span class="col-sm-4 col-md-5 m-b-more">Equipment Category Selection:</span>
                                            </div>
                                            <div class="col-xs-4-o">
                                                <div class="form-group" style="float:right">
                                                    @Html.DropDownListFor(c => c.EqpValidationId, new SelectList(Model.EqpValidationList.OrderBy(x => x.ContingentName), "ContingentId", "ContingentName"), "Please select an Item", new { @class = "form-control SearchPanelControl", @Id = "EqpValidationList" })
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>*@

                            <div class="col-xs-8-o customer sm-pad-reset" style="width:100%;">
                                <div class="row">

                                    <div class="table-responsive">


                                        @(Html.EJ().Grid<FarmerBrothers.Models.ERFManagementEquipmentModel>
                                    ("FBERFEquipmentDetails")
                                        .Datasource(ds => ds.Json((IEnumerable<object>)Model.ErfAssetsModel.EquipmentList)
                                        .UpdateURL(Url.Action("EquipmentUpdate", "ErfNew"))
                                        .InsertURL(Url.Action("EquipmentInsert", "ErfNew"))
                                        .RemoveURL(Url.Action("EquipmentDelete", "ErfNew"))
                                        .Adaptor(AdaptorType.RemoteSaveAdaptor))
                                        .EditSettings(edit => { edit.AllowAdding().AllowDeleting(); })
                                        .AllowPaging()
                                        .AllowTextWrap(true)
                                        .ToolbarSettings(toolbar =>
                                        {
                                            toolbar.ShowToolbar().ToolbarItems(items =>
                                            {
                                                items.AddTool(ToolBarItems.Add);
                                                //items.AddTool(ToolBarItems.Edit);
                                                items.AddTool(ToolBarItems.Delete);
                                                items.AddTool(ToolBarItems.Update);
                                                items.AddTool(ToolBarItems.Cancel);
                                            });
                                        })
                                        .Columns(col =>
                                        {
                                            col.Field("ERFEquipmentId").HeaderText("Equipment ID").IsPrimaryKey(true).Visible(false).Add();
                                            col.Field("Quantity").HeaderText("Qty").Width("5%").Type(ColumnType.Number).ValidationRules(r => r.AddRule("min", 1).AddRule("required", true).AddRule("number", true)).Add();
                                            col.Field("Category").HeaderText("Equipment Category").Width("15%").ForeignKeyField("ModelId").ForeignKeyValue("ModelName").DataSource(((IEnumerable<object>)Model.ErfAssetsModel.ErfEqpCategory))
                                                .ValidationRules(r => r.AddRule("required", true)).Add();
                                            col.Field("Brand").HeaderText("Brand - Equipment Model Number - Description").Width("20%").ForeignKeyField("ModelId").ForeignKeyValue("ModelName").DataSource(((IEnumerable<object>)Model.ErfAssetsModel.ErfEqpModels))
                                                .ValidationRules(r => r.AddRule("required", true)).Add();
                                            col.Field("Branch").HeaderText("Using Branch Stock").Width("10%").ForeignKeyField("Model").ForeignKeyValue("Model").DataSource(((IEnumerable<object>)Model.ErfAssetsModel.UsingBranch)).ValidationRules(r => r.AddRule("required", true)).Add();
                                            col.Field("Substitution").HeaderText("Substitution possible ? ").Width("10%").ForeignKeyField("Model").ForeignKeyValue("Model").DataSource(((IEnumerable<object>)Model.ErfAssetsModel.ErfSubstituion)).ValidationRules(r => r.AddRule("required", true)).Add();
                                            col.Field("TransactionType").HeaderText("Trans Type").Width("10%").ForeignKeyField("Model").ForeignKeyValue("Model").DataSource(((IEnumerable<object>)Model.ErfAssetsModel.ErfTransactionTypes)).ValidationRules(r => r.AddRule("required", true)).Add();
                                            col.Field("EquipmentType").HeaderText("Equipment Type").Width("10%").ForeignKeyField("Model").ForeignKeyValue("Model").DataSource(((IEnumerable<object>)Model.ErfAssetsModel.ErfEquipmentTypes)).ValidationRules(r => r.AddRule("required", true)).Add();
                                            col.Field("LaidInCost").HeaderText("Laid-in-Cost").Width("10%").Type(ColumnType.Number).Format("{0:C}").ValidationRules(r => r.AddRule("min", 1).AddRule("required", true).AddRule("number", true)).AllowEditing(false).Add();
                                            col.Field("RentalCost").HeaderText("Rental/Sale Cost").Width("10%").Type(ColumnType.Number).Format("{0:C}").ValidationRules(r => r.AddRule("min", 1).AddRule("required", true).AddRule("number", true)).AllowEditing(false).Add();
                                            col.Field("TotalCost").HeaderText("Total").Width("10%").Type(ColumnType.Number).Format("{0:C}").ValidationRules(r => r.AddRule("min", 1).AddRule("required", true).AddRule("number", true)).AllowEditing(false).Add();

                                        })
                                        .ClientSideEvents(eve =>
                                        {
                                            eve.ActionComplete("CompleteEquipmentModels")
                                                .BeginEdit("FBERFEquipmentDetailsBeginEdit")
                                                .ActionBegin("FBERFEquipmentDetailsBegin")
                                                .EndEdit("FBERFEquipmentDetailsEndEdit")
                                                .EndAdd("FBERFEquipmentDetailsEndAdd")
                                                .QueryCellInfo("queryCellInfoEquipment")
                                                .ToolbarClick("onToolbarClick");
                                        }))




                                    </div><!--end of .table-responsive-->

                                </div>
                            </div>
                            @*</div>*@
                        </div>
                        <div class="col-md-12">
                            <h2 class="expandible-head tabheader">Expendables:</h2>
                            @*<div class="expandible-details-content">*@
                            @*<div class="col-md-8 customer sm-pad-reset" style="width:100%;">
                                    <div class="row">
                                        <div class="col-md-6 customer-col2">
                                            <div class="col-xs-6-o">
                                                <span class="col-sm-4 col-md-5 m-b-more">Expendable Category Selection:</span>
                                            </div>
                                            <div class="col-xs-4-o">
                                                <div class="form-group" style="float:right">
                                                    @Html.DropDownListFor(c => c.ExpValidationId, new SelectList(Model.ExpValidationList.OrderBy(x => x.ContingentName), "ContingentId", "ContingentName"), "Please select an Item", new { @class = "form-control SearchPanelControl", @Id = "ExpValidationList" })
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>*@

                            <div class="col-xs-8-o customer sm-pad-reset" style="width:100%;">
                                <div class="row">


                                    <div class="table-responsive">
                                        @(Html.EJ().Grid<FarmerBrothers.Models.ERFManagementExpendableModel>
                                                                            ("FBERFExpendableDetails")
                                                                            .Datasource(ds => ds.Json((IEnumerable<object>
                                                                                )Model.ErfAssetsModel.ExpendableList)
                                                                                .UpdateURL(Url.Action("ExpendableUpdate", "ErfNew"))
                                                                                .InsertURL(Url.Action("ExpendableInsert", "ErfNew"))
                                                                                .RemoveURL(Url.Action("ExpendableDelete", "ErfNew"))
                                                                                .Adaptor(AdaptorType.RemoteSaveAdaptor))
                                                                                .EditSettings(edit => { edit.AllowAdding().AllowDeleting(); })
                                                                                .AllowPaging()
                                                                                 .AllowTextWrap(true)
                                                                                .ToolbarSettings(toolbar =>
                                                                                {
                                                                                    toolbar.ShowToolbar().ToolbarItems(items =>
                                                                                    {
                                                                                        items.AddTool(ToolBarItems.Add);
                                                                                       // items.AddTool(ToolBarItems.Edit);
                                                                                        items.AddTool(ToolBarItems.Delete);
                                                                                        items.AddTool(ToolBarItems.Update);
                                                                                        items.AddTool(ToolBarItems.Cancel);
                                                                                    });
                                                                                })
                                                                                .Columns(col =>
                                                                                {
                                                                                    col.Field("ERFExpendableId").HeaderText("Equipment ID").IsPrimaryKey(true).Visible(false).Add();
                                                                                    col.Field("Quantity").HeaderText("Qty").Width("5%").Type(ColumnType.Number).ValidationRules(r => r.AddRule("min", 1).AddRule("required", true).AddRule("number", true)).Add();
                                                                                    col.Field("Category").HeaderText("Equipment Category").Width("15%").ForeignKeyField("ModelId").ForeignKeyValue("ModelName").DataSource(((IEnumerable<object>)Model.ErfAssetsModel.ErfExpCategory))
                                                                                        .ValidationRules(r => r.AddRule("required", true)).Add();
                                                                                    col.Field("Brand").HeaderText("Brand - Equipment Model Number - Description").Width("20%").ForeignKeyField("ModelId").ForeignKeyValue("ModelName").DataSource(((IEnumerable<object>)Model.ErfAssetsModel.ErfExpModels))
                                                                                        .ValidationRules(r => r.AddRule("required", true)).HeaderTextAlign(TextAlign.Justify).Add();
                                                                                    col.Field("Branch").HeaderText("Using Branch Stock").Width("10%").ForeignKeyField("Model").ForeignKeyValue("Model").DataSource(((IEnumerable<object>)Model.ErfAssetsModel.UsingBranch)).ValidationRules(r => r.AddRule("required", true)).Add();
                                                                                    col.Field("Substitution").HeaderText("Substitution possible ? ").Width("10%").ForeignKeyField("Model").ForeignKeyValue("Model").DataSource(((IEnumerable<object>)Model.ErfAssetsModel.ErfSubstituion)).ValidationRules(r => r.AddRule("required", true)).Add();
                                                                                    col.Field("TransactionType").HeaderText("Trans Type").Width("10%").ForeignKeyField("Model").ForeignKeyValue("Model").DataSource(((IEnumerable<object>)Model.ErfAssetsModel.ErfTransactionTypes)).ValidationRules(r => r.AddRule("required", true)).Add();
                                                                                    col.Field("EquipmentType").HeaderText("Equipment Type").Width("10%").ForeignKeyField("Model").ForeignKeyValue("Model").DataSource(((IEnumerable<object>)Model.ErfAssetsModel.ErfEquipmentTypes)).ValidationRules(r => r.AddRule("required", true)).Add();
                                                                                    col.Field("LaidInCost").HeaderText("Laid-in-Cost").Width("10%").Type(ColumnType.Number).Format("{0:C}").ValidationRules(r => r.AddRule("min", 1).AddRule("required", true).AddRule("number", true)).AllowEditing(false).Add();
                                                                                    col.Field("RentalCost").HeaderText("Rental Cost").Width("10%").Type(ColumnType.Number).Format("{0:C}").ValidationRules(r => r.AddRule("min", 1).AddRule("required", true).AddRule("number", true)).AllowEditing(false).Add();
                                                                                    col.Field("TotalCost").HeaderText("Total").Width("10%").Type(ColumnType.Number).Format("{0:C}").ValidationRules(r => r.AddRule("min", 1).AddRule("required", true).AddRule("number", true)).AllowEditing(false).Add();


                                                                                })
                                                                                .ClientSideEvents(eve =>
                                                                                {
                                                                                    eve.ActionComplete("CompleteExpendableModels")
                                                                                    .BeginEdit("FBERFExpendableDetailsBeginEdit")
                                                                                    .ActionBegin("FBERFExpendableDetailsBegin")
                                                                                    .EndEdit("FBERFExpendableDetailsEndEdit")
                                                                                    .EndAdd("FBERFExpendableDetailsEndAdd")
                                                                                    .QueryCellInfo("queryCellInfoExpendable")
                                                                                    .ToolbarClick("onToolbarClick");
                                                                                }))
                                        @*@(Html.EJ().Grid<FarmerBrothers.Models.ERFManagementExpendableModel>
                                            ("FBERFExpendableDetails")
                                                .Datasource(ds => ds.Json((IEnumerable<object>)Model.ErfAssetsModel.ExpendableList)
                                                .UpdateURL(Url.Action("ExpendableUpdate", "Erf"))
                                                .InsertURL(Url.Action("ExpendableInsert", "Erf"))
                                                .RemoveURL(Url.Action("ExpendableDelete", "Erf"))
                                                .Adaptor(AdaptorType.RemoteSaveAdaptor))
                                                .EditSettings(edit => { edit.AllowAdding().AllowDeleting().AllowEditing(); })
                                                .AllowPaging()
                                                .ToolbarSettings(toolbar =>
                                                {
                                                    toolbar.ShowToolbar().ToolbarItems(items =>
                                                    {
                                                        items.AddTool(ToolBarItems.Add);
                                                        items.AddTool(ToolBarItems.Edit);
                                                        items.AddTool(ToolBarItems.Delete);
                                                        items.AddTool(ToolBarItems.Update);
                                                        items.AddTool(ToolBarItems.Cancel);
                                                    });
                                                })
                                                .Columns(col =>
                                                {
                                                    col.Field("ERFExpendableId").HeaderText("Expendable ID").IsPrimaryKey(true).Visible(false).Add();
                                                    col.Field("ModelNo").HeaderText("Model#").ForeignKeyField("Model").ForeignKeyValue("Model").DataSource(((IEnumerable<object>)Model.ErfAssetsModel.ErfExpendableModels))
                                                        .ValidationRules(r => r.AddRule("required", true)).Add();
                                                    col.Field("Quantity").HeaderText("Qty").Type(ColumnType.Number).ValidationRules(r => r.AddRule("min", 1).AddRule("number", true).AddRule("required", true)).Add();
                                                    col.Field("ProdNo").HeaderText("Product NO").ForeignKeyField("Product").ForeignKeyValue("Product").DataSource(((IEnumerable<object>)Model.ErfAssetsModel.ErfExpendableProducts)).Add();
                                                    col.Field("Description").HeaderText("Description").Add();
                                                    col.Field("TransactionType").HeaderText("Transaction Type").ForeignKeyField("Model").ForeignKeyValue("Model").DataSource(((IEnumerable<object>)Model.ErfAssetsModel.ErfTransactionTypes)).ValidationRules(r => r.AddRule("required", true)).Add();
                                                    col.Field("UnitPrice").HeaderText("Unit Price").AllowEditing(false).ValidationRules(r => r.AddRule("number", true)).Add();
                                                    col.Field("UnitPrice").HeaderText("Total Line Amount").AllowEditing(false).Format("{0:n2}").Add();
                                                    col.Field("Extra").HeaderText("Extra").Add();


                                                })
                                                .ClientSideEvents(eve =>
                                                {
                                                    eve.ActionComplete("CompleteExpendableModels")
                                                        .BeginEdit("FBERFExpendableDetailsBeginEdit")
                                                        .ActionBegin("FBERFExpendableDetailsBegin")
                                                        .EndEdit("FBERFExpendableDetailsEndEdit")
                                                        .EndAdd("FBERFExpendableDetailsEndAdd")
                                                        .QueryCellInfo("queryCellInfoExpendable")
                                                        .ToolbarClick("onToolbarClick");
                                                }))*@


                                    </div><!--end of .table-responsive-->
                                    <!--Add removed code -->
                                </div>
                            </div>
                            @*</div>*@
                        </div>

                        @*<div class="col-md-12">
                                <h2 class="expandible-head tabheader">POS:</h2>

                                <div class="col-md-8 customer sm-pad-reset" style="width:100%;">
                                    <div class="row">
                                        <div class="table-responsive">
                                            @(Html.EJ().Grid<FarmerBrothers.Models.ERFManagementPOSModel>
                                                    ("FBERFPOSDetails")
                                                    .Datasource(ds => ds.Json((IEnumerable<object>
                                                        )Model.ErfAssetsModel.PosList)
                                                        .UpdateURL(Url.Action("PosUpdate", "ErfNew"))
                                                        .InsertURL(Url.Action("PosInsert", "ErfNew"))
                                                        .RemoveURL(Url.Action("PosDelete", "ErfNew"))
                                                        .Adaptor(AdaptorType.RemoteSaveAdaptor))
                                                        .EditSettings(edit => { edit.AllowAdding().AllowEditing().AllowDeleting(); })
                                                        .AllowPaging()
                                                         .AllowTextWrap(true)
                                                        .ToolbarSettings(toolbar =>
                                                        {
                                                            toolbar.ShowToolbar().ToolbarItems(items =>
                                                            {
                                                                items.AddTool(ToolBarItems.Add);
                                                                //items.AddTool(ToolBarItems.Edit);
                                                                items.AddTool(ToolBarItems.Delete);
                                                                items.AddTool(ToolBarItems.Update);
                                                                items.AddTool(ToolBarItems.Cancel);
                                                            });
                                                        })
                                                        .Columns(col =>
                                                        {
                                                            col.Field("ERFPosId").HeaderText("Equipment ID").IsPrimaryKey(true).Visible(false).Add();
                                                            col.Field("Quantity").HeaderText("Qty").Width("5%").Type(ColumnType.Number).ValidationRules(r => r.AddRule("min", 1).AddRule("required", true).AddRule("number", true)).Add();
                                                            col.Field("Category").HeaderText("Equipment Category").Width("15%").ForeignKeyField("ModelId").ForeignKeyValue("ModelName").DataSource(((IEnumerable<object>)Model.ErfAssetsModel.ErfPosCategory))
                                                                .ValidationRules(r => r.AddRule("required", true)).Add();
                                                            col.Field("Brand").HeaderText("Brand - Equipment Model Number - Description").Width("20%").ForeignKeyField("ModelId").ForeignKeyValue("ModelName").DataSource(((IEnumerable<object>)Model.ErfAssetsModel.ErfPosModels))
                                                                .ValidationRules(r => r.AddRule("required", true)).HeaderTextAlign(TextAlign.Justify).Add();
                                                            col.Field("Branch").HeaderText("Using Branch Stock").Width("10%").ForeignKeyField("Model").ForeignKeyValue("Model").DataSource(((IEnumerable<object>)Model.ErfAssetsModel.UsingBranch)).ValidationRules(r => r.AddRule("required", true)).Add();
                                                            col.Field("Substitution").HeaderText("Substitution possible ? ").Width("10%").ForeignKeyField("Model").ForeignKeyValue("Model").DataSource(((IEnumerable<object>)Model.ErfAssetsModel.ErfSubstituion)).ValidationRules(r => r.AddRule("required", true)).Add();
                                                            col.Field("TransactionType").HeaderText("Trans Type").Width("10%").ForeignKeyField("Model").ForeignKeyValue("Model").DataSource(((IEnumerable<object>)Model.ErfAssetsModel.ErfTransactionTypes)).ValidationRules(r => r.AddRule("required", true)).Add();
                                                            col.Field("EquipmentType").HeaderText("Equipment Type").Width("10%").ForeignKeyField("Model").ForeignKeyValue("Model").DataSource(((IEnumerable<object>)Model.ErfAssetsModel.ErfEquipmentTypes)).ValidationRules(r => r.AddRule("required", true)).Add();
                                                            col.Field("LaidInCost").HeaderText("Laid-in-Cost").Width("10%").Type(ColumnType.Number).Format("{0:C}").ValidationRules(r => r.AddRule("min", 1).AddRule("required", true).AddRule("number", true)).AllowEditing(false).Add();
                                                            col.Field("RentalCost").HeaderText("Rental Cost").Width("10%").Type(ColumnType.Number).Format("{0:C}").ValidationRules(r => r.AddRule("min", 1).AddRule("required", true).AddRule("number", true)).AllowEditing(false).Add();
                                                            col.Field("TotalCost").HeaderText("Total").Width("10%").Type(ColumnType.Number).Format("{0:C}").ValidationRules(r => r.AddRule("min", 1).AddRule("required", true).AddRule("number", true)).AllowEditing(false).Add();
                                                        })
                                                        .ClientSideEvents(eve =>
                                                        {
                                                            eve.ActionComplete("CompletePosModels")
                                                            .BeginEdit("FBERFPosDetailsBeginEdit")
                                                            .ActionBegin("FBERFPosDetailsBegin")
                                                            .EndEdit("FBERFPosDetailsEndEdit")
                                                            .EndAdd("FBERFPosDetailsEndAdd")
                                                            .QueryCellInfo("queryCellInfoPos")
                                                            .ToolbarClick("onToolbarClick");
                                                        }))
                                        </div>
                                    </div>
                                </div>
                            </div>*@
                    </div>
                </div>

            </div>
        </div>
    </div>
</section>
                            <section class="block">
                                <div class="container-fluid">
                                    <h2 class="notes-details-head arrow-down tabheader  required">Notes</h2>
                                    @Html.Partial("_ErfNotes", Model.Notes)
                                </div>
                            </section>


                                                                    }

