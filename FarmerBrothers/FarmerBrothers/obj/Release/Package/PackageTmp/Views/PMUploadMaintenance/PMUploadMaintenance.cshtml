@{
    ViewBag.Title = "ReportsSearch";
}

@model FarmerBrothers.Models.PMSchedulesModel

@using FarmerBrothers.Data;
@using Newtonsoft.Json;
@using Syncfusion.MVC.EJ;
@using Syncfusion.JavaScript;

<style>
    .e-grid .e-toolbar > .e-horizontal.e-ul {
        vertical-align: middle;        
        height: auto;
    }

    a.disabled {
        pointer-events: none;
    }
</style>

<script type="text/javascript">
    var formDirty = false;

    var serverTimeZoneDiff = -7.0   // if your server is in EST time zone (UTC -5.0) (in hours)
    var clientSideTimeZoneDiff = new Date().getTimezoneOffset() / 60; // get client time zone differents and convert it to hours;
    ej.serverTimezoneOffset = clientSideTimeZoneDiff;

    $(document).ready(function () {
        $('#AdministratorLink').css("color", "white");
        $("#StartDate").ejDatePicker();
        //$("#DateFrom").ejDatePicker({ value: new Date($("#DateFrom").val()) });
        //$("#DateTo").ejDatePicker({ value: new Date($("#DateTo").val()) });

        $("form").submit(function (e) {

            var operation = $( "#Operation" ).val();
            //alert( operation );
            if (operation == 1 || operation == 2) {
                if (operation == 1) {
                    if(ValidateData())
                    {
                    var $this = $(this);
                    var frmValues = $this.serialize();

                    $.ajax( {
                        type: "post",
                        url: "@Url.Action("AddPMSchedule", HttpContext.Current.Request.RequestContext.RouteData.Values["controller"].ToString())",
                        data: frmValues
                    } ).done( function ( response )
                    {
                        if ( response.success == true )
                        {
                            AlertPopup( '|PMSchedule created Successfully!' );
                            window.location.href = "@Url.Action("PMUploadMaintenance", "PMUploadMaintenance")";
                        }
                        else
                        {
                            if ( response.message != null )
                            {
                                AlertPopup(response.message);
                            }
                            else
                            {
                                AlertPopup( '|Problem Saving PMSchedule! Please contact support!' );
                            }

                        }
                    } );

                }
                }

                if (operation == 2) {
                    if (ValidateSearchCriteria() == true) {
                        var frmValues = $("form").serialize();
                        $.ajax({
                            type: "post",
                            url: "@Url.Action("SearchPMSchedule", "PMUploadMaintenance")",
                            data: frmValues
                        }).done(function (result) {
                            var obj = $("#PMScheduleResults").ejGrid("instance");
                            obj.dataSource(result);
                        });
                    }
                }
            }
            e.preventDefault();
        });

        $("#pmUploadsDataSaveBtn").on("click", function () {
            $.ajax({
                url: '@Url.Action("SavePMUploadsData", "PMUploadMaintenance")',
                type: 'GET',
                success: function (jsonResult) {
                    if (jsonResult.success == true) {

                    }
                    else {
                    }
                }
            });
        });
    });

    function ValidateData() {
        var valid = true;
        if ($("#AccountNumber").val() == "" || 
            $("#CustomerName").val() == "" || 
            $("#StartDate").val() == "" || 
            $("#IntervalDuration").val() == "" || 
            $("#intervalTypeSelectBox").val() == "" ||            
            $('#CategoryTypeList option:selected').val() == "" ||
            $('#TechTypeList option:selected').val() == "" ||
            $('#ServiceCenterList option:selected').val() == "" ||
            $("#EventContact").val() == "" || 
            $("#ContactPhone").val() == "" || 
            $("#Notes").val() == "")
        {
            AlertPopup("|Please Enter Required Fields");
            valid = false;
        }

        return valid;
    }

    function SearchClear() {
        //$('.form-control').val('');
        $("#AccountNumber").val('');
        $("#CustomerName").val('');
        $("#Address").val('');
        $("#City").val('');
        $("#State").val('');
        $("#StartDate").val('');
        $("#IntervalDuration").val('');
        $("#IntervalType").val('');
        $("#ProjectNumber").val('');
        $("#TechJDE").val('');
        $("#TechName").val('');
        $("#EventContact").val('');
        $("#ContactPhone").val('');
        $("#Notes").val('');

        $("#TechTypeList").val('');
        $("#CategoryTypeList").val('');
        $("#ServiceCenterList").val('');
    }

    function ValidateSearchCriteria()
    {
        var valid = true;
        //if ($('#DateFrom').val() == ""
        //        && $('#DateTo').val() == "" && $("#CustomerJDE").val() == "")
        //{
        //    AlertPopup("|Please Enter any search criteria");
        //    valid = false;
        //}
        //if(($('#DateFrom').val() != "" && $('#DateTo').val() == "") || ($('#DateFrom').val() == "" && $('#DateTo').val() != ""))
        //{
        //    AlertPopup("|Please Enter both start and End Date");
        //    valid = false;
        //}
        if ($("#CustomerJDE").val() == "") {
            AlertPopup("|Please Enter Customer# search criteria");
            valid = false;
        }
        return valid;
    }

    function ClearPMScheduleSearchResults() {
        //$('.form-control').val('');
        $("#CustomerJDE").val('');

        $.ajax({
            type: "post",
            url: "@Url.Action("ClearPMScheduleResults", "PMUploadMaintenance")",
        }).done(function( result ) {
            var obj = $("#PMScheduleResults").ejGrid("instance");
            obj.dataSource(result);
        });
        return false;
    }

    var id; var contactId; var customerName; var contactName; var techId; var techName; var phone; var startDate; var intervalDuration; var intervalType; var nextRunDate; var isActive; var category; var notes;

    function PMScheduleResultsBeginedit(args) {
    }

    function PMScheduleResultsBegin(args) {
        $('#PMUloadContacts_WaitingPopup').css("visibility", "hidden");
    }
    function PMScheduleResultsEndEdit(args) {

        id = args.data.ID;
        contactId = args.data.ContactID;
        customerName = args.data.CustomerName;
        contactName = args.data.ContactName;
        techId = args.data.TechID;
        techName = args.data.TechName;
        phone = args.data.Phone;
        startDate = (((args.data.StartDate.getDate()) >= 10) ? (args.data.StartDate.getDate()) : '0' + (args.data.StartDate.getDate())) + "/" + (((args.data.StartDate.getMonth() + 1) >= 10) ? (args.data.StartDate.getMonth() + 1) : '0' + (args.data.StartDate.getMonth() + 1)) + "/" + args.data.StartDate.getFullYear();
        intervalType = args.data.IntervalType;
        intervalDuration = args.data.IntervalDuration;
        nextRunDate = args.data.NextRunDate;//.getDate(); + "/" + (((args.data.NextRunDate.getMonth() + 1) >= 10) ? (args.data.NextRunDate.getMonth() + 1) : '0' + (args.data.NextRunDate.getMonth() + 1)) + "/" + args.data.NextRunDate.getFullYear();;
        isActive = args.data.IsActive;
        category = args.data.Category;
        notes = args.data.Notes;

        $('#PMUloadContacts_WaitingPopup').css("visibility", "hidden");
    }
    function PMScheduleResultsEndAdd(args) {
        $('#PMUloadContacts_WaitingPopup').css("visibility", "hidden");
    }


    function PMScheduleResultsActionComplete(args) {
        if (args.requestType == "save") {
            $.ajax({
                url: '@Url.Action("PMScheduleResultsDataUpdate", "PMUploadMaintenance")',
                type: 'POST',
                data: {
                    "ID": id, "ContactId": contactId, "CustomerName": customerName, "ContactName": contactName, "TechID": techId, "TechName": techName, "Phone": phone, "StartDate": startDate, "IntervalDuration": intervalDuration, "IntervalType": intervalType, "NextRunDate": nextRunDate, "IsActive": isActive, "Category": category, "Notes":notes
                },
                success: function (jsonResult) {
                    //AlertPopup(jsonResult.message);
                }
            });
        }
    }

    function onToolbarClick(args) {
        if ((args.itemName == "Edit" || args.itemName == "Delete") & this.getSelectedRecords().length == 0) {

            //prevent the default alert popup
            alert = function () { };

            //here you can call your own customize alert method
            AlertPopup("|No records selected for " + args.itemName + " operation");

        }
    }

    function SetSubmitOperation(operation) {
        $("#Operation").val(operation);
    }

    function TechTypeChange() {

        var techType = $('#TechTypeList option:selected').val();
        $('#ServiceCenterList').empty();
        if (techType.toLowerCase() == 'nearest tech') {
            $("#ServiceCenterList").prop("disabled", true);
        }
        else {
            $("#ServiceCenterList").prop("disabled", false);
            $.ajax({
                url: "@Url.Action("GetServiceCenter", "Workorder")",
                data: { TechType: techType }
            }).done(function (data) {
                for (var i = 0 ; i < data.length; i++) {
                    $('#ServiceCenterList').append('<option value=' + data[i].Id + '>' + data[i].Name + '</option>');
                }
            });
        }
    }

    function ServiceCenterChange()
    {
        $('#TechnicianList').empty();
        $('#TechnicianIdList').empty();
        $('#TeamLeadList').empty();

        $.ajax({
            url: "@Url.Action("GetTechnician", "Workorder")",
            data: { serviceCenterId: $('#ServiceCenterList option:selected').val() }
    }).done(function( data ) {
        for (var i = 0 ; i < data.length; i++) {
            $('#TechnicianList').append('<option value=' + data[i].TechId + '>' + data[i].TechName + '</option>');
            $('#TechnicianIdList').append('<option value=' + data[i].TechId + '>' + data[i].TechId + '</option>');
        }
    });

    $.ajax({
        url: "@Url.Action("GetTeamLeads", "Workorder")",
        data: { serviceCenterId: $('#ServiceCenterList option:selected').val() }
    }).done(function( data ) {
        for (var i = 0 ; i < data.length; i++) {
            $('#TeamLeadList').append('<option value=' + data[i].Id + '>' + data[i].Name + '</option>');
        }
    });
    }
</script>
<script type="text/javascript">
    function create() {
        return "<textarea style='resize:none; width:100%'>{{:Notes}}</textarea>";
    }

    function read(args) {
        return args.val();
    }
</script>

@using (Html.BeginForm())
{
  @Html.HiddenFor(m => m.Operation)
    <section class="block margin-top">
        <div class="container-fluid">
            <h2 class="customer-head arrow-down tabheader">Add PMSchedule</h2>
            <div class="customer-content margin-top">
                <div class="row customer clear-input">
                    <div class="col-md-12  sm-pad-reset">
                        <div class="col-sm-2">
                            <div class="col-md-12">
                                <div class="form-group">
                                    <span class="required">Account#:</span>
                                    @Html.TextBoxFor(c => c.AccountNumber, new { Value = "", @class = "form-control" })
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-2">
                            <div class="col-md-12">
                                <div class="form-group">
                                    <span class="required">Company Name:</span>
                                    @Html.TextBoxFor(c => c.CustomerName, new { Value = "", @class = "form-control" })
                                </div>
                            </div>
                        </div>
                        @*<div class="col-sm-2">
                            <div class="col-md-12">
                                <div class="form-group">
                                    <span class="required">Address:</span>
                                    @Html.TextBoxFor(c => c.Address, new { Value = "", @class = "form-control" })
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-2">
                            <div class="col-md-12">
                                <div class="form-group">
                                    <span class="required">City:</span>
                                    @Html.TextBoxFor(c => c.City, new { @class = "form-control" })
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-2">
                            <div class="col-md-12">
                                <div class="form-group">
                                    <span class="required">State:</span>
                                    @Html.DropDownListFor(c => c.State, new SelectList(Model.States, "StateCode", "StateName"), new { @Id = "StatesDropDown", @class = "form-control" })
                                </div>
                            </div>
                        </div>



                    </div>

                    <div class="col-md-12 sm-pad-reset">*@
                        <div class="col-sm-2">
                            <div class="col-md-12">
                                <div class="form-group">
                                    <span>Start Date:</span>
                                    @Html.TextBoxFor(c => c.StartDate, new { @class = "form-control SearchPanelControl", @Id = "StartDate" })
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-2">
                            <div class="col-md-12">
                                <div class="form-group">
                                    <span class="required">Interval Duration:</span>
                                    @Html.TextBoxFor(c => c.IntervalDuration, new { Value = "", @class = "form-control", @type = "number", @onkeydown = "javascript: return event.keyCode == 69 ? false : true" })
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-2">
                            <div class="col-md-12">
                                <div class="form-group">
                                    <span class="required">Interval Type:</span>
                                    @Html.DropDownListFor(c => c.IntervalType, new SelectList(Model.intervalTypeList, "Category", "Category", "None"), new { @class = "form-control SearchPanelControl", @Id = "intervalTypeSelectBox" })
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-2">
                            <div class="col-md-12">
                                <div class="form-group">
                                    <span>Project Number:</span>
                                    @Html.TextBoxFor(c => c.ProjectNumber, new { @class = "form-control" })
                                </div>
                            </div>
                        </div>
                    </div>





                    <div class="col-md-12 sm-pad-reset">
                        <div class="col-sm-2">
                            <div class="col-md-12">
                                <div class="form-group">
                                    <span class="required">Equipment Type:</span>
                                    @Html.DropDownListFor(c => c.Catregory, new SelectList(Model.TaggedCategories, "Category", "Category"), new { @class = "form-control SearchPanelControl", @Id = "CategoryTypeList" })
                                </div>
                            </div>
                        </div>
                        
                        <div class="col-sm-2">
                            <div class="col-md-12">
                                <div class="form-group">
                                    <span class="required">Tech Type:</span>
                                    @Html.DropDownListFor(c => c.TechType, new SelectList(Model.TechTypeList), new { @class = "form-control SearchPanelControl", @Id = "TechTypeList", onchange = "TechTypeChange(this)" })
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-2">
                            <div class="col-md-12">
                                <div class="form-group">
                                    <span>Technician:</span>
                                    @Html.DropDownListFor(c => c.serviceCenter, new SelectList(Model.ServiceCenterList, "Id", "Name"), new { @class = "form-control SearchPanelControl", @Id = "ServiceCenterList", onchange = "ServiceCenterChange(this)" })
                                </div>
                            </div>
                        </div>                    
    
    @*<div class="col-sm-2">
                            <div class="col-md-12">
                                <div class="form-group">
                                    <span class="required">Tech#:</span>
                                    @Html.TextBoxFor(c => c.TechJDE, new { @class = "form-control" })
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-2">
                            <div class="col-md-12">
                                <div class="form-group">
                                    <span class="required">Tech Name:</span>
                                    @Html.TextBoxFor(c => c.TechName, new { @class = "form-control" })
                                </div>
                            </div>
                        </div>*@
                        <div class="col-sm-2">
                            <div class="col-md-12">
                                <div class="form-group">
                                    <span class="required">Event Contact:</span>
                                    @Html.TextBoxFor(c => c.EventContact, new { @class = "form-control" })
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-2">
                            <div class="col-md-12">
                                <div class="form-group">
                                    <span class="required">Contact Phone:</span>
                                    @Html.TextBoxFor(c => c.ContactPhone, new { @class = "form-control" })
                                </div>
                            </div>
                        </div>

                    </div>

                    <div class="col-md-12 sm-pad-reset">
                        <div class="col-sm-2">
                            <div class="col-md-12">
                                <div class="form-group">
                                    <span class="required">Notes:</span>
                                    @Html.TextAreaFor(c => c.Notes, new { @class = "form-control" })
                                </div>
                            </div>
                        </div>

                        <div class="col-sm-2">
                            <div class="col-sm-6-o">
                                <div class="col-md-12" style="margin-top: 19px;">
                                    <button type="submit" onclick="SetSubmitOperation(1)" class="btn btn-primary">Create</button>
                                    <a onclick="SearchClear()" class="btn btn-orange">Clear</a>
                                </div>
                            </div>
                        </div>
                    </div>

                </div>
            </div>
        </div>
    </section>



    <section class="container-fluid white-bg pad">
        <div class="row top-info">
            <div class="col-md-11">
                <b>Update PMSchedule</b>
            </div>            
        </div>
    </section>

    <section class="well">
        <div class="row top-info">
            <div class="customer-content margin-top">
                <div class="row customer clear-input">
                    <div class="col-md-12">
                        @*<div class="col-md-2">
                            <div class="form-group right-inner-addon">
                                Start Date :
                                @Html.TextBoxFor(c => c.DateFrom, new { @class = "form-control SearchPanelControl", @Id = "DateFrom" })
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="form-group right-inner-addon">
                                END Date :
                                @Html.TextBoxFor(c => c.DateTo, new { @class = "form-control SearchPanelControl", @Id = "DateTo" })
                            </div>
                        </div>*@
                        <div class="col-md-2">
                            <div class="form-group right-inner-addon">
                                Account No :
                                @Html.TextBoxFor(c => c.CustomerJDE, new { @class = "form-control SearchPanelControl", @Id = "CustomerJDE" })
                            </div>
                        </div>
                        @*<div class="col-md-2">
                                <div class="form-group right-inner-addon">
                                    Tech ID :
                                    @Html.TextBoxFor(c => c.TechJDE, new { @class = "form-control SearchPanelControl", @Id = "TechJDE" })
                                </div>
                            </div>*@

                        <div class="col-md-2">
                            <div class="form-group right-inner-addon" style="top:1.3em;">
                                <button type="submit" onclick="SetSubmitOperation(2)" class="btn btn-primary">Search</button>
                                <a onclick="ClearPMScheduleSearchResults()" class="btn btn-orange">Clear</a>
                            </div>
                        </div>


                    </div>

                </div>
            </div>

        </div>
    </section>



<section class="block margin-top">
    <div class="container-fluid">        
        <div class="row">
            <div class="col-xs-12 col-sm-12 col-md-12">
                <section class="block margin-top">
                    <div class="container-fluid">
                        @*<h2 class="customer-head arrow-down tabheader">Update Customer ZipCode</h2>*@
                        <div class="customer-content margin-top">
                            <button id="pmUploadsDataSaveBtn" type="button" style="display: inline-block;margin:5px;float:right;" class="btn btn-primary">Save</button>
                            <div class="row customer clear-input">
                                <div class="col-md-12  sm-pad-reset">


                                    @(Html.EJ().Grid<object>("PMScheduleResults")
        .Datasource(ds => ds.Json((IEnumerable<object>)Model.SearchResults)
         .UpdateURL("CellEditUpdate")
         .Adaptor(AdaptorType.RemoteSaveAdaptor))
        .AllowPaging()
        .AllowFiltering()
        .AllowScrolling()
        //.Mappers(map => map.ExportToExcelAction(Url.Action("PMScheduleExcelExport", "PMUploadMaintenance")))
        .FilterSettings(filter => { filter.FilterType(FilterType.Menu); })
         .EditSettings(edit => { edit.AllowDeleting().AllowEditing(); })
                                        .ToolbarSettings(toolbar =>
                                        {
                                            toolbar.ShowToolbar().ToolbarItems(items =>
                                            {
                                                //items.AddTool(ToolBarItems.ExcelExport);
                                                //items.AddTool(ToolBarItems.Add);
                                                items.AddTool(ToolBarItems.Update);
                                                items.AddTool(ToolBarItems.Edit);
                                                items.AddTool(ToolBarItems.Cancel);
                                            });
                                        })
                                        .ClientSideEvents(eve =>
                                        {
                                            eve.BeginEdit("PMScheduleResultsBeginedit")
                                            .ActionBegin("PMScheduleResultsBegin")
                                            .EndEdit("PMScheduleResultsEndEdit")
                                            .EndAdd("PMScheduleResultsEndAdd")
                                            .ActionComplete("PMScheduleResultsActionComplete")
                                            .ToolbarClick("onToolbarClick");
                                        })
        .Columns(col =>
        {
            col.Field("ID").HeaderText("RID").IsPrimaryKey(true).TextAlign(TextAlign.Right).Visible(false).Add();
            col.Field("ContactID").HeaderText("Account#").ValidationRules(r => r.AddRule("required", true)).AllowEditing(false).Width(100).Add();
            col.Field("CustomerName").HeaderText("Customer Name").ValidationRules(r => r.AddRule("required", true)).AllowEditing(false).Width(100).Add();
            col.Field("ContactName").HeaderText("Contact Name").ValidationRules(r => r.AddRule("required", true)).AllowEditing(false).Width(100).Add();
            col.Field("Category").HeaderText("Equipment Type").AllowEditing(false).Width(100).Add();
            col.Field("TechID").HeaderText("Tech #").ValidationRules(r => r.AddRule("required", true)).AllowEditing(false).Width(100).Add();
            col.Field("TechName").HeaderText("Tech Name").ValidationRules(r => r.AddRule("required", true)).AllowEditing(false).Width(100).Add();
            col.Field("Phone").HeaderText("Phone").ValidationRules(r => r.AddRule("required", true)).AllowEditing(false).Width(100).Add();
            col.Field("StartDate").HeaderText("Start Date").Format("{0:MM/dd/yyyy HH:mm:ss}").ValidationRules(r => r.AddRule("required", true)).EditType(EditingType.Datepicker).Width(100).Add();
            col.Field("IntervalType").HeaderText("Interval Type").ForeignKeyField("Category").ForeignKeyValue("Category").DataSource(((IEnumerable<object>)Model.intervalTypeList)).Width(100).Add();
            col.Field("IntervalDuration").HeaderText("Interval Duration").Width(100).Add();
            col.Field("NextRunDate").HeaderText("Next Run Date").AllowEditing(false).Width(100).Add();//.Format("{0:MM/dd/yyyy HH:mm:ss}").ValidationRules(r => r.AddRule("required", true)).EditType(EditingType.Datepicker).Add();
            col.Field("Notes").HeaderText("Notes").TextAlign(TextAlign.Right).Width(250).Add();            
            col.Field("IsActive").HeaderText("IsActive").EditType(EditingType.Boolean).Width(100).Add();

        })
                                    )
                                </div>
                            </div>

                        </div>
                    </div>
                </section>


            </div>
        </div>
    </div>
</section>
}