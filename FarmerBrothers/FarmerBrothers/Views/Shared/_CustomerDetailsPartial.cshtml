@model FarmerBrothers.Models.CustomerModel

@{
    ViewBag.Title = "CustomerDetails";
}
<script src="~/Scripts/web/ej.web.all.min.js"></script>
<link href="~/Content/ej/web/bootstrap-theme/ej.web.all.min.css" rel="stylesheet" />

<script src="~/Content/jquery.validate.min.js"></script>
<script src="~/Content/jquery.validate.unobtrusive.min.js"></script>


@using FarmerBrothers.Models;
@using Syncfusion.MVC.EJ;
@using Syncfusion.JavaScript;


<script type="text/javascript">
    var formDirty = false;
    var updateCustomerOperation = false;
    var updateUrl = null;

    $(document).ready(function () {

        $("#erfStatusLbl").show();
        $("#ERFStatus").hide();
        $("#erfStatusEditBtn").show();
        $("#erfStatusSaveBtn").hide();
        $("#erfStatusCancelBtn").hide();
        //$( '#PhoneNumber' ).keypress( function ()
        //{
        //    return this.value.length < 10
        //} )

        $('#ZipCode').keypress(function () {
            return this.value.length < 5
        })

        $(".CustomerData").change(function () {
            formDirty = true;
        });

        $('#ContactHistory').ejGrid({
            isResponsive: true,
            enableResponsiveRow: true,
            allowSorting: true,
            allowTextWrap: true,
            dataSource: @Html.Raw(Json.Encode(Model.PastContacts)),
            columns: [
                { field: "Contact", headerText: "Contact" },
                { field: "PhoneNumber", headerText: "Phone Number" }
            ]
        });

        $("[data-popup-close='popupalert']").click(function() {
            if(updateUrl != null)
            {
                window.location.href = updateUrl;
            }
        });


        $("form").submit(function (event) {
            if (ValidateCustomerModel()) {
                if (updateCustomerOperation == true)
                {
                    // alert("2");
                    if (formDirty == true)
                    {
                        if (($( '#MainEmailAddress' ).val() !='' && ValidateEmail( $( '#MainEmailAddress' ).val() ) == true) ||
                            $( '#MainEmailAddress' ).val() =='') {

                            if (($( '#PhoneNumber' ).val() !='' && ValidatePhoneNumber( $( '#PhoneNumber' ).val() ) == true) ||
                            ($( '#PhoneNumber' ).val() =='')) {
                                var input = $("<input>")
                                .attr("type", "hidden")
                                .attr("name", "action:UpdateCustomer").val("");
                                $(this).append($(input));
                                //alert("4");
                                var $this = $(this);
                                var frmValues = $this.serialize();
                                //alert(JSON.stringify(frmValues));
                                $.ajax({
                                    type: $this.attr('method'),
                                    url: "@Url.Action("UpdateCustomer", HttpContext.Current.Request.RequestContext.RouteData.Values["controller"].ToString())",
                                    data: frmValues
                                }).done(function( response ) {
                                    debugger;
                                    if (response.success == true)
                                    {
                                        if(response.serverError == false)
                                        {
                                            AlertPopup('|Customer Details Updated Successfully!');
                                            formDirty = false;
                                            location.reload();
                                        }
                                        else{
                                            AlertPopup('|Please enter valid Zip Code!');
                                        }
                                    }
                                    else
                                    {
                                        AlertPopup('|There is a problem in sending updated customer details mail! Please contact support!');
                                    }
                                });
                            }
                            else
                            {

                            }

                        }
                        else{

                        }

                    }
                    else
                    {
                        AlertPopup('|No Changes to Update!');
                    }
                    updateCustomerOperation = false;
                }
            }

            event.preventDefault();
        });


        $('#ParentNumber').bind('keydown paste', function(){
            if ( event.keyCode == 46 || event.keyCode == 8 ) {
                // let it happen, don't do anything
            }
            else {
                // Ensure that it is a number and stop the keypress
                if (event.keyCode < 48 || event.keyCode > 57 ) {
                    event.preventDefault(); 
                }   
            }
        });

        ParentNumberTxtBoxAccess(); //Initially when the Event is opened, to mark the checkbox

    });

    function ParentNumberTxtBoxAccess()
    {
        var val = $(".IsNonFBCustomerChk").is(":checked");
        if(val == true)
        {
            var nonFNCustomerParentId = @System.Configuration.ConfigurationManager.AppSettings["NonFBCustomerParentID"];
            $("#ParentNumber").prop('readonly', true).val(nonFNCustomerParentId);
        }
        else
        {
            $("#ParentNumber").prop('readonly', false).val("");
        }
    }

    function ValidateCustomerModel()
    {

        var result = true;
        if ($('#CustomerName').val().length > 100 || $('#Address').val().length > 150 || $('#Address2').val().length > 100 || $('#City').val().length > 50||
            $('#ZipCode').val().length > 12 || $('#MainContactName').val().length > 50 || $('#PhoneNumber').val().length > 30 || $('#MainEmailAddress').val().length > 150) {
            result = false;
        }
        return result;
    }

    function ValidatePhoneNumber( phone )
    {
        return true;
        //if ( phone.replace(/\W+/g, '').length ==10 )
        //{
        //    return true;
        //}
        //else
        //{
        //    AlertPopup( "|Please Enter Valid Phone Number" );
        //    return false;
        //}
    }

    function ValidateEmail( sEmail )
    {
        var filter = /^([\w-\.]+)@@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([\w-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)$/;
        if ( filter.test( sEmail ) )
        {
            //alert("email check")
            return true;
        }
        else
        {
            AlertPopup( "|Please Enter Valid Email" );
            return false;
        }
    }
    function SetUpdateCustomerOperation() {
        if ($('#ZipCode').val() == "") {
            updateCustomerOperation = false;
            AlertPopup('|Please enter valid Zip Code!');
        }
        else{
            updateCustomerOperation = true;
        }

    }

    function onEditErfStatusClick()
    {
        $("#erfStatusLbl").hide();
        $("#ERFStatus").show();
        $("#erfStatusEditBtn").hide();
        $("#erfStatusSaveBtn").show();
        $("#erfStatusCancelBtn").show();
    }
    function onSaveErfStatusClick()
    {
        Status = $("#ERFStatus").val();

        if(Status != " ")
        {
            $.ajax({
                type: "POST",
                url: "@Url.Action("ERFStatusSave", "Erf")",
                data: { Status: Status, CustomerID: $("#CustomerId").val(), ERFId: $('#ErfID').val() }
            }).done(function (jsonResult) {
                updateUrl = jsonResult.Url;
                AlertPopup(jsonResult.message);
            });

            $("#erfStatusLbl").show();
            $("#ERFStatus").hide();
            $("#erfStatusEditBtn").show();
            $("#erfStatusSaveBtn").hide();
            $("#erfStatusCancelBtn").hide();
        }
        else
        {
            AlertPopup("Please Select a valid Status to Update");
        }
    }
    function onCancelErfStatusClick()
    {
        $("#erfStatusLbl").show();
        $("#ERFStatus").hide();
        $("#erfStatusEditBtn").show();
        $("#erfStatusSaveBtn").hide();
        $("#erfStatusCancelBtn").hide();
    }

    function NonFbCustomerChange()
    {
        ParentNumberTxtBoxAccess();        
    }

    //function PhoneValidation(evt) {
    //    var charCode = (evt.which) ? evt.which : event.keyCode;
    //    //if ((charCode >= 48 && charCode <=57)|| charCode ==40 || charCode ==41 || charCode ==45)
    //    if (charCode >= 48 && charCode <=57)
    //        return true;

    //    return false;
    //}
</script>

<section class="block margin-top">
    <div class="container-fluid">
        <h2 class="customer-head arrow-down tabheader">Customer</h2>
        @*<div class="form-group"><button type="submit" style="display: inline-block;margin-right:5px;margin-top:5px;" class="btn btn-primary" onclick="SetUpdateCustomerOperation();" name="action:UpdateCustomer">Submit Update</button>*@
        @*<div class="form-group"><button type="submit" style="margin-top:5px;float:right;" class="btn btn-primary" onclick="SetUpdateCustomerOperation();" name="action:UpdateCustomer">Update</button>*@

    </div>
    <div class="customer-content margin-top">
        <div class="row clear-input">
            <div class="col-md-12">
                @*<div class="form-group"><button type="submit" style="margin-top:5px;float:right;" class="btn btn-primary" onclick="SetUpdateCustomerOperation();" name="action:UpdateCustomer">Update</button></div>*@

            </div>
            <div class="col-md-4 customer-col1 customer sm-pad-reset">
            @if (Model.unknownCustomer || Model.CustomerId == null)
            {
                <div class="col-xs-6-o">
                    <span class="col-md-5">Non-FB Customer: </span>
                    <span class="col-md-7">
                        <div class="form-group">                            
                            <input @(Convert.ToBoolean(Model.IsNonFBCustomer) == true ?   "checked='checked'" : string.Empty) type="checkbox" 
                                  onchange="NonFbCustomerChange()" class="IsNonFBCustomerChk"/>                           
                        </div>
                    </span>
                </div>
                   <div class="col-xs-6-o">
                    <span class="col-md-5">Parent Number:</span>
                    <span class="col-md-7">
                            <div class="form-group">
                                @Html.TextBoxFor(c => c.ParentNumber, new { @type = "number", @class = "form-control CustomerData inputFields" })
                            </div>
                    </span>
                </div>                
            }
                <div class="col-xs-6-o">
                    <span class="col-md-5">Account Number:</span>
                    <span class="col-md-7">
                        <div class="col-md-4">
                            <div class="form-group">
                                <div>@Html.ValueFor(c => c.CustomerId)</div>
                                @Html.HiddenFor(c => c.CustomerId)
                            </div>
                        </div>
                        @*<div class="col-md-8">
                                <div>@Model.CurrentTime</div>
                                <div>@Model.CustomerTimeZone</div>
                            </div>*@
                    </span>
                </div>
                <div class="col-sm-6-o">
                    <span class="col-md-5">Customer Name:</span>
                    <div class="col-md-7">
                        <div class="form-group">
                        @if ((Model.CustomerName != null && Model.CustomerName.ToLower().Contains("-cm")) 
                            || (Model.PricingParent != null && Model.PricingParent.ToLower().Contains("core-mark")))
                        {
                            @Html.TextBoxFor(c => c.CustomerName, new { @class = "form-control CustomerData inputFields", @style = "color:#FF0000;" })
                        }
                        else
                        {
                            @Html.TextBoxFor(c => c.CustomerName, new { @class = "form-control CustomerData inputFields" })
                        }
                            @Html.ValidationMessageFor(m => m.CustomerName, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="col-sm-6-o">
                    <span class="col-md-5">Address1:</span>
                    <div class="col-md-7">
                        <div class="form-group">
                            @Html.TextBoxFor(c => c.Address, new { @class = "form-control CustomerData inputFields" })
                            @Html.ValidationMessageFor(m => m.Address, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="col-sm-6-o">
                    <span class="col-md-5">Address2:</span>
                    <div class="col-md-7">
                        <div class="form-group">
                            @Html.TextBoxFor(c => c.Address2, new { @class = "form-control CustomerData inputFields" })
                            @Html.ValidationMessageFor(m => m.Address2, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="col-sm-6-o">
                    <span class="col-md-5">City:</span>
                    <div class="col-md-7">
                        <div class="form-group">
                            @Html.TextBoxFor(c => c.City, new { @class = "form-control CustomerData inputFields" })
                            @Html.ValidationMessageFor(m => m.City, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="col-sm-6-o">
                    <span class="col-md-5">State:</span>
                    <div class="col-md-7">
                        <div class="form-group">
                            @Html.DropDownListFor(c => c.State, new SelectList(Model.States, "StateCode", "StateName"), new { @class = "form-control CustomerData inputFields" })
                        </div>
                    </div>
                </div>
                <div class="col-sm-6-o">
                    <span class="col-md-5  required">Zip Code:</span>
                    <div class="col-md-7">
                        <div class="form-group">
                            @Html.TextBoxFor(c => c.ZipCode, new { @type = "number", @class = "form-control CustomerData inputFields" })
                            @Html.ValidationMessageFor(m => m.ZipCode, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>

                @if (string.Compare(HttpContext.Current.Request.RequestContext.RouteData.Values["controller"].ToString(), "ErfNew", true) == 0)
                {
                    <div class="col-sm-6-o">
                        <span class="col-md-5 required">Main Contact Name:</span>
                        <div class="col-md-7">
                            <div class="form-group">
                                @Html.TextBoxFor(c => c.MainContactName, new { @class = "form-control CustomerData inputFields" })
                                @Html.ValidationMessageFor(m => m.MainContactName, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-6-o">
                        <span class="col-md-5 required">Phone Number:</span>
                        @*<div class="col-md-3">
                            <div class="form-group">
                                @Html.TextBoxFor(c => c.AreaCode, new { @class = "form-control CustomerData inputFields @style = "margin-left:20px" " })
                            </div>
                        </div>*@
                        <div class="col-md-7">
                            <div class="form-group">
                                @Html.TextBoxFor(c => c.PhoneNumber, new { @class = "form-control CustomerData inputFields" })
                                @Html.ValidationMessageFor(m => m.PhoneNumber, "", new { @class = "text-danger" })

                                @*@Html.EJ().MaskEditTextBoxFor(c => c.PhoneNumber).WatermarkText("Phone number").MaskFormat("(999)999-9999").Width("280").ShowError(true)*@
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    <div class="col-sm-6-o">
                        <span class="col-md-5">Main Contact Name:</span>
                        <div class="col-md-7">
                            <div class="form-group">
                                @Html.TextBoxFor(c => c.MainContactName, new { @class = "form-control CustomerData inputFields" })
                                @Html.ValidationMessageFor(m => m.MainContactName, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-6-o">
                        <span class="col-md-5">Phone Number:</span>
                        @*<div class="col-md-3">
                                <div class="form-group">
                                    @Html.TextBoxFor(c => c.AreaCode, new { @class = "form-control CustomerData inputFields @style = "margin-left:20px" " })
                                </div>
                            </div>*@
                        <div class="col-md-7">
                            <div class="form-group">
                                @Html.TextBoxFor(c => c.PhoneNumber, new { @class = "form-control CustomerData inputFields" })
                                @Html.ValidationMessageFor(m => m.PhoneNumber, "", new { @class = "text-danger" })

                                @*@Html.EJ().MaskEditTextBoxFor(c => c.PhoneNumber).WatermarkText("Phone number").MaskFormat("(999)999-9999").Width("280").ShowError(true)*@
                            </div>
                        </div>
                    </div>
                }
                <div class="col-sm-6-o">
                    <span class="col-md-5">Email Address:</span>
                    <div class="col-md-7">
                        <div class="form-group">
                            @Html.TextBoxFor(c => c.MainEmailAddress, new { @class = "form-control CustomerData inputFields" })
                            @Html.ValidationMessageFor(m => m.MainEmailAddress, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="col-sm-6-o">
                    <span class="col-md-5">

                        @*<div class="form-group"><button type="submit" style="display: inline-block;margin-right:5px;margin-top:5px;" class="btn btn-primary" onclick="SetUpdateCustomerOperation();" name="action:UpdateCustomer">Submit Update</button></div>*@


                    </span>

                </div>
            </div>

            <div class="col-md-8 customer sm-pad-reset">
                <div class="row">
                    <div class="col-md-6 customer-col2">
                        <div class="col-xs-6-o">
                            <span class="col-md-5">Preferred Provider:</span>
                            <span class="col-md-7">@Model.PreferredProvider</span>
                        </div>
                        <div class="col-xs-6-o">
                            <span class="col-md-5">Manager Name:</span>
                            <span class="col-md-7">@Model.ManagerName</span>
                        </div>
                        @*<div class="col-xs-6-o">
                            <span class="col-md-5">DSM Name:</span>
                            <span class="col-md-7">@Model.DSMName</span>
                        </div>*@
                        <div class="col-xs-6-o">
                            <span class="col-md-5">First Contact (ESM):</span>
                            <span class="col-md-7">@Model.ESMName</span>
                        </div>                        
                        <div class="col-xs-6-o">
                            <span class="col-md-5">Second Contact (CCM):</span>
                            <span class="col-md-7">@Model.CCMName</span>
                        </div>
                        <div class="col-xs-6-o">
                            <span class="col-md-5">Third Contact (RSM):</span>
                            <span class="col-md-7">@Model.RSMName</span>
                        </div>
                        <div class="col-xs-6-o">
                            <span class="col-md-5">Branch:</span>
                            <span class="col-md-7">@Model.Branch</span>
                        </div>
                        <div class="col-xs-6-o">
                            <span class="col-md-5">Pricing Parent:</span>
                            <span class="col-md-7">@Model.PricingParent</span>
                        </div>
                        <div class="col-xs-6-o">
                            <span class="col-md-5">Service Tier:</span>
                            <div class="form-group">
                                <span class="col-md-7">@Model.ServiceTier</span>
                                @Html.HiddenFor(c => c.ServiceTier)
                            </div>
                        </div>
                        @*<div class="col-xs-6-o">
                                <span class="col-md-5">Service Level:</span>
                                <span class="col-md-7">@Model.ServiceLevel</span>
                            </div>*@
                        <div class="col-xs-6-o">
                            <span class="col-md-5">Total calls:</span>
                            <span class="col-md-7">@Model.TotalCallsCount</span>
                        </div>
                        <div class="col-xs-6-o">

                        </div>
                        <div class="col-sm-6-o">
                        </div>

                        @{
                            Dictionary<string, string> UserPrivilege = (Dictionary<string, string>)System.Web.HttpContext.Current.Session["UserPrivilege" + (int)System.Web.HttpContext.Current.Session["UserId"]] == null
                                ? Security.GetUserPrivilegeByUserId((int)System.Web.HttpContext.Current.Session["UserId"], null) :
                                (Dictionary<string, string>)System.Web.HttpContext.Current.Session["UserPrivilege" + (int)System.Web.HttpContext.Current.Session["UserId"]];
                            if (((@Model.WorkOrderId != null) || (@Model.ErfId != null)) && (UserPrivilege["Customer"] == "Edit-Only" || UserPrivilege["Customer"] == "Full"))
                            {
                                <div class="col-sm-6-o">
                                    <span class="col-md-5">

                                        <div class="form-group"><button type="submit" style="display: inline-block;margin-right:5px;margin-top:5px;" class="btn btn-primary" onclick="SetUpdateCustomerOperation();" name="action:UpdateCustomer">Update</button></div>


                                    </span>

                                </div>
                            }
                        }


                        <div class="col-xs-6-o">
                            <span class="col-md-5">Service Level:</span>
                            <span class="col-md-7">@Model.ServiceLevelDesc</span>
                        </div>

                        <div class="col-xs-6-o">
                            <span class="col-md-5">Payment terms:</span>
                            <span class="col-md-7">@Model.PaymentTermDesc</span>
                        </div>

                    @if (string.Compare(HttpContext.Current.Request.RequestContext.RouteData.Values["controller"].ToString(), "Erf", true) == 0)
                    {
                        @*<span id="erfId" class="col-md-7" style="visibility:hidden;">@Model.ErfId</span>*@
                        @*<input id="erfId" class="col-md-7" style="visibility:hidden;" value="@Model.ErfId"/>*@

                        if ((UserPrivilege["ERFStatusUpdate"] == "Edit-Only" || UserPrivilege["ERFStatusUpdate"] == "Full"))
                        {
                            <div class="col-xs-6-o">
                                <span class="col-md-5">ERF Status:</span>
                                <span class="col-md-7">
                                    <span class="col-md-7" id="erfStatusLbl">@Model.ERFStatus</span>

                                    @Html.DropDownListFor(c => c.ERFStatus, new SelectList(Model.ERFStatusList, "StatusName", "StatusName"), new { @class = "form-control" })
                                    <button id="erfStatusEditBtn" title="Edit" class="btn btn-primary" style="padding:2px 4px;" onclick="onEditErfStatusClick()"><i class="icon-edit-sign"></i></button>

                                    <button id="erfStatusSaveBtn" title="Save" class="btn btn-primary" style="padding:2px 4px;" onclick="onSaveErfStatusClick()"><i class="icon-check"></i></button>
                                    <button id="erfStatusCancelBtn" title="Cancel" class="btn btn-primary" style="padding:2px 4px;" onclick="onCancelErfStatusClick()"><i class="icon-remove"></i></button>
                                </span>
                            </div>
                        }
                        else
                        {
                            <div class="col-xs-6-o">
                                <span class="col-md-5">ERF Status:</span>
                                <span class="col-md-7">@Model.ERFStatus</span>
                            </div>
                        }

                    }

                    </div>
                    <div class="col-md-6 customer-form-cnt">
                        <div class="col-xs-6-o">
                            <span class="col-md-5">Provider Phone:</span>
                            <span class="col-md-7">@Model.ProviderPhone</span>
                            @Html.HiddenFor(m => m.FSMName)
                        </div>
                        <div class="col-xs-6-o">
                            <span class="col-md-5">Manager Phone:</span>
                            <span class="col-md-7">@Model.ManagerPhone</span>
                            @Html.HiddenFor(m => m.TSM)
                        </div>
                        @*<div class="col-xs-6-o">
                            <span class="col-md-5">DSM Phone:</span>
                            <span class="col-md-7">@Model.DSMPhone</span>
                        </div>*@
                        <div class="col-xs-6-o">
                            <span class="col-md-5">First Contact (ESM) Phone:</span>
                            <span class="col-md-7">@Model.ESMphone</span>
                        </div>
                        <div class="col-xs-6-o">
                            <span class="col-md-5">Second Contact (CCM) Phone:</span>
                            <span class="col-md-7">@Model.CCMphone</span>
                        </div>
                        <div class="col-xs-6-o">
                            <span class="col-md-5">Third Contact (RSM) Phone:</span>
                            <span class="col-md-7">@Model.RSMphone</span>
                        </div>                        
                        <div class="col-xs-6-o">
                            <span class="col-md-5">Region:</span>
                            <span class="col-md-7">@Model.Region</span>
                        </div>
                        <div class="col-xs-6-o">
                            <span class="col-md-5">Distributor Name:</span>
                            <span class="col-md-7">@Model.DistributorName</span>
                        </div>
                        <div class="col-xs-6-o">
                            <span class="col-md-5">Route#:</span>
                            <span class="col-md-7">@Model.Route</span>
                        </div>
                        <div class="col-xs-6-o">
                            <span class="col-md-5">Billable:</span>
                            <span class="col-md-7">@Model.IsBillable</span>
                        </div>
                        <div class="col-xs-6-o">
                            <span class="col-md-5" style="color:#ff0000"><b>Last Sales Date:</b></span>
                            <span class="col-md-7" style="color:#ff0000"><b>@Model.LastSaleDate</b></span>
                        </div>
                        <div class="col-xs-6-o">
                            <span class="col-md-5" style="color:#ff0000"><b>Days Since Last Sale:</b></span>
                            <span class="col-md-7" style="color:#ff0000"><b>@Model.DaysSinceLastSale</b></span>
                        </div>
                    </div>
                </div>
                <br />
                @*<div class="row">
                        <div class="col-md-12">
                            Entitled for Service:
                            <br />
                            <table id="ServiceDetails" class="display" cellspacing="0" width="100%"></table>
                        </div>
                    </div>*@
            </div>
            @*<div class="col-md-12 customer-col1 customer sm-pad-reset">
        <div class="col-md-12">
            Customer Special Instructions:
            <div class="form-group">
                @Html.TextAreaFor(c => c.CustomerSpecialInstructions, new { @class = "form-control CustomerData inputFields", @Style = "width:100%", @rows = 5 })
            </div>
        </div>
    </div>*@
        </div>
        @if (string.Compare(HttpContext.Current.Request.RequestContext.RouteData.Values["controller"].ToString(), "Workorder", true) != 0
                    && string.Compare(HttpContext.Current.Request.RequestContext.RouteData.Values["controller"].ToString(), "Erf", true) != 0
                && string.Compare(HttpContext.Current.Request.RequestContext.RouteData.Values["controller"].ToString(), "NonServiceEvent", true) != 0
                && string.Compare(HttpContext.Current.Request.RequestContext.RouteData.Values["controller"].ToString(), "ErfNew", true) != 0)
        //&&(Session["IsERFUser"] == null || Convert.ToInt32(Session["IsERFUser"]) == 0))
        {
            //"9268996","9269309","9268993", "9268992"
            //string[] NonApprovedCustomers = { "9269383", "9268818", "9269065", "9269325", "9271062", "9269348", "9268755", "9268750", "9268991", "9271344", "9268932", "9268994", "9268925", "9269278", "9262495", "9269400", "9269070", "9268800", "9258432", "9269295", "9269131", "9258878", "9258879", "9269284", "9269298", "9269140", "9269279", "9268902", "9268854", "9268821", "9268746", "9268792", "9269158", "9269127", "9269031", "9269061", "9268754", "9269355", "9268990", "9269253", "9268758", "9269283", "9269391", "9268751", "9268791", "9268983", "9268989", "9252241", "9269062", "9268810", "9293048", "9258690", "9268790", "9269033", "9269506", "9269157", "9268793", "9269287", "9269337", "9268956", "9269240", "9269246", "9270470", "9268815", "9269405", "9270294", "9268745", "9268744", "9269014", "9269159", "9268816", "9269182", "9269254", "9268756", "9269053", "9268924", "9270521", "9270061", "9269017", "9269055", "9268644", "9268999", "9268611", "9268594", "9268723", "9268716", "9268722", "9268987", "9268982", "9268589", "9269191", "9269046", "9253351",  "9269190", "9269037", "9268626", "9268940", "9269322", "9268936", "9269303", "9268624", "9268859", "9268799", "9269244", "9268911", "9268898", "9268896", "9269038", "9269282", "9268980", "9268781", "9269320", "9269323" };
            string[] NonApprovedCustomers = { "9253351", "9252241" };
            List<string> NonApprovedCustomersList = NonApprovedCustomers.ToList();
            if (NonApprovedCustomersList.Contains(@Model.CustomerId))
            {
                <div class="row clear-input">
                    <div class="col-md-3" style="margin-right: 5em;width: 100%; margin-left: 5em;">
                        @Html.ActionLink("Customer Not Approved for Service, Please Contact the Account Manager for any Assistance", "", "", new { customerId = @Model.CustomerId, workOrderId = new Nullable<int>() }, new { @Class = "btn btn-primary", @Style = "width:100%" })
                    </div>
                </div>
            }
            else
            {
                    <div class="row clear-input">
                        <div class="col-md-12 customer-col1 customer sm-pad-reset">

                            @{
                                UserPrivilege = (Dictionary<string, string>)System.Web.HttpContext.Current.Session["UserPrivilege" + (int)System.Web.HttpContext.Current.Session["UserId"]] == null
                                        ? Security.GetUserPrivilegeByUserId((int)System.Web.HttpContext.Current.Session["UserId"], null) :
                                        (Dictionary<string, string>)System.Web.HttpContext.Current.Session["UserPrivilege" + (int)System.Web.HttpContext.Current.Session["UserId"]];
                                if ((UserPrivilege["Customer"] == "Full" && UserPrivilege["Work Order"] != "No-Permission") || (UserPrivilege["Customer"] == "Full" && UserPrivilege["Work Order"] == "Read-Only"))
                                {
                                    <div class="col-md-3">
                                        @Html.ActionLink("Create Work Order", "WorkorderManagement", "Workorder", new { customerId = @Model.CustomerId, workOrderId = new Nullable<int>() }, new { @Class = "btn btn-primary", @Style = "width:100%" })
                                    </div>
                                }
                            }

                            @{
                                UserPrivilege = (Dictionary<string, string>)System.Web.HttpContext.Current.Session["UserPrivilege" + (int)System.Web.HttpContext.Current.Session["UserId"]] == null
                                ? Security.GetUserPrivilegeByUserId((int)System.Web.HttpContext.Current.Session["UserId"], null) :
                                (Dictionary<string, string>)System.Web.HttpContext.Current.Session["UserPrivilege" + (int)System.Web.HttpContext.Current.Session["UserId"]];
                                //if ((UserPrivilege["Customer"] == "Full" && UserPrivilege["Work Order"] != "No-Permission") || (UserPrivilege["Customer"] == "Full" && UserPrivilege["Work Order"] == "Read-Only"))
                                if (UserPrivilege["ERF"] == "Full")
                                {
                                    <div class="col-md-3">
                                        @Html.ActionLink("Create Parts Order", "WorkorderManagement", "Workorder", new { customerId = @Model.CustomerId, workOrderId = new Nullable<int>(), isNewPartsOrder = true }, new { @Class = "btn btn-primary", @Style = "width:100%" })
                                    </div>
                                }
                            }

                            @*@{
                                    UserPrivilege = (Dictionary<string, string>)System.Web.HttpContext.Current.Session["UserPrivilege" + (int)System.Web.HttpContext.Current.Session["UserId"]] == null
                                    ? Security.GetUserPrivilegeByUserId((int)System.Web.HttpContext.Current.Session["UserId"], null) :
                                    (Dictionary<string, string>)System.Web.HttpContext.Current.Session["UserPrivilege" + (int)System.Web.HttpContext.Current.Session["UserId"]];
                                    if ((UserPrivilege["Customer"] == "Full" && UserPrivilege["ERF"] != "No-Permission") || (UserPrivilege["Customer"] == "Full" && UserPrivilege["ERF"] == "Read-Only"))
                                    {
                                        <div class="col-md-3">
                                            @Html.ActionLink("Create ERF", "ERFManagement", "ERF", new { customerId = @Model.CustomerId, workOrderId = new Nullable<int>() }, new { @Class = "btn btn-primary", @Style = "width:100%" })
                                        </div>
                                    }
                                }*@

                            @{
                                UserPrivilege = (Dictionary<string, string>)System.Web.HttpContext.Current.Session["UserPrivilege" + (int)System.Web.HttpContext.Current.Session["UserId"]] == null
                                ? Security.GetUserPrivilegeByUserId((int)System.Web.HttpContext.Current.Session["UserId"], null) :
                                (Dictionary<string, string>)System.Web.HttpContext.Current.Session["UserPrivilege" + (int)System.Web.HttpContext.Current.Session["UserId"]];
                                if (UserPrivilege["ERFNew"] == "Full")
                                {
                                    <div class="col-md-3">
                                        @Html.ActionLink("Create ERF New", "ERFNewCreate", "ERFNew", new { customerId = @Model.CustomerId, workOrderId = new Nullable<int>() }, new { @Class = "btn btn-primary", @Style = "width:100%" })
                                    </div>
                                }
                            }

                            <div class="col-md-3">
                                @Html.ActionLink("Create Customer Service Event", "NonServiceEventCall", "NonServiceEvent", new { customerId = @Model.CustomerId }, new { @Class = "btn btn-primary", @Style = "width:100%" })
                            </div>

                        </div>
                    </div>
                                    }
                                }
                    @*else if (Session["IsERFUser"] != null && Convert.ToInt32(Session["IsERFUser"]) == 1
                                        && string.Compare(HttpContext.Current.Request.RequestContext.RouteData.Values["controller"].ToString(), "ErfNew", true) != 0)
                        {
                                <div class="col-md-3">
                                    @Html.ActionLink("Create ERF New", "ERFNewCreate", "ERFNew", new { customerId = @Model.CustomerId, workOrderId = new Nullable<int>() }, new { @Class = "btn btn-primary", @Style = "width:100%" })
                                </div>
                            }*@
                </div>
</section>

<div class="popup" data-popup="popup-1">
    <div class="popup-inner">
        <h4>Past Contacts</h4>
        <div style="height:400px;overflow-x:hidden;overflow-y:scroll">
            <table id="ContactHistory" class="display" cellspacing="0" width="100%"></table>
        </div>
        <a data-popup-close="popup-1" class="btn btn-orange" style="margin-top:10px;float:right;" href="#">Close</a>
        <a class="popup-close" data-popup-close="popup-1" href="#">x</a>
    </div>
</div>

@Html.EJ().ScriptManager()