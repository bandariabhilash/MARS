@model FarmerBrothers.Models.WorkorderManagementModel

@{
    ViewBag.Title = "Work Order Details";
}

@using FarmerBrothers.Models;
<script type="text/javascript">

    var tempSelectedIds;
    var tempSelectedNames;

    $(document).ready(function () {
        $('#Brands').ejGrid({
            allowPaging: false,
            allowSorting:true ,
            allowTextWrap: true,
            selectionType: "multiple",
            selectionSettings: { enableToggle: true },
            dataSource : @Html.Raw(Json.Encode(Model.BrandNames)),
            dataBound: function (args)
            {
                var selectedBrandIds = $("#SelectedBrandIds").val();
                var selectedBrandIdsArray = new Array();
                var brandCount = 0;
                for(var i = 0; i < args.model.dataSource.length; i ++)
                {
                    if (selectedBrandIds.indexOf(args.model.dataSource[i].BrandID) > -1)
                    {
                        selectedBrandIdsArray[brandCount++] = i;
                    }
                }

                $('#Brands').ejGrid("selectRows",selectedBrandIdsArray);
            },

            columns: [
                { field: "BrandID", headerText: "Brand Id", visible: false },
                { field: "BrandName1", headerText: "Equipments" }
            ]
        });

        $("#SelectedBrands").ejListBox({
            itemsCount: 5,
            fields: { id: "BrandName1", value: "BrandID" }
        });

        var brandNamesFromModel = @Html.Raw(Json.Encode(Model.SelectedBrands));
        if (brandNamesFromModel != null)
        {
            for(var i = 0; i < brandNamesFromModel.length; i ++)
            {
                $("#SelectedBrands").ejListBox("addItem", brandNamesFromModel[i].BrandName1, brandNamesFromModel[i].BrandID);
            }
        }

        $("#Brands").ejGrid({
            recordDoubleClick : function (args)
            {
                tempSelectedIds = "";
                tempSelectedNames = "";

                var records = this.getSelectedRecords();
                for(i =0; i < records.length; i++)
                {
                    tempSelectedIds = tempSelectedIds + records[i].BrandID + "^";
                    tempSelectedNames = tempSelectedNames + records[i].BrandName1 + "^";
                }
            },
            rowSelected: function (args)
            {
                tempSelectedIds = "";
                tempSelectedNames = "";

                var records = this.getSelectedRecords();
                for(i =0; i < records.length; i++)
                {
                    tempSelectedIds = tempSelectedIds + records[i].BrandID + "^";
                    tempSelectedNames = tempSelectedNames + records[i].BrandName1 + "^";
                }
            }
        });

        $("#AddBrands").click(function () {

            tempSelectedIds = "";
            tempSelectedNames = "";

            var listBox = $('#Brands').ejGrid("instance")

            var selectedBrandIds = $("#SelectedBrandIds").val();
            var selectedBrandIdsArray = new Array();
            var brandCount = 0;
            for(var i = 0; i < listBox.model.dataSource.length; i ++)
            {
                if (selectedBrandIds.indexOf(listBox.model.dataSource[i].BrandID) > -1)
                {
                    selectedBrandIdsArray[brandCount++] = i;
                }
            }

            $('#Brands').ejGrid("clearSelection");
            $('#Brands').ejGrid("selectRows",selectedBrandIdsArray);
        });

        $("#BrandSave").click(function () {

            /* var listLength = $("#SelectedBrands li").length;

             for (l = listLength - 1; l >= 0 ; l--)
             {
                 $("#SelectedBrands").ejListBox("removeItemByIndex", l);
             }*/

            $("#SelectedBrandIds").val("");
            $('#SelectedBrands li').remove();
            var selectedItemIds = tempSelectedIds.split('^');
            var selectedItemNames = tempSelectedNames.split('^');

            for(var i = 0; i < selectedItemIds.length; i++) {

                if (selectedItemIds[i].trim() != "")
                {
                    $("#SelectedBrandIds").val($("#SelectedBrandIds").val() + selectedItemIds[i] + ",");
                    $("#SelectedBrands").ejListBox("addItem", selectedItemNames[i], selectedItemIds[i]);
                }
            }

            tempSelectedIds = "";
            tempSelectedNames = "";

            $('[data-popup-close]').trigger("click");
        });

        if (workOrderStatus.localeCompare("Closed") == 0
            || workOrderStatus.localeCompare("Invoiced") == 0)
        {
            $('.PriorityDropDownList').ejDropDownList({
                dataSource : @Html.Raw(Json.Encode(Model.PriorityList)),
                fields: { value : "FBStatusID", text : "FBStatus" },
                showRoundedCorner: true,
                enabled : false,
                watermarkText: "Please Select"
            }).data("ejDropDownList").selectItemByValue("@string.Join(",", Model.WorkOrder.PriorityCode)");
        }
        else
        {
            $('.PriorityDropDownList').ejDropDownList({
                dataSource : @Html.Raw(Json.Encode(Model.PriorityList)),
                fields: { value : "FBStatusID", text : "FBStatus" },
                showRoundedCorner: true,
                watermarkText: "Please Select"
            }).data("ejDropDownList").selectItemByValue("@string.Join(",", Model.WorkOrder.PriorityCode)");
        }

        $('.SalesNotificationReasonCodesDropDownList').ejDropDownList({
            dataSource : @Html.Raw(Json.Encode(Model.SalesNotificationReasonCodes)),
            width: 300,
            fields: { value : "FBStatusID", text : "FBStatus" },
            showRoundedCorner: true,
            watermarkText: "Please Select"
        }).data("ejDropDownList").selectItemByValue("@string.Join(",", Model.SalesNotificationCode)");

        $("#PhoneSolve").change(function() {
            $.ajax({
                url: '@Url.Action("PopulateSpecialClosure", "Workorder")',
                type: 'GET',
                data: { "callStatus": $("#PhoneSolve option:selected").text() },
                success: function (jsonResult) {
                    if (jsonResult.success == true)
                    {
                        $("#Closure_SpecialClosure").html("");
                        $.each(jsonResult.data, function (i, closure) {
                            $("#Closure_SpecialClosure").append(
                                $('<option></option>').val(closure.Description).html(closure.Description));
                        });
                    }
                    else{
                        AlertPopup("|There is a problem in special closer dropdown");
                    }

                }
            });

            if ($("#PhoneSolve").val() > 0 && $("#PhoneSolve option:selected").text().localeCompare("Attempted") != 0)
            {
                $('#PhoneSolveTechId').removeAttr('disabled');
            }
            else
            {
                $('#PhoneSolveTechId').attr('disabled', 'disabled');
            }
        });

        if ($("#PhoneSolve").val() > 0 && $("#PhoneSolve option:selected").text().localeCompare("Attempted") != 0)
        {
            $('#PhoneSolveTechId').removeAttr('disabled');
        }
        else
        {
            $('#PhoneSolveTechId').attr('disabled', 'disabled');
        }

        if($("#AppointmentDate").val() == "" || $("#AppointmentDate").val() == 'undefined' || $("#AppointmentDate").val() .length == 0)
        { 
            $(".updateBtn").attr('disabled', true);
        }
        else
        {
            $(".updateBtn").attr('disabled', false);
        }

        $("#AppointmentDate").ejDatePicker({
            minDate: new Date($("#CurrentDateTime").val()),
            change: function (args) {
                var appointmentDt = $("#AppointmentDate").val();
                if(appointmentDt == '' || appointmentDt.length == 0 || appointmentDt == 'undefined')
                {
                    $(".updateBtn").attr('disabled', true);
                }
                else
                {
                    $(".updateBtn").attr('disabled', false);
                }
            }
        });

    });

    function UpdateAppointment()
    {
        var appointmentDt = $("#AppointmentDate").val();
        if(appointmentDt == '' || appointmentDt.length == 0 || appointmentDt == 'undefined')
        {
            return;
        }

        $('[data-popup="popup-100"]').fadeIn(350);
        SetSubmitOperation(5);
    }

    function UpdateAppointmentSubmit()
    {
        if ($('#AppointmentReasonDropdown').val() != "")
        {

            $('[data-popup-close]').trigger("click");
            $('form').submit();
        }
        else{
            AlertPopup("|Please select a reason!");
        }
    }

    function OverTimeRequest()
    {
        if ($('#OverTimeRequestDescription').val() != "")
        {
            SetSubmitOperation(3);
            $('form').submit();
            $('[data-popup-close]').trigger("click");
        }
        else
        {
            AlertPopup("|Please enter description!");
        }
    }

    function NotifySales()
    {
        SetSubmitOperation(2);
        $('form').submit();
        $('[data-popup-close]').trigger("click");
    }

    function SameAsCaller()
    {
        $('#WorkOrder_WorkorderContactName').val($('#WorkOrder_CallerName').val());
    }
    //function PhoneValidation(evt) {
    //    var charCode = (evt.which) ? evt.which : event.keyCode;
    //    //if ((charCode >= 48 && charCode <=57)|| charCode ==40 || charCode ==41 || charCode ==45)
    //    if ((charCode >= 48 && charCode <=57))
    //        return true;

    //    return false;
    //}
</script>

<section class="block">
    @{Dictionary<string, string> UserPrivilege = (Dictionary<string, string>)System.Web.HttpContext.Current.Session["UserPrivilege" + (int)System.Web.HttpContext.Current.Session["UserId"]] == null
                                                                ? Security.GetUserPrivilegeByUserId((int)System.Web.HttpContext.Current.Session["UserId"], null) :
                                                                (Dictionary<string, string>)System.Web.HttpContext.Current.Session["UserPrivilege" + (int)System.Web.HttpContext.Current.Session["UserId"]];}
    <div class="clear"></div>
    <div class="container-fluid">
        <h2 class="work-order-details-head arrow-down tabheader">Work Order Details</h2>
        <div class="work-order-details-content margin-top">

            <div class="col-md-4 customer-col1 sm-pad-reset">
                <div class="col-sm-6-o">
                    <span class="col-md-5 required">Caller Name:</span>
                    <div class="col-md-7">
                        <div class="form-group">
                            @Html.TextBoxFor(w => w.WorkOrder.CallerName, new { @class = "form-control WorkOrderFields inputFields" })
                            @Html.ValidationMessageFor(m => m.WorkOrder.CallerName, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="col-sm-6-o">
                    <span class="col-md-5 required">Work Order Contact Name:</span>
                    <div class="col-md-7">
                        <div class="form-group">
                            @Html.TextBoxFor(w => w.WorkOrder.WorkorderContactName, new { @class = "form-control WorkOrderFields inputFields" })
                            @Html.ValidationMessageFor(m => m.WorkOrder.WorkorderContactName, "", new { @class = "text-danger" })<br />
                            <input type="checkbox" onchange="SameAsCaller();" /> Same as Caller
                        </div>
                    </div>
                </div>
                <div class="col-sm-6-o">
                    <span class="col-md-5">Contact Phone Number:</span>
                    <div class="col-md-7">
                        <div class="form-group">
                            @Html.TextBoxFor(w => w.WorkOrder.WorkorderContactPhone, new { @class = "form-control WorkOrderFields inputFields" })
                            @Html.ValidationMessageFor(m => m.WorkOrder.WorkorderContactPhone, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            &nbsp;
                        </div>
                    </div>
                </div>
                <div class="col-sm-6-o">
                    <span class="col-md-5 required">Hours Of Operation:</span>
                    <div class="col-md-7">
                        <div class="form-group">
                            @Html.TextBoxFor(w => w.WorkOrder.HoursOfOperation, new { @class = "form-control WorkOrderFields inputFields" })
                            @Html.ValidationMessageFor(m => m.WorkOrder.HoursOfOperation, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            &nbsp;
                        </div>
                    </div>
                </div>


                @if (/*Model.WorkOrder.WorkorderCalltypeid != 1800
    && Model.WorkOrder.WorkorderCalltypeid != 1810
    && Model.WorkOrder.WorkorderCalltypeid != 1820
    &&*/ Model.IsCustomerPartsOrder == true)
                {
                    if (Model.WorkOrder.WorkorderCallstatus == "Hold for AB")
                    {
                        if (Model.WorkOrder.WorkorderID > 0)
                        {
                            <div class="col-sm-6-o">
                                <span class="col-md-5">Special Closure:</span>
                                <div class="col-md-7">
                                    <div class="form-group">
                                        @Html.DropDownListFor(w => w.Closure.SpecialClosure, new SelectList(Model.Closure.SpecialClosureList, "Description", "Description", Model.Closure.SpecialClosure), new { @class = "form-control WorkOrderFields inputFields" })
                                    </div>
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="col-sm-6-o">
                            <span class="col-md-5">Special Closure:</span>
                            <div class="col-md-7">
                                <div class="form-group">
                                    @Html.DropDownListFor(w => w.Closure.SpecialClosure, new SelectList(Model.Closure.SpecialClosureList, "Description", "Description", Model.Closure.SpecialClosure), new { @class = "form-control WorkOrderFields inputFields" })
                                </div>
                            </div>
                        </div>
                    }
                }
            </div>

            <div class="col-md-4 customer-col1 sm-pad-reset">
                <div class="col-sm-6-o">
                    <span class="col-md-5">
                        <span>Equipments</span><br />
                        @if (string.Compare(Model.WorkOrder.WorkorderCallstatus, "Closed", true) == 0
|| string.Compare(Model.WorkOrder.WorkorderCallstatus, "Invoiced", true) == 0)
                        {
                            <a class="btn btn-primary">Add Equipments</a>
                        }
                        else
                        {
                            <a data-popup-open="popup-2" id="AddBrands" class="btn btn-primary">Add Equipments</a>
                        }
                    </span>
                    <div class="col-md-7">
                        <div class="form-group">
                            <ul id="SelectedBrands"></ul>
                            @Html.HiddenFor(w => w.SelectedBrandIds)
                        </div>
                    </div>
                </div>
                @if (!string.IsNullOrWhiteSpace(Model.Customer.WorkOrderId) && string.Compare(Model.WorkOrder.WorkorderCallstatus, "Accepted", 0) == 0 && Model.IsOpen == false)
                {

                    //UserPrivilege = (Dictionary<string, string>)System.Web.HttpContext.Current.Session["UserPrivilege"];
                    if (UserPrivilege["Work Order"] == "Edit-Only" || UserPrivilege["Work Order"] == "Full")
                    {
                        <div class="col-xs-6-o">
                            <span class="col-sm-4 col-md-5 m-b-more" style="margin-top:5px;">Notify Sales:</span>
                        </div>
                        <div class="col-xs-6-o">
                            <span class="col-sm-8 col-md-7 m-b-more"><a data-popup-open="popup-3" style="margin-bottom:5px;" class="btn btn-primary ">Notification</a></span>
                        </div>
                        <div class="col-xs-8-o">
                            <span class="col-sm-4 col-md-5 m-b-more" style="margin-top:5px;">Overtime Request:</span>
                        </div>
                        <div class="col-xs-6-o">
                            <span class="col-sm-8 col-md-7 m-b-more"><a data-popup-open="popup-4" style="width:96px;" class="btn btn-primary ">Requests</a></span>
                        </div>
                        <div class="col-sm-6-o">
                            @*<span class="col-md-5">Related Work Order Pictures:<br /></span>*@
                            <div class="col-md-7">
                                <div class="form-group">
                                </div>
                            </div>
                        </div>
                    }


                }

                <div class="col-sm-6-o">
                    <span class="col-md-5">Customer PO:</span>
                    <div class="col-md-7">
                        <div class="form-group">
                            @Html.TextBoxFor(w => w.WorkOrder.CustomerPO, new { @class = "form-control WorkOrderFields inputFields", @maxlength = "25" })
                            @Html.ValidationMessageFor(m => m.WorkOrder.CustomerPO, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            &nbsp;
                        </div>
                    </div>
                </div>

                <div class="col-sm-6-o">
                    <span class="col-md-5">NTE:</span>
                    <div class="col-md-7">
                        <div class="form-group">
                            @Html.TextBoxFor(w => w.WorkOrder.NTE, new { @class = "form-control WorkOrderFields inputFields" })
                            @Html.ValidationMessageFor(m => m.WorkOrder.NTE, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            &nbsp;
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-4 customer-col1 sm-pad-reset">
                <div class="col-sm-6-o">
                    <span class="col-md-6 required">Priority:</span>
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.TextBoxFor(w => w.WorkOrder.PriorityCode, new { @class = "form-control WorkOrderFields PriorityDropDownList inputFields" })
                        </div>
                    </div>
                </div>
                <div class="col-sm-6-o">
                    <span class="col-md-6">Appointment Date:</span>
                    <div class="form-group">
                        <div class="col-md-4">
                            @Html.TextBoxFor(w => w.WorkOrder.AppointmentDate, new { @class = "form-control WorkOrderFields inputFields", @Id = "AppointmentDate", @style = "float:left;" })
                        </div>
                        <div class="col-md-1" style="margin-left:15px;">
                            @if (UserPrivilege["Work Order"] == "Edit-Only" || UserPrivilege["Work Order"] == "Full" || UserPrivilege["Customer"] == "Full")
                            {
                                if (string.Compare(Model.WorkOrder.WorkorderCallstatus, "Closed", true) == 0
                            || string.Compare(Model.WorkOrder.WorkorderCallstatus, "Invoiced", true) == 0
                            || Model.IsOpen == true)
                                {
                                    <a class="btn btn-primary updateBtn" disabled name="action:WorkorderSave">Update</a>
                                }
                                else
                                {
                                    /*if (Model.WorkOrder.AppointmentDate == null)
                                    {
                                        <a class="btn btn-primary updateBtn" onclick="UpdateAppointment()" disabled name="action:WorkorderSave">Update</a>
                                    }
                                    else
                                    {
                                        <a class="btn btn-primary updateBtn" onclick="UpdateAppointment()" name="action:WorkorderSave">Update</a>
                                    }*/
                                    <a class="btn btn-primary updateBtn" onclick="UpdateAppointment()" name="action:WorkorderSave">Update</a>
                                }
                            }
                        </div>
                    </div>

                    @if (Model.WorkOrder.WorkorderID > 0)
                    {

                        //UserPrivilege = (Dictionary<string, string>)System.Web.HttpContext.Current.Session["UserPrivilege"];
                        if (UserPrivilege["Work Order"] == "Edit-Only" || UserPrivilege["Work Order"] == "Full")
                        {

                            <div class="col-xs-6-o">
                                <span class="col-sm-6 col-md-6 m-b-more" style="margin-top:10px;">Hold Status:</span>
                            </div>
                                <div class="col-xs-6-o">
                                    @if (Model.IsOpen == false)
                                    {
                                        if (string.Compare(Model.WorkOrder.WorkorderCallstatus, "Hold", 0) == 0)
                                        {
                                            <span class="col-sm-6 col-md-6 m-b-more"><button type="submit" style="display: inline-block; margin-right: 5px; margin-top: 5px;" class="btn btn-primary" onclick="SetSubmitOperation(4)" name="action:WorkorderSave">Take Off Hold</button></span>
                                        }
                                        else
                                        {
                                            <span class="col-sm-6 col-md-6 m-b-more"><button type="submit" style="display: inline-block; margin-right: 5px; margin-top: 5px;" class="btn btn-primary" onclick="SetSubmitOperation(4)" name="action:WorkorderSave">Put on Hold</button></span>
                                        }
                                    }
                                </div>
                        }

                        if (Model.WorkOrder.SpawnCounter > 0)
                        {
                            <div class="col-xs-6-o">
                                <span class="col-sm-6 col-md-6 m-b-more" style="margin-top: 5px;">Original Work Order ID:</span>
                            </div>
                                <div class="col-xs-6-o">
                                    <span class="col-sm-6 col-md-6 m-b-more" style="margin-top: 5px;"><a target="_blank" href='@Url.Action("WorkorderManagement", "Workorder")/@Model.Customer.CustomerId/@Model.WorkOrder.OriginalWorkorderid/false/false'>@Model.WorkOrder.OriginalWorkorderid</a></span>
                                </div>
                                <div class="clearfix"></div>
                                <div class="col-xs-6-o">
                                    <span class="col-sm-6 col-md-6 m-b-more" style="margin-top: 5px;">Parent Work Order ID:</span>
                                </div>
                                <div class="col-xs-6-o">
                                    <span class="col-sm-6 col-md-6 m-b-more" style="margin-top: 5px;"><a target="_blank" href='@Url.Action("WorkorderManagement", "Workorder")/@Model.Customer.CustomerId/@Model.WorkOrder.ParentWorkorderid/false/false'>@Model.WorkOrder.ParentWorkorderid</a></span>
                                </div>
                                <div class="clearfix"></div>
                                <div class="col-xs-6-o">
                                    <span class="col-sm-6 col-md-6 m-b-more" style="margin-top: 5px;">Spawn Reason:</span>
                                </div>
                        }
                        <div class="col-xs-6-o">
                            @if (string.IsNullOrWhiteSpace(Model.SpawnReason))
                            {
                                <span class="col-sm-6 col-md-6 m-b-more" style="margin-top: 5px;">@Model.Solution</span>
                            }
                            else
                            {
                                <span class="col-sm-6 col-md-6 m-b-more" style="margin-top: 5px;">@Model.Solution - @Model.SpawnReason</span>
                            }
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <div class="popup" data-popup="popup-2">
        <div class="popup-inner">
            <h4>Equipments (Use ctrl key for multiple selections)</h4>
            <div style="height:300px;overflow:scroll;overflow-x:hidden;">
                <table id="Brands" style="height:300px;overflow:scroll;overflow-x:hidden;"></table>
            </div>
            <a id="BrandSave" style="margin-top:10px;" class="btn btn-primary">Save</a>
            <a data-popup-close="popup-2" class="btn btn-orange" style="margin-top:10px;float:right;">Close</a>
            <a class="popup-close" data-popup-close="popup-2">x</a>
        </div>
    </div>

    <div class="popup" data-popup="popup-3">
        <div class="popup-inner">
            <h4>Notify Sales</h4>
            <table>
                <tr>
                    <td>Reason Code:</td>
                    <td>@Html.TextBoxFor(w => w.SalesNotificationCode, new { @class = "form-control WorkOrderFields SalesNotificationReasonCodesDropDownList" })</td>
                </tr>
                <tr>
                    <td colspan="2"></td>
                </tr>
                <tr>
                    <td colspan="2">Notes:</td>
                </tr>
                <tr>
                    <td colspan="2">@Html.TextAreaFor(w => w.SalesNotificationNotes, new { @class = "form-control WorkOrderFields", @rows = "10" })</td>
                </tr>
                <tr>
                    <td><button style="margin-top:10px;" class="btn btn-primary" onclick="NotifySales()" name="action:WorkorderSave">Notify</button></td>
                    <td><a data-popup-close="popup-3" style="margin-top:10px;float:right;" class="btn btn-orange">Cancel</a></td>
                </tr>
            </table>
            <a class="popup-close" data-popup-close="popup-3">x</a>
        </div>
    </div>

    <div class="popup" data-popup="popup-4">
        <div class="popup-inner">
            <h4>Overtime Approval Request:</h4>
            <table>
                <tr>
                    <td>Description of Request:</td>
                </tr>
                <tr>
                    <td colspan="2"></td>
                </tr>
                <tr>
                    <td colspan="2">@Html.TextAreaFor(w => w.OverTimeRequestDescription, new { @class = "form-control WorkOrderFields SearchPanelControl PriorityDropDownList", @rows = "5" })</td>
                </tr>
                <tr>
                    <td><button style="margin-top:10px;" class="btn btn-orange" onclick="OverTimeRequest()" name="action:WorkorderSave">Submit</button></td>
                    <td><button data-popup-close="popup-4" style="margin-top:10px;float:right;" class="btn btn-primary ">Cancel</button></td>
                </tr>
            </table>
            <a class="popup-close" data-popup-close="popup-4">x</a>
        </div>
    </div>

    <div class="popup" data-popup="popup-100">
        <div class="popup-inner">
            <h4>Appointment Date Change Reason</h4>
            <div class="col-md-12" style="margin-top:10px;">
                <span class="col-md-4">Reason</span>
                <div class="col-md-6">
                    @Html.TextBox("AppointmentReasonDropdown")
                </div>
            </div>
            <a class="btn btn-primary" onclick="UpdateAppointmentSubmit()" style="margin-top:5px;">OK</a>
            <a class="popup-close" data-popup-close="popup-100">x</a>
        </div>
    </div>
</section>
