<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Novell.Directory.Ldap</name>
    </assembly>
    <members>
        <member name="T:Novell.Directory.Ldap.Connection">
            <summary> The class that creates a connection to the Ldap server. After the
            connection is made, a thread is created that reads data from the
            connection.
            
            The application's thread sends a request to the MessageAgent class, which
            creates a Message class.  The Message class calls the writeMessage method
            of this class to send the request to the server. The application thread
            will then query the MessageAgent class for a response.
            
            The reader thread multiplexes response messages received from the
            server to the appropriate Message class. Each Message class
            has its own message queue.
            
            Unsolicited messages are process separately, and if the application
            has registered a handler, a separate thread is created for that
            application's handler to process the message.
            
            Note: the reader thread must not be a "selfish" thread, since some
            operating systems do not time slice.
            
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Connection.#ctor">
            <summary> Create a new Connection object
            
            </summary>
            <param name="factory">specifies the factory to use to produce SSL sockets.
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.Connection.copy">
            <summary> Copy this Connection object.
            
            This is not a true clone, but creates a new object encapsulating
            part of the connection information from the original object.
            The new object will have the same default socket factory,
            designated socket factory, host, port, and protocol version
            as the original object.
            The new object is NOT be connected to the host.
            
            </summary>
            <returns> a shallow copy of this object
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.Connection.acquireWriteSemaphore">
            <summary> Acquire a simple counting semaphore that synchronizes state affecting
            bind. This method generates an ephemeral message id (negative number).
            
            We bind using the message ID because a different thread may unlock
            the semaphore than the one that set it.  It is cleared when the
            response to the bind is processed, or when the bind operation times out.
            
            Returns when the semaphore is acquired
            
            </summary>
            <returns> the ephemeral message id that identifies semaphore's owner
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.Connection.acquireWriteSemaphore(System.Int32)">
            <summary> Acquire a simple counting semaphore that synchronizes state affecting
            bind. The semaphore is held by setting a value in writeSemaphoreOwner.
            
            We bind using the message ID because a different thread may unlock
            the semaphore than the one that set it.  It is cleared when the
            response to the bind is processed, or when the bind operation times out.
            Returns when the semaphore is acquired.
            
            </summary>
            <param name="msgId">a value that identifies the owner of this semaphore. A
            value of zero means assign a unique semaphore value.
            
            </param>
            <returns> the semaphore value used to acquire the lock
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.Connection.freeWriteSemaphore(System.Int32)">
            <summary> Release a simple counting semaphore that synchronizes state affecting
            bind.  Frees the semaphore when number of acquires and frees for this
            thread match.
            
            </summary>
            <param name="msgId">a value that identifies the owner of this semaphore
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.Connection.connect(System.String,System.Int32)">
            <summary> Constructs a TCP/IP connection to a server specified in host and port.
            
            </summary>
            <param name="host">The host to connect to.
            
            </param>
            <param name="port">The port on the host to connect to.
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.Connection.connect(System.String,System.Int32,System.Int32)">
            <summary> Constructs a TCP/IP connection to a server specified in host and port.
            Starts the reader thread.
            
            </summary>
            <param name="host">The host to connect to.
            
            </param>
            <param name="port">The port on the host to connect to.
            
            </param>
            <param name="semaphoreId">The write semaphore ID to use for the connect
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.Connection.incrCloneCount">
            <summary>  Increments the count of cloned connections</summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Connection.destroyClone(System.Boolean)">
            <summary> Destroys a clone of <code>LdapConnection</code>.
            
            This method first determines if only one <code>LdapConnection</code>
            object is associated with this connection, i.e. if no clone exists.
            
            If no clone exists, the socket is closed, and the current
            <code>Connection</code> object is returned.
            
            If multiple <code>LdapConnection</code> objects are associated
            with this connection, i.e. clones exist, a {@link #copy} of the
            this object is made, but is not connected to any host. This
            disassociates that clone from the original connection.  The new
            <code>Connection</code> object is returned.
            
            Only one destroyClone instance is allowed to run at any one time.
            
            If the connection is closed, any threads waiting for operations
            on that connection will wake with an LdapException indicating
            the connection is closed.
            
            </summary>
            <param name="apiCall"><code>true</code> indicates the application is closing the
            connection or or creating a new one by calling either the
            <code>connect</code> or <code>disconnect</code> methods
            of <code>LdapConnection</code>.  <code>false</code>
            indicates that <code>LdapConnection</code> is being finalized.
            
            </param>
            <returns> a Connection object or null if finalizing.
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.Connection.clearBindSemId">
            <summary> clears the writeSemaphore id used for active bind operation</summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Connection.writeMessage(Novell.Directory.Ldap.Message)">
            <summary> Writes an LdapMessage to the Ldap server over a socket.
            
            </summary>
            <param name="info">the Message containing the message to write.
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.Connection.writeMessage(Novell.Directory.Ldap.LdapMessage)">
            <summary> Writes an LdapMessage to the Ldap server over a socket.
            
            </summary>
            <param name="msg">the message to write.
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.Connection.getMessageAgent(System.Int32)">
            <summary> Returns the message agent for this msg ID</summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Connection.removeMessage(Novell.Directory.Ldap.Message)">
            <summary> Removes a Message class from the Connection's list
            
            </summary>
            <param name="info">the Message class to remove from the list
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.Connection.Finalize">
            <summary> Cleans up resources associated with this connection.</summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Connection.shutdown(System.String,System.Int32,Novell.Directory.Ldap.InterThreadException)">
            <summary> Cleans up resources associated with this connection.
            This method may be called by finalize() for the connection, or it may
            be called by LdapConnection.disconnect().
            Should not have a writeSemaphore lock in place, as deadlock can occur
            while abandoning connections.
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Connection.areMessagesComplete">
            <summary> This tests to see if there are any outstanding messages.  If no messages
            are in the queue it returns true.  Each message will be tested to
            verify that it is complete.
            <I>The writeSemaphore must be set for this method to be reliable!</I>
            
            </summary>
            <returns> true if no outstanding messages
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.Connection.stopReaderOnReply(System.Int32)">
            <summary> The reader thread will stop when a reply is read with an ID equal
            to the messageID passed in to this method.  This is used by
            LdapConnection.StartTLS.
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Connection.startReader">
            <summary>startReader
            startReader should be called when socket and io streams have been
            set or changed.  In particular after client.Connection.startTLS()
            It assumes the reader thread is not running.
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Connection.startTLS">
            <summary> StartsTLS, in this package, assumes the caller has:
            1) Acquired the writeSemaphore
            2) Stopped the reader thread
            3) checked that no messages are outstanding on this connection.
            
            After calling this method upper layers should start the reader
            by calling startReader()
            
            In the client.Connection, StartTLS assumes Ldap.LdapConnection will
            stop and start the reader thread.  Connection.StopTLS will stop
            and start the reader thread.
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Connection.AddUnsolicitedNotificationListener(Novell.Directory.Ldap.LdapUnsolicitedNotificationListener)">
            <summary>Add the specific object to the list of listeners that want to be
            notified when an unsolicited notification is received.
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Connection.RemoveUnsolicitedNotificationListener(Novell.Directory.Ldap.LdapUnsolicitedNotificationListener)">
            <summary>Remove the specific object from current list of listeners</summary>
        </member>
        <member name="P:Novell.Directory.Ldap.Connection.Cloned">
            <summary>  Indicates whether clones exist for LdapConnection
            
            </summary>
            <returns> true if clones exist, false otherwise.
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.Connection.Host">
            <summary> gets the host used for this connection</summary>
        </member>
        <member name="P:Novell.Directory.Ldap.Connection.Port">
            <summary> gets the port used for this connection</summary>
        </member>
        <member name="P:Novell.Directory.Ldap.Connection.BindSemId">
            <summary> gets the writeSemaphore id used for active bind operation</summary>
            <summary> sets the writeSemaphore id used for active bind operation</summary>
        </member>
        <member name="P:Novell.Directory.Ldap.Connection.BindSemIdClear">
            <summary> checks if the writeSemaphore id used for active bind operation is clear</summary>
        </member>
        <member name="P:Novell.Directory.Ldap.Connection.Bound">
            <summary> Return whether the application is bound to this connection.
            Note: an anonymous bind returns false - not bound
            </summary>
        </member>
        <member name="P:Novell.Directory.Ldap.Connection.Connected">
            <summary> Return whether a connection has been made</summary>
        </member>
        <member name="P:Novell.Directory.Ldap.Connection.BindProperties">
            <summary> 
            Sets the authentication credentials in the object
            and set flag indicating successful bind.
            
            
            
            </summary>
            <returns>  The BindProperties object for this connection.
            </returns>
            <summary> 
            Sets the authentication credentials in the object
            and set flag indicating successful bind.
            
            
            
            </summary>
            <param name="bindProps">  The BindProperties object to set.
            </param>
        </member>
        <member name="P:Novell.Directory.Ldap.Connection.ActiveReferral">
            <summary> Gets the current referral active on this connection if created to
            follow referrals.
            
            </summary>
            <returns> the active referral url
            </returns>
            <summary> Sets the current referral active on this connection if created to
            follow referrals.
            </summary>
        </member>
        <member name="P:Novell.Directory.Ldap.Connection.ConnectionName">
            <summary> Returns the name of this Connection, used for debug only
            
            </summary>
            <returns> the name of this connection
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.Connection.TLS">
             <summary> Indicates if the conenction is using TLS protection
            
             Return true if using TLS protection
             </summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Connection.ReaderThread">
            TLS not supported in first release		
        </member>
        <member name="M:Novell.Directory.Ldap.Connection.ReaderThread.Run">
            <summary> This thread decodes and processes RfcLdapMessage's from the server.
            
            Note: This thread needs a graceful shutdown implementation.
            </summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Connection.UnsolicitedListenerThread">
            <summary>Inner class defined so that we can spawn off each unsolicited
            listener as a seperate thread.  We did not want to call the
            unsolicited listener method directly as this would have tied up our
            deamon listener thread in the applications unsolicited listener method.
            Since we do not know what the application unsolicited listener
            might be doing and how long it will take to process the uncoslicited
            notification.  We use this class to spawn off the unsolicited
            notification as a separate thread
            </summary>
        </member>
        <member name="T:SupportClass.ThreadClass">
            <summary>
            Support class used to handle threads
            </summary>
        </member>
        <member name="T:IThreadRunnable">
            <summary>
            This interface should be implemented by any class whose instances are intended 
            to be executed by a thread.
            </summary>
        </member>
        <member name="M:IThreadRunnable.Run">
            <summary>
            This method has to be implemented in order that starting of the thread causes the object's 
            run method to be called in that separately executing thread.
            </summary>
        </member>
        <member name="T:SupportClass">
            <summary>
            Contains conversion support elements such as classes, interfaces and static methods.
            </summary>
        </member>
        <member name="M:SupportClass.ToSByteArray(System.Byte[])">
            <summary>
            Receives a byte array and returns it transformed in an sbyte array
            </summary>
            <param name="byteArray">Byte array to process</param>
            <returns>The transformed array</returns>
        </member>
        <member name="M:SupportClass.ToByteArray(System.SByte[])">
            <summary>
            Converts an array of sbytes to an array of bytes
            </summary>
            <param name="sbyteArray">The array of sbytes to be converted</param>
            <returns>The new array of bytes</returns>
        </member>
        <member name="M:SupportClass.ToByteArray(System.String)">
            <summary>
            Converts a string to an array of bytes
            </summary>
            <param name="sourceString">The string to be converted</param>
            <returns>The new array of bytes</returns>
        </member>
        <member name="M:SupportClass.ToByteArray(System.Object[])">
            <summary>
            Converts a array of object-type instances to a byte-type array.
            </summary>
            <param name="tempObjectArray">Array to convert.</param>
            <returns>An array of byte type elements.</returns>
        </member>
        <member name="M:SupportClass.ReadInput(System.IO.Stream,System.SByte[]@,System.Int32,System.Int32)">
            <summary>Reads a number of characters from the current source Stream and writes the data to the target array at the specified index.</summary>
            <param name="sourceStream">The source Stream to read from.</param>
            <param name="target">Contains the array of characteres read from the source Stream.</param>
            <param name="start">The starting index of the target array.</param>
            <param name="count">The maximum number of characters to read from the source Stream.</param>
            <returns>The number of characters read. The number will be less than or equal to count depending on the data available in the source Stream. Returns -1 if the end of the stream is reached.</returns>
        </member>
        <member name="M:SupportClass.ReadInput(System.IO.TextReader,System.SByte[]@,System.Int32,System.Int32)">
            <summary>Reads a number of characters from the current source TextReader and writes the data to the target array at the specified index.</summary>
            <param name="sourceTextReader">The source TextReader to read from</param>
            <param name="target">Contains the array of characteres read from the source TextReader.</param>
            <param name="start">The starting index of the target array.</param>
            <param name="count">The maximum number of characters to read from the source TextReader.</param>
            <returns>The number of characters read. The number will be less than or equal to count depending on the data available in the source TextReader. Returns -1 if the end of the stream is reached.</returns>
        </member>
        <member name="M:SupportClass.Identity(System.Int64)">
            <summary>
            This method returns the literal value received
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
        </member>
        <member name="M:SupportClass.Identity(System.UInt64)">
            <summary>
            This method returns the literal value received
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
        </member>
        <member name="M:SupportClass.Identity(System.Single)">
            <summary>
            This method returns the literal value received
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
        </member>
        <member name="M:SupportClass.Identity(System.Double)">
            <summary>
            This method returns the literal value received
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
        </member>
        <member name="M:SupportClass.FormatDateTime(System.Globalization.DateTimeFormatInfo,System.DateTime)">
            <summary>
            Gets the DateTimeFormat instance and date instance to obtain the date with the format passed
            </summary>
            <param name="format">The DateTimeFormat to obtain the time and date pattern</param>
            <param name="date">The date instance used to get the date</param>
            <returns>A string representing the date with the time and date patterns</returns>
        </member>
        <member name="M:SupportClass.PutElement(System.Collections.IDictionary,System.Object,System.Object)">
            <summary>
            Adds a new key-and-value pair into the hash table
            </summary>
            <param name="collection">The collection to work with</param>
            <param name="key">Key used to obtain the value</param>
            <param name="newValue">Value asociated with the key</param>
            <returns>The old element associated with the key</returns>
        </member>
        <member name="M:SupportClass.VectorRemoveElement(System.Collections.ArrayList,System.Object)">
            <summary>
            Removes the first occurrence of an specific object from an ArrayList instance.
            </summary>
            <param name="arrayList">The ArrayList instance</param>
            <param name="element">The element to remove</param>
            <returns>True if item is found in the ArrayList; otherwise, false</returns>  
        </member>
        <member name="M:SupportClass.HashtableRemove(System.Collections.Hashtable,System.Object)">
            <summary>
            Removes the element with the specified key from a Hashtable instance.
            </summary>
            <param name="hashtable">The Hashtable instance</param>
            <param name="key">The key of the element to remove</param>
            <returns>The element removed</returns>  
        </member>
        <member name="M:SupportClass.SetSize(System.Collections.ArrayList,System.Int32)">
            <summary>
            Sets the size of the ArrayList. If the new size is greater than the current capacity, then new null items are added to the end of the ArrayList. If the new size is lower than the current size, then all elements after the new size are discarded
            </summary>
            <param name="arrayList">The ArrayList to be changed</param>
            <param name="newSize">The new ArrayList size</param>
        </member>
        <member name="M:SupportClass.StackPush(System.Collections.Stack,System.Object)">
            <summary>
            Adds an element to the top end of a Stack instance.
            </summary>
            <param name="stack">The Stack instance</param>
            <param name="element">The element to add</param>
            <returns>The element added</returns>  
        </member>
        <member name="M:SupportClass.GetCharsFromString(System.String,System.Int32,System.Int32,System.Char[]@,System.Int32)">
            <summary>
            Copies an array of chars obtained from a String into a specified array of chars
            </summary>
            <param name="sourceString">The String to get the chars from</param>
            <param name="sourceStart">Position of the String to start getting the chars</param>
            <param name="sourceEnd">Position of the String to end getting the chars</param>
            <param name="destinationArray">Array to return the chars</param>
            <param name="destinationStart">Position of the destination array of chars to start storing the chars</param>
            <returns>An array of chars</returns>
        </member>
        <member name="M:SupportClass.GetFileStream(System.String,System.Boolean)">
            <summary>
            Creates an output file stream to write to the file with the specified name.
            </summary>
            <param name="FileName">Name of the file to write.</param>
            <param name="Append">True in order to write to the end of the file, false otherwise.</param>
            <returns>New instance of FileStream with the proper file mode.</returns>
        </member>
        <member name="M:SupportClass.ToCharArray(System.SByte[])">
            <summary>
            Converts an array of sbytes to an array of chars
            </summary>
            <param name="sByteArray">The array of sbytes to convert</param>
            <returns>The new array of chars</returns>
        </member>
        <member name="M:SupportClass.ToCharArray(System.Byte[])">
            <summary>
            Converts an array of bytes to an array of chars
            </summary>
            <param name="byteArray">The array of bytes to convert</param>
            <returns>The new array of chars</returns>
        </member>
        <member name="M:SupportClass.CreateNewInstance(System.Type)">
            <summary>
            Creates an instance of a received Type.
            </summary>
            <param name="classType">The Type of the new class instance to return.</param>
            <returns>An Object containing the new instance.</returns>
        </member>
        <member name="M:SupportClass.WriteStackTrace(System.Exception,System.IO.TextWriter)">
            <summary>
            Writes the exception stack trace to the received stream
            </summary>
            <param name="throwable">Exception to obtain information from</param>
            <param name="stream">Output sream used to write to</param>
        </member>
        <member name="M:SupportClass.EqualsSupport(System.Collections.ICollection,System.Collections.ICollection)">
            <summary>
            Determines whether two Collections instances are equals.
            </summary>
            <param name="source">The first Collections to compare. </param>
            <param name="target">The second Collections to compare. </param>
            <returns>Return true if the first collection is the same instance as the second collection, otherwise return false.</returns>
        </member>
        <member name="M:SupportClass.EqualsSupport(System.Collections.ICollection,System.Object)">
            <summary>
            Determines if a Collection is equal to the Object.
            </summary>
            <param name="source">The first Collections to compare.</param>
            <param name="target">The Object to compare.</param>
            <returns>Return true if the first collection contains the same values of the second Object, otherwise return false.</returns>
        </member>
        <member name="M:SupportClass.EqualsSupport(System.Collections.IDictionaryEnumerator,System.Object)">
            <summary>
            Determines if a IDictionaryEnumerator is equal to the Object.
            </summary>
            <param name="source">The first IDictionaryEnumerator to compare.</param>
            <param name="target">The second Object to compare.</param>
            <returns>Return true if the first IDictionaryEnumerator contains the same values of the second Object, otherwise return false.</returns>
        </member>
        <member name="M:SupportClass.EqualsSupport(System.Collections.IDictionaryEnumerator,System.Collections.IDictionaryEnumerator)">
            <summary>
            Determines whether two IDictionaryEnumerator instances are equals.
            </summary>
            <param name="source">The first IDictionaryEnumerator to compare.</param>
            <param name="target">The second IDictionaryEnumerator to compare.</param>
            <returns>Return true if the first IDictionaryEnumerator contains the same values as the second IDictionaryEnumerator, otherwise return false.</returns>
        </member>
        <member name="M:SupportClass.ReverseStack(System.Collections.ICollection)">
            <summary>
            Reverses the Stack Collection received.
            </summary>
            <param name="collection">The collection to reverse.</param>
            <returns>The collection received in reverse order if it was a System.Collections.Stack type, otherwise it does 
            nothing to the collection.</returns>
        </member>
        <member name="T:SupportClass.Tokenizer">
            <summary>
            The class performs token processing from strings
            </summary>
        </member>
        <member name="M:SupportClass.Tokenizer.#ctor(System.String)">
            <summary>
            Initializes a new class instance with a specified string to process
            </summary>
            <param name="source">String to tokenize</param>
        </member>
        <member name="M:SupportClass.Tokenizer.#ctor(System.String,System.String)">
            <summary>
            Initializes a new class instance with a specified string to process
            and the specified token delimiters to use
            </summary>
            <param name="source">String to tokenize</param>
            <param name="delimiters">String containing the delimiters</param>
        </member>
        <member name="M:SupportClass.Tokenizer.HasMoreTokens">
            <summary>
            Determines if there are more tokens to return from the source string
            </summary>
            <returns>True or false, depending if there are more tokens</returns>
        </member>
        <member name="M:SupportClass.Tokenizer.NextToken">
            <summary>
            Returns the next token from the token list
            </summary>
            <returns>The string value of the token</returns>
        </member>
        <member name="M:SupportClass.Tokenizer.NextToken(System.String)">
            <summary>
            Returns the next token from the source string, using the provided
            token delimiters
            </summary>
            <param name="delimiters">String containing the delimiters to use</param>
            <returns>The string value of the token</returns>
        </member>
        <member name="M:SupportClass.Tokenizer.RemoveEmptyStrings">
            <summary>
            Removes all empty strings from the token list
            </summary>
        </member>
        <member name="P:SupportClass.Tokenizer.Count">
            <summary>
            Current token count for the source string
            </summary>
        </member>
        <member name="T:SupportClass.DateTimeFormatManager">
            <summary>
            Provides support for DateFormat
            </summary>
        </member>
        <member name="T:SupportClass.DateTimeFormatManager.DateTimeFormatHashTable">
            <summary>
            Hashtable class to provide functionality for dateformat properties
            </summary>
        </member>
        <member name="M:SupportClass.DateTimeFormatManager.DateTimeFormatHashTable.SetDateFormatPattern(System.Globalization.DateTimeFormatInfo,System.String)">
            <summary>
            Sets the format for datetime.
            </summary>
            <param name="format">DateTimeFormat instance to set the pattern</param>
            <param name="newPattern">A string with the pattern format</param>
        </member>
        <member name="M:SupportClass.DateTimeFormatManager.DateTimeFormatHashTable.GetDateFormatPattern(System.Globalization.DateTimeFormatInfo)">
            <summary>
            Gets the current format pattern of the DateTimeFormat instance
            </summary>
            <param name="format">The DateTimeFormat instance which the value will be obtained</param>
            <returns>The string representing the current datetimeformat pattern</returns>
        </member>
        <member name="M:SupportClass.DateTimeFormatManager.DateTimeFormatHashTable.SetTimeFormatPattern(System.Globalization.DateTimeFormatInfo,System.String)">
            <summary>
            Sets the datetimeformat pattern to the giving format
            </summary>
            <param name="format">The datetimeformat instance to set</param>
            <param name="newPattern">The new datetimeformat pattern</param>
        </member>
        <member name="M:SupportClass.DateTimeFormatManager.DateTimeFormatHashTable.GetTimeFormatPattern(System.Globalization.DateTimeFormatInfo)">
            <summary>
            Gets the current format pattern of the DateTimeFormat instance
            </summary>
            <param name="format">The DateTimeFormat instance which the value will be obtained</param>
            <returns>The string representing the current datetimeformat pattern</returns>
        </member>
        <member name="T:SupportClass.DateTimeFormatManager.DateTimeFormatHashTable.DateTimeFormatProperties">
            <summary>
            Internal class to provides the DateFormat and TimeFormat pattern properties on .NET
            </summary>
        </member>
        <member name="T:SupportClass.ArrayListSupport">
            <summary>
            This class contains static methods to manage arrays.
            </summary>
        </member>
        <member name="M:SupportClass.ArrayListSupport.ToArray(System.Collections.ArrayList,System.Object[])">
            <summary>
            Obtains an array containing all the elements of the collection. 
            </summary>
            <param name="collection">The collection from wich to obtain the elements.</param>
            <param name="objects">The array containing all the elements of the collection.</param>
            <returns>The array containing all the elements of the collection.</returns>
        </member>
        <member name="T:SupportClass.ThreadClass">
            <summary>
            Support class used to handle threads
            </summary>
        </member>
        <member name="F:SupportClass.ThreadClass.threadField">
            <summary>
            The instance of System.Threading.Thread
            </summary>
        </member>
        <member name="M:SupportClass.ThreadClass.#ctor">
            <summary>
            Initializes a new instance of the ThreadClass class
            </summary>
        </member>
        <member name="M:SupportClass.ThreadClass.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Thread class.
            </summary>
            <param name="Name">The name of the thread</param>
        </member>
        <member name="M:SupportClass.ThreadClass.#ctor(System.Threading.ThreadStart)">
            <summary>
            Initializes a new instance of the Thread class.
            </summary>
            <param name="Start">A ThreadStart delegate that references the methods to be invoked when this thread begins executing</param>
        </member>
        <member name="M:SupportClass.ThreadClass.#ctor(System.Threading.ThreadStart,System.String)">
            <summary>
            Initializes a new instance of the Thread class.
            </summary>
            <param name="Start">A ThreadStart delegate that references the methods to be invoked when this thread begins executing</param>
            <param name="Name">The name of the thread</param>
        </member>
        <member name="M:SupportClass.ThreadClass.Run">
            <summary>
            This method has no functionality unless the method is overridden
            </summary>
        </member>
        <member name="M:SupportClass.ThreadClass.Start">
            <summary>
            Causes the operating system to change the state of the current thread instance to ThreadState.Running
            </summary>
        </member>
        <member name="M:SupportClass.ThreadClass.Interrupt">
            <summary>
            Interrupts a thread that is in the WaitSleepJoin thread state
            </summary>
        </member>
        <member name="M:SupportClass.ThreadClass.Join">
            <summary>
            Blocks the calling thread until a thread terminates
            </summary>
        </member>
        <member name="M:SupportClass.ThreadClass.Join(System.Int64)">
            <summary>
            Blocks the calling thread until a thread terminates or the specified time elapses
            </summary>
            <param name="MiliSeconds">Time of wait in milliseconds</param>
        </member>
        <member name="M:SupportClass.ThreadClass.Join(System.Int64,System.Int32)">
            <summary>
            Blocks the calling thread until a thread terminates or the specified time elapses
            </summary>
            <param name="MiliSeconds">Time of wait in milliseconds</param>
            <param name="NanoSeconds">Time of wait in nanoseconds</param>
        </member>
        <member name="M:SupportClass.ThreadClass.Resume">
            <summary>
            Resumes a thread that has been suspended
            </summary>
        </member>
        <member name="M:SupportClass.ThreadClass.Abort">
            <summary>
            Raises a ThreadAbortException in the thread on which it is invoked, 
            to begin the process of terminating the thread. Calling this method 
            usually terminates the thread
            </summary>
        </member>
        <member name="M:SupportClass.ThreadClass.Abort(System.Object)">
            <summary>
            Raises a ThreadAbortException in the thread on which it is invoked, 
            to begin the process of terminating the thread while also providing
            exception information about the thread termination. 
            Calling this method usually terminates the thread.
            </summary>
            <param name="stateInfo">An object that contains application-specific information, such as state, which can be used by the thread being aborted</param>
        </member>
        <member name="M:SupportClass.ThreadClass.Suspend">
            <summary>
            Suspends the thread, if the thread is already suspended it has no effect
            </summary>
        </member>
        <member name="M:SupportClass.ThreadClass.ToString">
            <summary>
            Obtain a String that represents the current Object
            </summary>
            <returns>A String that represents the current Object</returns>
        </member>
        <member name="M:SupportClass.ThreadClass.Current">
            <summary>
            Gets the currently running thread
            </summary>
            <returns>The currently running thread</returns>
        </member>
        <member name="P:SupportClass.ThreadClass.Instance">
            <summary>
            Gets the current thread instance
            </summary>
        </member>
        <member name="P:SupportClass.ThreadClass.Name">
            <summary>
            Gets or sets the name of the thread
            </summary>
        </member>
        <member name="P:SupportClass.ThreadClass.Priority">
            <summary>
            Gets or sets a value indicating the scheduling priority of a thread
            </summary>
        </member>
        <member name="P:SupportClass.ThreadClass.IsAlive">
            <summary>
            Gets a value indicating the execution status of the current thread
            </summary>
        </member>
        <member name="P:SupportClass.ThreadClass.IsBackground">
            <summary>
            Gets or sets a value indicating whether or not a thread is a background thread.
            </summary>
        </member>
        <member name="T:SupportClass.CollectionSupport">
            <summary>
            This class contains different methods to manage Collections.
            </summary>
        </member>
        <member name="M:SupportClass.CollectionSupport.#ctor">
            <summary>
            Creates an instance of the Collection by using an inherited constructor.
            </summary>
        </member>
        <member name="M:SupportClass.CollectionSupport.Add(System.Object)">
            <summary>
            Adds an specified element to the collection.
            </summary>
            <param name="element">The element to be added.</param>
            <returns>Returns true if the element was successfuly added. Otherwise returns false.</returns>
        </member>
        <member name="M:SupportClass.CollectionSupport.AddAll(System.Collections.ICollection)">
            <summary>
            Adds all the elements contained in the specified collection.
            </summary>
            <param name="collection">The collection used to extract the elements that will be added.</param>
            <returns>Returns true if all the elements were successfuly added. Otherwise returns false.</returns>
        </member>
        <member name="M:SupportClass.CollectionSupport.AddAll(SupportClass.CollectionSupport)">
            <summary>
            Adds all the elements contained in the specified support class collection.
            </summary>
            <param name="collection">The collection used to extract the elements that will be added.</param>
            <returns>Returns true if all the elements were successfuly added. Otherwise returns false.</returns>
        </member>
        <member name="M:SupportClass.CollectionSupport.Contains(System.Object)">
            <summary>
            Verifies if the specified element is contained into the collection. 
            </summary>
            <param name="element"> The element that will be verified.</param>
            <returns>Returns true if the element is contained in the collection. Otherwise returns false.</returns>
        </member>
        <member name="M:SupportClass.CollectionSupport.ContainsAll(System.Collections.ICollection)">
            <summary>
            Verifies if all the elements of the specified collection are contained into the current collection.
            </summary>
            <param name="collection">The collection used to extract the elements that will be verified.</param>
            <returns>Returns true if all the elements are contained in the collection. Otherwise returns false.</returns>
        </member>
        <member name="M:SupportClass.CollectionSupport.ContainsAll(SupportClass.CollectionSupport)">
            <summary>
            Verifies if all the elements of the specified collection are contained into the current collection.
            </summary>
            <param name="collection">The collection used to extract the elements that will be verified.</param>
            <returns>Returns true if all the elements are contained in the collection. Otherwise returns false.</returns>
        </member>
        <member name="M:SupportClass.CollectionSupport.IsEmpty">
            <summary>
            Verifies if the collection is empty.
            </summary>
            <returns>Returns true if the collection is empty. Otherwise returns false.</returns>
        </member>
        <member name="M:SupportClass.CollectionSupport.Remove(System.Object)">
            <summary>
            Removes an specified element from the collection.
            </summary>
            <param name="element">The element to be removed.</param>
            <returns>Returns true if the element was successfuly removed. Otherwise returns false.</returns>
        </member>
        <member name="M:SupportClass.CollectionSupport.RemoveAll(System.Collections.ICollection)">
            <summary>
            Removes all the elements contained into the specified collection.
            </summary>
            <param name="collection">The collection used to extract the elements that will be removed.</param>
            <returns>Returns true if all the elements were successfuly removed. Otherwise returns false.</returns>
        </member>
        <member name="M:SupportClass.CollectionSupport.RemoveAll(SupportClass.CollectionSupport)">
            <summary>
            Removes all the elements contained into the specified collection.
            </summary>
            <param name="collection">The collection used to extract the elements that will be removed.</param>
            <returns>Returns true if all the elements were successfuly removed. Otherwise returns false.</returns>
        </member>
        <member name="M:SupportClass.CollectionSupport.RetainAll(System.Collections.ICollection)">
            <summary>
            Removes all the elements that aren't contained into the specified collection.
            </summary>
            <param name="collection">The collection used to verify the elements that will be retained.</param>
            <returns>Returns true if all the elements were successfully removed. Otherwise returns false.</returns>
        </member>
        <member name="M:SupportClass.CollectionSupport.RetainAll(SupportClass.CollectionSupport)">
            <summary>
            Removes all the elements that aren't contained into the specified collection.
            </summary>
            <param name="collection">The collection used to verify the elements that will be retained.</param>
            <returns>Returns true if all the elements were successfully removed. Otherwise returns false.</returns>
        </member>
        <member name="M:SupportClass.CollectionSupport.ToArray">
            <summary>
            Obtains an array containing all the elements of the collection.
            </summary>
            <returns>The array containing all the elements of the collection</returns>
        </member>
        <member name="M:SupportClass.CollectionSupport.ToArray(System.Object[])">
            <summary>
            Obtains an array containing all the elements of the collection.
            </summary>
            <param name="objects">The array into which the elements of the collection will be stored.</param>
            <returns>The array containing all the elements of the collection.</returns>
        </member>
        <member name="M:SupportClass.CollectionSupport.ToCollectionSupport(System.Object[])">
            <summary>
            Creates a CollectionSupport object with the contents specified in array.
            </summary>
            <param name="array">The array containing the elements used to populate the new CollectionSupport object.</param>
            <returns>A CollectionSupport object populated with the contents of array.</returns>
        </member>
        <member name="T:SupportClass.ListCollectionSupport">
            <summary>
            This class contains different methods to manage list collections.
            </summary>
        </member>
        <member name="M:SupportClass.ListCollectionSupport.#ctor">
            <summary>
            Creates a new instance of the class ListCollectionSupport.
            </summary>
        </member>
        <member name="M:SupportClass.ListCollectionSupport.#ctor(System.Collections.ICollection)">
            <summary>
            Creates a new instance of the class ListCollectionSupport.
            </summary>
            <param name="collection">The collection to insert into the new object.</param>
        </member>
        <member name="M:SupportClass.ListCollectionSupport.#ctor(System.Int32)">
            <summary>
            Creates a new instance of the class ListCollectionSupport with the specified capacity.
            </summary>
            <param name="capacity">The capacity of the new array.</param>
        </member>
        <member name="M:SupportClass.ListCollectionSupport.Add(System.Object)">
            <summary>
            Adds an object to the end of the List.
            </summary>          
            <param name="valueToInsert">The value to insert in the array list.</param>
            <returns>Returns true after adding the value.</returns>
        </member>
        <member name="M:SupportClass.ListCollectionSupport.AddAll(System.Int32,System.Collections.IList)">
            <summary>
            Adds all the elements contained into the specified collection, starting at the specified position.
            </summary>
            <param name="index">Position at which to add the first element from the specified collection.</param>
            <param name="list">The list used to extract the elements that will be added.</param>
            <returns>Returns true if all the elements were successfuly added. Otherwise returns false.</returns>
        </member>
        <member name="M:SupportClass.ListCollectionSupport.AddAll(System.Collections.IList)">
            <summary>
            Adds all the elements contained in the specified collection.
            </summary>
            <param name="collection">The collection used to extract the elements that will be added.</param>
            <returns>Returns true if all the elements were successfuly added. Otherwise returns false.</returns>
        </member>
        <member name="M:SupportClass.ListCollectionSupport.AddAll(SupportClass.CollectionSupport)">
            <summary>
            Adds all the elements contained in the specified support class collection.
            </summary>
            <param name="collection">The collection used to extract the elements that will be added.</param>
            <returns>Returns true if all the elements were successfuly added. Otherwise returns false.</returns>
        </member>
        <member name="M:SupportClass.ListCollectionSupport.AddAll(System.Int32,SupportClass.CollectionSupport)">
            <summary>
            Adds all the elements contained into the specified support class collection, starting at the specified position.
            </summary>
            <param name="index">Position at which to add the first element from the specified collection.</param>
            <param name="list">The list used to extract the elements that will be added.</param>
            <returns>Returns true if all the elements were successfuly added. Otherwise returns false.</returns>
        </member>
        <member name="M:SupportClass.ListCollectionSupport.ListCollectionClone">
            <summary>
            Creates a copy of the ListCollectionSupport.
            </summary>
            <returns> A copy of the ListCollectionSupport.</returns>
        </member>
        <member name="M:SupportClass.ListCollectionSupport.ListIterator">
            <summary>
            Returns an iterator of the collection.
            </summary>
            <returns>An IEnumerator.</returns>
        </member>
        <member name="M:SupportClass.ListCollectionSupport.RemoveAll(System.Collections.ICollection)">
            <summary>
            Removes all the elements contained into the specified collection.
            </summary>
            <param name="collection">The collection used to extract the elements that will be removed.</param>
            <returns>Returns true if all the elements were successfuly removed. Otherwise returns false.</returns>
        </member>
        <member name="M:SupportClass.ListCollectionSupport.RemoveAll(SupportClass.CollectionSupport)">
            <summary>
            Removes all the elements contained into the specified collection.
            </summary>
            <param name="collection">The collection used to extract the elements that will be removed.</param>
            <returns>Returns true if all the elements were successfuly removed. Otherwise returns false.</returns>
        </member>
        <member name="M:SupportClass.ListCollectionSupport.RemoveElement(System.Int32)">
            <summary>
            Removes the value in the specified index from the list.
            </summary>          
            <param name="index">The index of the value to remove.</param>
            <returns>Returns the value removed.</returns>
        </member>
        <member name="M:SupportClass.ListCollectionSupport.RemoveElement(System.Object)">
            <summary>
            Removes an specified element from the collection.
            </summary>
            <param name="element">The element to be removed.</param>
            <returns>Returns true if the element was successfuly removed. Otherwise returns false.</returns>
        </member>
        <member name="M:SupportClass.ListCollectionSupport.RemoveFirst">
            <summary>
            Removes the first value from an array list.
            </summary>          
            <returns>Returns the value removed.</returns>
        </member>
        <member name="M:SupportClass.ListCollectionSupport.RemoveLast">
            <summary>
            Removes the last value from an array list.
            </summary>
            <returns>Returns the value removed.</returns>
        </member>
        <member name="M:SupportClass.ListCollectionSupport.RetainAll(System.Collections.ICollection)">
            <summary>
            Removes all the elements that aren't contained into the specified collection.
            </summary>
            <param name="collection">The collection used to verify the elements that will be retained.</param>
            <returns>Returns true if all the elements were successfully removed. Otherwise returns false.</returns>
        </member>
        <member name="M:SupportClass.ListCollectionSupport.RetainAll(SupportClass.CollectionSupport)">
            <summary>
            Removes all the elements that aren't contained into the specified collection.
            </summary>
            <param name="collection">The collection used to verify the elements that will be retained.</param>
            <returns>Returns true if all the elements were successfully removed. Otherwise returns false.</returns>
        </member>
        <member name="M:SupportClass.ListCollectionSupport.ContainsAll(System.Collections.ICollection)">
            <summary>
            Verifies if all the elements of the specified collection are contained into the current collection.
            </summary>
            <param name="collection">The collection used to extract the elements that will be verified.</param>
            <returns>Returns true if all the elements are contained in the collection. Otherwise returns false.</returns>
        </member>
        <member name="M:SupportClass.ListCollectionSupport.ContainsAll(SupportClass.CollectionSupport)">
            <summary>
            Verifies if all the elements of the specified collection are contained into the current collection.
            </summary>
            <param name="collection">The collection used to extract the elements that will be verified.</param>
            <returns>Returns true if all the elements are contained in the collection. Otherwise returns false.</returns>
        </member>
        <member name="M:SupportClass.ListCollectionSupport.SubList(System.Int32,System.Int32)">
            <summary>
            Returns a new list containing a portion of the current list between a specified range. 
            </summary>
            <param name="startIndex">The start index of the range.</param>
            <param name="endIndex">The end index of the range.</param>
            <returns>A ListCollectionSupport instance containing the specified elements.</returns>
        </member>
        <member name="M:SupportClass.ListCollectionSupport.ToArray(System.Object[])">
            <summary>
            Obtains an array containing all the elements of the collection.
            </summary>
            <param name="objects">The array into which the elements of the collection will be stored.</param>
            <returns>The array containing all the elements of the collection.</returns>
        </member>
        <member name="M:SupportClass.ListCollectionSupport.ListIterator(System.Int32)">
            <summary>
            Returns an iterator of the collection starting at the specified position.
            </summary>
            <param name="index">The position to set the iterator.</param>
            <returns>An IEnumerator at the specified position.</returns>
        </member>
        <member name="M:SupportClass.ListCollectionSupport.GetLast">
            <summary>
            Gets the last value from a list.
            </summary>
            <returns>Returns the last element of the list.</returns>
        </member>
        <member name="M:SupportClass.ListCollectionSupport.IsEmpty">
            <summary>
            Return whether this list is empty.
            </summary>
            <returns>True if the list is empty, false if it isn't.</returns>
        </member>
        <member name="M:SupportClass.ListCollectionSupport.Set(System.Int32,System.Object)">
            <summary>
            Replaces the element at the specified position in this list with the specified element.
            </summary>
            <param name="index">Index of element to replace.</param>
            <param name="element">Element to be stored at the specified position.</param>
            <returns>The element previously at the specified position.</returns>
        </member>
        <member name="M:SupportClass.ListCollectionSupport.Get(System.Int32)">
            <summary>
            Returns the element at the specified position in the list.
            </summary>
            <param name="index">Index of element to return.</param>
            <param name="element">Element to be stored at the specified position.</param>
            <returns>The element at the specified position in the list.</returns>
        </member>
        <member name="T:SupportClass.ArraysSupport">
            <summary>
            This class manages array operations.
            </summary>
        </member>
        <member name="M:SupportClass.ArraysSupport.IsArrayEqual(System.Array,System.Array)">
            <summary>
            Compares the entire members of one array whith the other one.
            </summary>
            <param name="array1">The array to be compared.</param>
            <param name="array2">The array to be compared with.</param>
            <returns>True if both arrays are equals otherwise it returns false.</returns>
            <remarks>Two arrays are equal if they contains the same elements in the same order.</remarks>
        </member>
        <member name="M:SupportClass.ArraysSupport.FillArray(System.Array,System.Int32,System.Int32,System.Object)">
            <summary>
            Fills the array with an specific value from an specific index to an specific index.
            </summary>
            <param name="array">The array to be filled.</param>
            <param name="fromindex">The first index to be filled.</param>
            <param name="toindex">The last index to be filled.</param>
            <param name="val">The value to fill the array with.</param>
        </member>
        <member name="M:SupportClass.ArraysSupport.FillArray(System.Array,System.Object)">
            <summary>
            Fills the array with an specific value.
            </summary>
            <param name="array">The array to be filled.</param>
            <param name="val">The value to fill the array with.</param>
        </member>
        <member name="T:SupportClass.SetSupport">
            <summary>
            This class manages a set of elements.
            </summary>
        </member>
        <member name="M:SupportClass.SetSupport.#ctor">
            <summary>
            Creates a new set.
            </summary>
        </member>
        <member name="M:SupportClass.SetSupport.#ctor(System.Collections.ICollection)">
            <summary>
            Creates a new set initialized with System.Collections.ICollection object
            </summary>
            <param name="collection">System.Collections.ICollection object to initialize the set object</param>
        </member>
        <member name="M:SupportClass.SetSupport.#ctor(System.Int32)">
            <summary>
            Creates a new set initialized with a specific capacity.
            </summary>
            <param name="capacity">value to set the capacity of the set object</param>
        </member>
        <member name="M:SupportClass.SetSupport.Add(System.Object)">
            <summary>
            Adds an element to the set.
            </summary>
            <param name="objectToAdd">The object to be added.</param>
            <returns>True if the object was added, false otherwise.</returns>
        </member>
        <member name="M:SupportClass.SetSupport.AddAll(System.Collections.ICollection)">
            <summary>
            Adds all the elements contained in the specified collection.
            </summary>
            <param name="collection">The collection used to extract the elements that will be added.</param>
            <returns>Returns true if all the elements were successfuly added. Otherwise returns false.</returns>
        </member>
        <member name="M:SupportClass.SetSupport.AddAll(SupportClass.CollectionSupport)">
            <summary>
            Adds all the elements contained in the specified support class collection.
            </summary>
            <param name="collection">The collection used to extract the elements that will be added.</param>
            <returns>Returns true if all the elements were successfuly added. Otherwise returns false.</returns>
        </member>
        <member name="M:SupportClass.SetSupport.ContainsAll(System.Collections.ICollection)">
            <summary>
            Verifies that all the elements of the specified collection are contained into the current collection. 
            </summary>
            <param name="collection">The collection used to extract the elements that will be verified.</param>
            <returns>True if the collection contains all the given elements.</returns>
        </member>
        <member name="M:SupportClass.SetSupport.ContainsAll(SupportClass.CollectionSupport)">
            <summary>
            Verifies if all the elements of the specified collection are contained into the current collection.
            </summary>
            <param name="collection">The collection used to extract the elements that will be verified.</param>
            <returns>Returns true if all the elements are contained in the collection. Otherwise returns false.</returns>
        </member>
        <member name="M:SupportClass.SetSupport.IsEmpty">
            <summary>
            Verifies if the collection is empty.
            </summary>
            <returns>True if the collection is empty, false otherwise.</returns>
        </member>
        <member name="M:SupportClass.SetSupport.Remove(System.Object)">
            <summary>
            Removes an element from the set.
            </summary>
            <param name="elementToRemove">The element to be removed.</param>
            <returns>True if the element was removed.</returns>
        </member>
        <member name="M:SupportClass.SetSupport.RemoveAll(System.Collections.ICollection)">
            <summary>
            Removes all the elements contained in the specified collection.
            </summary>
            <param name="collection">The collection used to extract the elements that will be removed.</param>
            <returns>True if all the elements were successfuly removed, false otherwise.</returns>
        </member>
        <member name="M:SupportClass.SetSupport.RemoveAll(SupportClass.CollectionSupport)">
            <summary>
            Removes all the elements contained into the specified collection.
            </summary>
            <param name="collection">The collection used to extract the elements that will be removed.</param>
            <returns>Returns true if all the elements were successfuly removed. Otherwise returns false.</returns>
        </member>
        <member name="M:SupportClass.SetSupport.RetainAll(System.Collections.ICollection)">
            <summary>
            Removes all the elements that aren't contained in the specified collection.
            </summary>
            <param name="collection">The collection used to verify the elements that will be retained.</param>
            <returns>True if all the elements were successfully removed, false otherwise.</returns>
        </member>
        <member name="M:SupportClass.SetSupport.RetainAll(SupportClass.CollectionSupport)">
            <summary>
            Removes all the elements that aren't contained into the specified collection.
            </summary>
            <param name="collection">The collection used to verify the elements that will be retained.</param>
            <returns>Returns true if all the elements were successfully removed. Otherwise returns false.</returns>
        </member>
        <member name="M:SupportClass.SetSupport.ToArray">
            <summary>
            Obtains an array containing all the elements of the collection.
            </summary>
            <returns>The array containing all the elements of the collection.</returns>
        </member>
        <member name="M:SupportClass.SetSupport.ToArray(System.Object[])">
            <summary>
            Obtains an array containing all the elements in the collection.
            </summary>
            <param name="objects">The array into which the elements of the collection will be stored.</param>
            <returns>The array containing all the elements of the collection.</returns>
        </member>
        <member name="T:SupportClass.AbstractSetSupport">
            <summary>
            This class manages different operation with collections.
            </summary>
        </member>
        <member name="M:SupportClass.AbstractSetSupport.#ctor">
            <summary>
            The constructor with no parameters to create an abstract set.
            </summary>
        </member>
        <member name="T:SupportClass.MessageDigestSupport">
            <summary>
            Encapsulates the functionality of message digest algorithms such as SHA-1 or MD5.
            </summary>
        </member>
        <member name="M:SupportClass.MessageDigestSupport.#ctor(System.String)">
            <summary>
            Creates a message digest using the specified name to set Algorithm property.
            </summary>
            <param name="algorithm">The name of the algorithm to use</param>
        </member>
        <member name="M:SupportClass.MessageDigestSupport.DigestData">
            <summary>
            Computes the hash value for the internal data digest.
            </summary>
            <returns>The array of signed bytes with the resulting hash value</returns>
        </member>
        <member name="M:SupportClass.MessageDigestSupport.DigestData(System.Byte[])">
            <summary>
            Performs and update on the digest with the specified array and then completes the digest
            computation.
            </summary>
            <param name="newData">The array of bytes for final update to the digest</param>
            <returns>An array of signed bytes with the resulting hash value</returns>
        </member>
        <member name="M:SupportClass.MessageDigestSupport.Update(System.Byte[])">
            <summary>
            Updates the digest data with the specified array of bytes by making an append
            operation in the internal array of data.
            </summary>
            <param name="newData">The array of bytes for the update operation</param>
        </member>
        <member name="M:SupportClass.MessageDigestSupport.Update(System.Byte)">
            <summary>
            Updates the digest data with the input byte by calling the method Update with an array.
            </summary>
            <param name="newData">The input byte for the update</param>
        </member>
        <member name="M:SupportClass.MessageDigestSupport.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Updates the specified count of bytes with the input array of bytes starting at the
            input offset.
            </summary>
            <param name="newData">The array of bytes for the update operation</param>
            <param name="offset">The initial position to start from in the array of bytes</param>
            <param name="count">The number of bytes fot the update</param>
        </member>
        <member name="M:SupportClass.MessageDigestSupport.Reset">
            <summary>
            Resets the digest data to the initial state.
            </summary>
        </member>
        <member name="M:SupportClass.MessageDigestSupport.ToString">
            <summary>
            Returns a string representation of the Message Digest
            </summary>
            <returns>A string representation of the object</returns>
        </member>
        <member name="M:SupportClass.MessageDigestSupport.GetInstance(System.String)">
            <summary>
            Generates a new instance of the MessageDigestSupport class using the specified algorithm
            </summary>
            <param name="algorithm">The name of the algorithm to use</param>
            <returns>A new instance of the MessageDigestSupport class</returns>
        </member>
        <member name="M:SupportClass.MessageDigestSupport.EquivalentDigest(System.SByte[],System.SByte[])">
            <summary>
            Compares two arrays of signed bytes evaluating equivalence in digest data
            </summary>
            <param name="firstDigest">An array of signed bytes for comparison</param>
            <param name="secondDigest">An array of signed bytes for comparison</param>
            <returns>True if the input digest arrays are equal</returns>
        </member>
        <member name="P:SupportClass.MessageDigestSupport.Algorithm">
            <summary>
            The HashAlgorithm instance that provide the cryptographic hash algorithm
            </summary>
        </member>
        <member name="P:SupportClass.MessageDigestSupport.Data">
            <summary>
            The digest data
            </summary>
        </member>
        <member name="P:SupportClass.MessageDigestSupport.AlgorithmName">
            <summary>
            The name of the cryptographic hash algorithm used in the instance
            </summary>
        </member>
        <member name="T:SupportClass.SecureRandomSupport">
            <summary>
            This class uses a cryptographic Random Number Generator to provide support for
            strong pseudo-random number generation.
            </summary>
        </member>
        <member name="M:SupportClass.SecureRandomSupport.#ctor">
            <summary>
            Initializes a new instance of the random number generator.
            </summary>
        </member>
        <member name="M:SupportClass.SecureRandomSupport.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the random number generator with the given seed.
            </summary>
            <param name="seed">The initial seed for the generator</param>
        </member>
        <member name="M:SupportClass.SecureRandomSupport.NextBytes(System.Byte[])">
            <summary>
            Returns an array of bytes with a sequence of cryptographically strong random values
            </summary>
            <param name="randomnumbersarray">The array of bytes to fill</param>
        </member>
        <member name="M:SupportClass.SecureRandomSupport.GetSeed(System.Int32)">
            <summary>
            Returns the given number of seed bytes generated for the first running of a new instance 
            of the random number generator
            </summary>
            <param name="numberOfBytes">Number of seed bytes to generate</param>
            <returns>Seed bytes generated</returns>
        </member>
        <member name="M:SupportClass.SecureRandomSupport.SetSeed(System.Byte[])">
            <summary>
            Creates a new instance of the random number generator with the seed provided by the user
            </summary>
            <param name="newSeed">Seed to create a new random number generator</param>
        </member>
        <member name="M:SupportClass.SecureRandomSupport.SetSeed(System.Int64)">
            <summary>
            Creates a new instance of the random number generator with the seed provided by the user
            </summary>
            <param name="newSeed">Seed to create a new random number generator</param>
        </member>
        <member name="T:SupportClass.SingleThreadModel">
            <summary>
            Interface used by classes which must be single threaded.
            </summary>
        </member>
        <member name="T:Novell.Directory.Ldap.LdapException">
            <summary>  Thrown to indicate that an Ldap exception has occurred. This is a general
            exception which includes a message and an Ldap result code.
            
            An LdapException can result from physical problems (such as
            network errors) as well as problems with Ldap operations detected
            by the server. For example, if an Ldap add operation fails because of a
            duplicate entry, the server returns a result code.
            
            Five possible sources of information are available from LdapException:
            <dl>
            <dt>Result Code:</dt>
            <dd>The <code>getResultCode</code> method returns a result code,
            which can be compared against standard Ldap result codes. </dd>
            <dt>Message:</dt>
            <dd>The <code>getMessage</code> method returns a localized message
            from the message resource that corresponds to the result code.
            </dd>
            <dt>Ldap server Message:</dt>
            <dd>The <code>getLdapErrorMessage</code> method returns any error
            message received from the Ldap server.</dd>
            <dt>Matched DN:</dt>
            <dd>The <code>getMatchedDN</code> method retrieves the part of a
            submitted distinguished name which could be matched by the server</dd>
            <dt>Root Cause:</dt>
            <dd>The <code>getCause</code> method returns the a nested exception
            that was the original cause for the error. </dd>
            </dl>
            
            The <code>toString</code> method returns a string containing all
            the above sources of information, if they have a value.
            
            Exceptions generated by the API, i.e. that are not a result
            of a server response, can be identified as <tt>instanceof
            {@link LdapLocalException}</tt>
            
            The following table lists the standard Ldap result codes.
            See RFC2251 for a discussion of the meanings of the result codes.
            The corresponding ASN.1 definition from RFC2251 is provided in parentheses.
            <table>
            <tr>
            <td><b>Value</b></td>
            <td><b>Result Code</b></td>
            </tr>
            <tr><td> 0</td><td>{@link #SUCCESS} (success) </td></tr>
            <tr><td> 1</td><td>{@link #OPERATIONS_ERROR} (operationsError) </td></tr>
            <tr><td> 2</td><td>{@link #PROTOCOL_ERROR} (protocolError) </td></tr>
            <tr><td> 3</td><td>{@link #TIME_LIMIT_EXCEEDED} (timeLimitExceeded) </td></tr>
            <tr><td> 4</td><td>{@link #SIZE_LIMIT_EXCEEDED} (sizeLimitExceeded) </td></tr>
            <tr><td> 5</td><td>{@link #COMPARE_FALSE} (compareFalse) </td></tr>
            <tr><td> 6</td><td>{@link #COMPARE_TRUE} (compareTrue) </td></tr>
            <tr><td> 7</td><td>{@link #AUTH_METHOD_NOT_SUPPORTED} (authMethodNotSupported) </td></tr>
            <tr><td> 8</td><td>{@link #STRONG_AUTH_REQUIRED} (strongAuthRequired) </td></tr>
            <tr><td> 10</td><td>{@link #REFERRAL} (referral) </td></tr>
            <tr><td> 11</td><td>{@link #ADMIN_LIMIT_EXCEEDED} (adminLimitExceeded) </td></tr>
            <tr><td> 12</td><td>{@link #UNAVAILABLE_CRITICAL_EXTENSION} (unavailableCriticalExtension) </td></tr>
            <tr><td> 13</td><td>{@link #CONFIDENTIALITY_REQUIRED} (confidentialityRequired) </td></tr>
            <tr><td> 14</td><td>{@link #SASL_BIND_IN_PROGRESS} (saslBindInProgress) </td></tr>
            <tr><td> 16</td><td>{@link #NO_SUCH_ATTRIBUTE} (noSuchAttribute) </td></tr>
            <tr><td> 17</td><td>{@link #UNDEFINED_ATTRIBUTE_TYPE} (undefinedAttributeType) </td></tr>
            <tr><td> 18</td><td>{@link #INAPPROPRIATE_MATCHING} (inappropriateMatching) </td></tr>
            <tr><td> 19</td><td>{@link #CONSTRAINT_VIOLATION} (constraintViolation) </td></tr>
            <tr><td> 20</td><td>{@link #ATTRIBUTE_OR_VALUE_EXISTS} (AttributeOrValueExists) </td></tr>
            <tr><td> 21</td><td>{@link #INVALID_ATTRIBUTE_SYNTAX} (invalidAttributeSyntax) </td></tr>
            <tr><td> 32</td><td>{@link #NO_SUCH_OBJECT} (noSuchObject) </td></tr>
            <tr><td> 33</td><td>{@link #ALIAS_PROBLEM} (aliasProblem) </td></tr>
            <tr><td> 34</td><td>{@link #INVALID_DN_SYNTAX} (invalidDNSyntax) </td></tr>
            <tr><td> 35</td><td>{@link #IS_LEAF} (isLeaf) </td></tr>
            <tr><td> 36</td><td>{@link #ALIAS_DEREFERENCING_PROBLEM} (aliasDereferencingProblem) </td></tr>
            <tr><td> 48</td><td>{@link #INAPPROPRIATE_AUTHENTICATION} (inappropriateAuthentication) </td></tr>
            <tr><td> 49</td><td>{@link #INVALID_CREDENTIALS} (invalidCredentials) </td></tr>
            <tr><td> 50</td><td>{@link #INSUFFICIENT_ACCESS_RIGHTS} (insufficientAccessRights) </td></tr>
            <tr><td> 51</td><td>{@link #BUSY} (busy) </td></tr>
            <tr><td> 52</td><td>{@link #UNAVAILABLE} (unavailable) </td></tr>
            <tr><td> 53</td><td>{@link #UNWILLING_TO_PERFORM} (unwillingToPerform) </td></tr>
            <tr><td> 54</td><td>{@link #LOOP_DETECT} (loopDetect) </td></tr>
            <tr><td> 64</td><td>{@link #NAMING_VIOLATION} (namingViolation) </td></tr>
            <tr><td> 65</td><td>{@link #OBJECT_CLASS_VIOLATION} (objectClassViolation) </td></tr>
            <tr><td> 66</td><td>{@link #NOT_ALLOWED_ON_NONLEAF} (notAllowedOnNonLeaf) </td></tr>
            <tr><td> 67</td><td>{@link #NOT_ALLOWED_ON_RDN} (notAllowedOnRDN) </td></tr>
            <tr><td> 68</td><td>{@link #ENTRY_ALREADY_EXISTS} (entryAlreadyExists) </td></tr>
            <tr><td> 69</td><td>{@link #OBJECT_CLASS_MODS_PROHIBITED} (objectClassModsProhibited) </td></tr>
            <tr><td> 71</td><td>{@link #AFFECTS_MULTIPLE_DSAS} (affectsMultipleDSAs </td></tr>
            <tr><td> 80</td><td>{@link #OTHER} (other) </td></tr>
            </table>
            
            Local errors, resulting from actions other than an operation on a
            server.
            
            <table>
            <tr>
            <td><b>Value</b></td>
            <td><b>Result Code</b></td>
            </tr>
            <tr><td>81</td><td>{@link #SERVER_DOWN}</td></tr>
            <tr><td>82</td><td>{@link #LOCAL_ERROR}</td></tr>
            <tr><td>83</td><td>{@link #ENCODING_ERROR}</td></tr>
            <tr><td>84</td><td>{@link #DECODING_ERROR}</td></tr>
            <tr><td>85</td><td>{@link #Ldap_TIMEOUT}</td></tr>
            <tr><td>86</td><td>{@link #AUTH_UNKNOWN}</td></tr>
            <tr><td>87</td><td>{@link #FILTER_ERROR}</td></tr>
            <tr><td>88</td><td>{@link #USER_CANCELLED}</td></tr>
            <tr><td>90</td><td>{@link #NO_MEMORY}</td></tr>
            <tr><td>91</td><td>{@link #CONNECT_ERROR}</td></tr>
            <tr><td>92</td><td>{@link #Ldap_NOT_SUPPORTED}</td></tr>
            <tr><td>93</td><td>{@link #CONTROL_NOT_FOUND}</td></tr>
            <tr><td>94</td><td>{@link #NO_RESULTS_RETURNED}</td></tr>
            <tr><td>95</td><td>{@link #MORE_RESULTS_TO_RETURN}</td></tr>
            <tr><td>96</td><td>{@link #CLIENT_LOOP}</td></tr>
            <tr><td>97</td><td>{@link #REFERRAL_LIMIT_EXCEEDED}</td></tr>
            <tr><td>100</td><td>{@link #INVALID_RESPONSE}</td></tr>
            <tr><td>101</td><td>{@link #AMBIGUOUS_RESPONSE}</td></tr>
            <tr><td>112</td><td>{@link #TLS_NOT_SUPPORTED}</td></tr>
            </table>
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapException.SUCCESS">
            <summary>Indicates the requested client operation completed successfully.
            
            SUCCESS = 0<p/>
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapException.OPERATIONS_ERROR">
            <summary> Indicates an internal error.
            
            The server is unable to respond with a more specific error and is
            also unable to properly respond to a request. It does not indicate
            that the client has sent an erroneous message.
            
            OPERATIONS_ERROR = 1
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapException.PROTOCOL_ERROR">
            <summary> Indicates that the server has received an invalid or malformed request
            from the client.
            
            PROTOCOL_ERROR = 2
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapException.TIME_LIMIT_EXCEEDED">
            <summary> Indicates that the operation's time limit specified by either the
            client or the server has been exceeded.
            
            On search operations, incomplete results are returned.
            
            TIME_LIMIT_EXCEEDED = 3
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapException.SIZE_LIMIT_EXCEEDED">
            <summary> Indicates that in a search operation, the size limit specified by
            the client or the server has been exceeded. Incomplete results are
            returned.
            
            SIZE_LIMIT_EXCEEDED = 4
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapException.COMPARE_FALSE">
            <summary> Does not indicate an error condition. Indicates that the results of
            a compare operation are false.
            
            COMPARE_FALSE = 5
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapException.COMPARE_TRUE">
            <summary> Does not indicate an error condition. Indicates that the results of a
            compare operation are true.
            
            COMPARE_TRUE = 6
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapException.AUTH_METHOD_NOT_SUPPORTED">
            <summary> Indicates that during a bind operation the client requested an
            authentication method not supported by the Ldap server.
            
            AUTH_METHOD_NOT_SUPPORTED = 7
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapException.STRONG_AUTH_REQUIRED">
            <summary>Indicates a problem with the level of authentication.
            
            One of the following has occurred:
            <ul>
            <li>In bind requests, the Ldap server accepts only strong
            authentication.</li>
            <li>In a client request, the client requested an operation such as delete
            that requires strong authentication.</li>
            <li>In an unsolicited notice of disconnection, the Ldap server discovers
            the security protecting the communication between the client and
            server has unexpectedly failed or been compromised.</li>
            </ul>
            STRONG_AUTH_REQUIRED = 8
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapException.Ldap_PARTIAL_RESULTS">
            <summary> Returned by some Ldap servers to Ldapv2 clients to indicate that a referral
            has been returned in the error string.
            
            Ldap_PARTIAL_RESULTS = 9
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapException.REFERRAL">
            <summary> Does not indicate an error condition. In Ldapv3, indicates that the server
            does not hold the target entry of the request, but that the servers in the
            referral field may.
            
            REFERRAL = 10
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapException.ADMIN_LIMIT_EXCEEDED">
            <summary> Indicates that an Ldap server limit set by an administrative authority
            has been exceeded.
            
            ADMIN_LIMIT_EXCEEDED = 11
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapException.UNAVAILABLE_CRITICAL_EXTENSION">
            <summary> Indicates that the Ldap server was unable to satisfy a request because
            one or more critical extensions were not available.
            
            Either the server does not support the control or the control is not
            appropriate for the operation type.
            
            UNAVAILABLE_CRITICAL_EXTENSION = 12
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapException.CONFIDENTIALITY_REQUIRED">
            <summary> Indicates that the session is not protected by a protocol such as
            Transport Layer Security (TLS), which provides session confidentiality.
            
            CONFIDENTIALITY_REQUIRED = 13
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapException.SASL_BIND_IN_PROGRESS">
            <summary> Does not indicate an error condition, but indicates that the server is
            ready for the next step in the process. The client must send the server
            the same SASL mechanism to continue the process.
            
            SASL_BIND_IN_PROGRESS = 14
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapException.NO_SUCH_ATTRIBUTE">
            <summary> Indicates that the attribute specified in the modify or compare
            operation does not exist in the entry.
            
            NO_SUCH_ATTRIBUTE = 16
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapException.UNDEFINED_ATTRIBUTE_TYPE">
            <summary> Indicates that the attribute specified in the modify or add operation
            does not exist in the Ldap server's schema.
            
            UNDEFINED_ATTRIBUTE_TYPE = 17
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapException.INAPPROPRIATE_MATCHING">
            <summary> Indicates that the matching rule specified in the search filter does
            not match a rule defined for the attribute's syntax.
            
            INAPPROPRIATE_MATCHING = 18
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapException.CONSTRAINT_VIOLATION">
            <summary> Indicates that the attribute value specified in a modify, add, or
            modify DN operation violates constraints placed on the attribute. The
            constraint can be one of size or content (for example, string only,
            no binary data).
            
            CONSTRAINT_VIOLATION = 19
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapException.ATTRIBUTE_OR_VALUE_EXISTS">
            <summary> Indicates that the attribute value specified in a modify or add
            operation already exists as a value for that attribute.
            
            ATTRIBUTE_OR_VALUE_EXISTS = 20
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapException.INVALID_ATTRIBUTE_SYNTAX">
            <summary> Indicates that the attribute value specified in an add, compare, or
            modify operation is an unrecognized or invalid syntax for the attribute.
            
            INVALID_ATTRIBUTE_SYNTAX = 21
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapException.NO_SUCH_OBJECT">
            <summary> Indicates the target object cannot be found.
            
            This code is not returned on the following operations:
            <ul>
            <li>Search operations that find the search base but cannot find any
            entries that match the search filter.</li>
            <li>Bind operations.</li>
            </ul>
            NO_SUCH_OBJECT = 32
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapException.ALIAS_PROBLEM">
            <summary> Indicates that an error occurred when an alias was dereferenced.
            
            ALIAS_PROBLEM = 33
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapException.INVALID_DN_SYNTAX">
            <summary> Indicates that the syntax of the DN is incorrect.
            
            If the DN syntax is correct, but the Ldap server's structure
            rules do not permit the operation, the server returns
            Ldap_UNWILLING_TO_PERFORM. 
            
            INVALID_DN_SYNTAX = 34
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapException.IS_LEAF">
            <summary> Indicates that the specified operation cannot be performed on a
            leaf entry.
            
            This code is not currently in the Ldap specifications, but is
            reserved for this constant.
            
            IS_LEAF = 35
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapException.ALIAS_DEREFERENCING_PROBLEM">
            <summary> Indicates that during a search operation, either the client does not
            have access rights to read the aliased object's name or dereferencing
            is not allowed.
            
            ALIAS_DEREFERENCING_PROBLEM = 36
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapException.INAPPROPRIATE_AUTHENTICATION">
            <summary> Indicates that during a bind operation, the client is attempting to use
            an authentication method that the client cannot use correctly.
            
             For example, either of the following cause this error:
            <ul>
            <li>The client returns simple credentials when strong credentials are
            required.</li>
            <li>The client returns a DN and a password for a simple bind when the
            entry does not have a password defined.</li>
            </ul>
            INAPPROPRIATE_AUTHENTICATION = 48
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapException.INVALID_CREDENTIALS">
            <summary> Indicates that invalid information was passed during a bind operation.
            
            One of the following occurred:
            <ul>
            <li> The client passed either an incorrect DN or password.</li>
            <li> The password is incorrect because it has expired, intruder detection
            has locked the account, or some other similar reason.</li>
            </ul>
            INVALID_CREDENTIALS = 49
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapException.INSUFFICIENT_ACCESS_RIGHTS">
            <summary> Indicates that the caller does not have sufficient rights to perform
            the requested operation.
            
            INSUFFICIENT_ACCESS_RIGHTS = 50
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapException.BUSY">
            <summary> Indicates that the Ldap server is too busy to process the client request
            at this time, but if the client waits and resubmits the request, the
            server may be able to process it then.
            
            BUSY = 51
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapException.UNAVAILABLE">
            <summary> Indicates that the Ldap server cannot process the client's bind
            request, usually because it is shutting down.
            
            UNAVAILABLE = 52
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapException.UNWILLING_TO_PERFORM">
            <summary> Indicates that the Ldap server cannot process the request because of
            server-defined restrictions.
            
            This error is returned for the following reasons:
            <ul>
            <li>The add entry request violates the server's structure rules.</li>
            <li>The modify attribute request specifies attributes that users
            cannot modify.</li>
            </ul>
            UNWILLING_TO_PERFORM = 53
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapException.LOOP_DETECT">
            <summary> Indicates that the client discovered an alias or referral loop,
            and is thus unable to complete this request.
            
            LOOP_DETECT = 54
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapException.NAMING_VIOLATION">
             <summary> Indicates that the add or modify DN operation violates the schema's
             structure rules.
             
             For example,
             <ul>
             <li>The request places the entry subordinate to an alias.</li>
             <li>The request places the entry subordinate to a container that
             is forbidden by the containment rules.</li>
             <li>The RDN for the entry uses a forbidden attribute type.</li>
            </ul> 
             NAMING_VIOLATION = 64
             </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapException.OBJECT_CLASS_VIOLATION">
            <summary> Indicates that the add, modify, or modify DN operation violates the
            object class rules for the entry.
            
            For example, the following types of request return this error:
            <ul>
            <li>The add or modify operation tries to add an entry without a value
            for a required attribute.</li>
            <li>The add or modify operation tries to add an entry with a value for
            an attribute which the class definition does not contain.</li>
            <li>The modify operation tries to remove a required attribute without
            removing the auxiliary class that defines the attribute as required.</li>
            </ul>
            OBJECT_CLASS_VIOLATION = 65
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapException.NOT_ALLOWED_ON_NONLEAF">
            <summary> Indicates that the requested operation is permitted only on leaf entries.
            
            For example, the following types of requests return this error:
            <ul>
            <li>The client requests a delete operation on a parent entry.</li>
            <li> The client request a modify DN operation on a parent entry.</li>
            </ul>
            NOT_ALLOWED_ON_NONLEAF = 66
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapException.NOT_ALLOWED_ON_RDN">
            <summary> Indicates that the modify operation attempted to remove an attribute
            value that forms the entry's relative distinguished name.
            
            NOT_ALLOWED_ON_RDN = 67
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapException.ENTRY_ALREADY_EXISTS">
            <summary> Indicates that the add operation attempted to add an entry that already
            exists, or that the modify operation attempted to rename an entry to the
            name of an entry that already exists.
            
            ENTRY_ALREADY_EXISTS = 68
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapException.OBJECT_CLASS_MODS_PROHIBITED">
            <summary> Indicates that the modify operation attempted to modify the structure
            rules of an object class.
            
            OBJECT_CLASS_MODS_PROHIBITED = 69
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapException.AFFECTS_MULTIPLE_DSAS">
            <summary> Indicates that the modify DN operation moves the entry from one Ldap
            server to another and thus requires more than one Ldap server.
            
            AFFECTS_MULTIPLE_DSAS = 71
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapException.OTHER">
            <summary> Indicates an unknown error condition.
            
            OTHER = 80
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapException.SERVER_DOWN">
            <summary> Indicates that the Ldap libraries cannot establish an initial connection
            with the Ldap server. Either the Ldap server is down or the specified
            host name or port number is incorrect.
            
            SERVER_DOWN = 81
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapException.LOCAL_ERROR">
            <summary> Indicates that the Ldap client has an error. This is usually a failed
            dynamic memory allocation error.
            
            LOCAL_ERROR = 82
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapException.ENCODING_ERROR">
            <summary> Indicates that the Ldap client encountered errors when encoding an
            Ldap request intended for the Ldap server.
            
            ENCODING_ERROR = 83
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapException.DECODING_ERROR">
            <summary> Indicates that the Ldap client encountered errors when decoding an
            Ldap response from the Ldap server.
            
            DECODING_ERROR = 84
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapException.Ldap_TIMEOUT">
            <summary> Indicates that the time limit of the Ldap client was exceeded while
            waiting for a result.
            
            Ldap_TIMEOUT = 85
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapException.AUTH_UNKNOWN">
            <summary> Indicates that a bind method was called with an unknown
            authentication method.
            
            AUTH_UNKNOWN = 86
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapException.FILTER_ERROR">
            <summary> Indicates that the search method was called with an invalid
            search filter.
            
            FILTER_ERROR = 87
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapException.USER_CANCELLED">
            <summary> Indicates that the user cancelled the Ldap operation.
            
            USER_CANCELLED = 88
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapException.NO_MEMORY">
            <summary> Indicates that a dynamic memory allocation method failed when calling
            an Ldap method.
            
            NO_MEMORY = 90
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapException.CONNECT_ERROR">
            <summary> Indicates that the Ldap client has lost either its connection or
            cannot establish a connection to the Ldap server.
            
            CONNECT_ERROR = 91
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapException.Ldap_NOT_SUPPORTED">
            <summary> Indicates that the requested functionality is not supported by the
            client. For example, if the Ldap client is established as an Ldapv2
            client, the libraries set this error code when the client requests
            Ldapv3 functionality.
            
            Ldap_NOT_SUPPORTED = 92
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapException.CONTROL_NOT_FOUND">
            <summary> Indicates that the client requested a control that the libraries
            cannot find in the list of supported controls sent by the Ldap server.
            
            CONTROL_NOT_FOUND = 93
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapException.NO_RESULTS_RETURNED">
            <summary> Indicates that the Ldap server sent no results.
            
            NO_RESULTS_RETURNED = 94
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapException.MORE_RESULTS_TO_RETURN">
            <summary> Indicates that more results are chained in the result message.
            
            MORE_RESULTS_TO_RETURN = 95
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapException.CLIENT_LOOP">
            <summary> Indicates the Ldap libraries detected a loop. Usually this happens
            when following referrals.
            
            CLIENT_LOOP = 96
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapException.REFERRAL_LIMIT_EXCEEDED">
            <summary> Indicates that the referral exceeds the hop limit. The default hop
            limit is ten.
            
            The hop limit determines how many servers the client can hop through
            to retrieve data. For example, suppose the following conditions:
            <ul>
            <li>Suppose the hop limit is two.</li>
            <li> If the referral is to server D which can be contacted only through
            server B (1 hop) which contacts server C (2 hops) which contacts
            server D (3 hops).</li>
            </ul>
             With these conditions, the hop limit is exceeded and the Ldap
            libraries set this code.
            
            REFERRAL_LIMIT_EXCEEDED = 97
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapException.INVALID_RESPONSE">
            <summary> Indicates that the server response to a request is invalid.
            
            INVALID_RESPONSE = 100
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapException.AMBIGUOUS_RESPONSE">
            <summary> Indicates that the server response to a request is ambiguous.
            
            AMBIGUOUS_RESPONSE = 101
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapException.TLS_NOT_SUPPORTED">
            <summary> Indicates that TLS is not supported on the server.
            
            TLS_NOT_SUPPORTED = 112
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapException.SSL_HANDSHAKE_FAILED">
             <summary> Indicates that SSL Handshake could not succeed.
            
             SSL_HANDSHAKE_FAILED = 113
             </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapException.SSL_PROVIDER_NOT_FOUND">
             <summary> Indicates that SSL Provider could not be found.
            
             SSL_PROVIDER_NOT_FOUND = 114
             </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapException.#ctor">
            <summary> Constructs a default exception with no specific error information.</summary>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapException.#ctor(System.String,System.Int32,System.String)">
            <summary> Constructs an exception with a detailed message obtained from the
            specified <code>MessageOrKey</code> String, the result code,
            and a server meessage.
            
            The String is used either as a message key to obtain a localized
            messsage from ExceptionMessages, or if there is no key in the
            resource matching the text, it is used as the detailed message itself.
            
            </summary>
            <param name="messageOrKey"> Key to addition result information, a key into
            ExceptionMessages, or the information
            itself if the key doesn't exist.
            
            </param>
            <param name="resultCode">   The result code returned.
            
            </param>
            <param name="serverMsg">    Error message specifying additional information
            from the server
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapException.#ctor(System.String,System.Object[],System.Int32,System.String)">
            <summary> Constructs an exception with a detailed message obtained from the
            specified <code>MessageOrKey</code> String and modifying arguments.
            Additional parameters specify the result code and server message.
            
            The String is used either as a message key to obtain a localized
            messsage from ExceptionMessages, or if there is no key in the
            resource matching the text, it is used as the detailed message itself.
            
            The message in the default locale is built with the supplied arguments,
            which are saved to be used for building messages for other locales.
            
            </summary>
            <param name="messageOrKey"> Key to addition result information, a key into
            ExceptionMessages, or the information
            itself if the key doesn't exist.
            
            </param>
            <param name="arguments">   The modifying arguments to be included in the
            message string.
            
            </param>
            <param name="serverMsg">    Error message specifying additional information
            from the server
            
            </param>
            <param name="resultCode">   The result code returned.
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapException.#ctor(System.String,System.Int32,System.String,System.Exception)">
            <summary> Constructs an exception with a detailed message obtained from the
            specified <code>MessageOrKey</code> String.
            Additional parameters specify the result code, the server message, and a
            rootException which is the underlying cause of an error on the client.
            
            The String is used either as a message key to obtain a localized
            messsage from ExceptionMessages, or if there is no key in the
            resource matching the text, it is used as the detailed message itself.
            
            </summary>
            <param name="messageOrKey"> Key to addition result information, a key into
            ExceptionMessages, or the information
            itself if the key doesn't exist.
            
            </param>
            <param name="resultCode">   The result code returned.
            
            </param>
            <param name="serverMsg">    Error message specifying additional information
            from the server
            
            </param>
            <param name="rootException"> A throwable which is the underlying cause
            of the LdapException.
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapException.#ctor(System.String,System.Object[],System.Int32,System.String,System.Exception)">
            <summary> Constructs an exception with a detailed message obtained from the
            specified <code>MessageOrKey</code> String and modifying arguments.
            Additional parameters specify the result code, the server message,
            and a rootException which is the underlying cause of an error
            on the client.
            
            The String is used either as a message key to obtain a localized
            messsage from ExceptionMessages, or if there is no key in the
            resource matching the text, it is used as the detailed message itself.
            
            The message in the default locale is built with the supplied arguments,
            which are saved to be used for building messages for other locales.
            
            </summary>
            <param name="messageOrKey"> Key to addition result information, a key into
            ExceptionMessages, or the information
            itself if the key doesn't exist.
            
            </param>
            <param name="arguments">   The modifying arguments to be included in the
            message string.
            
            </param>
            <param name="resultCode">   The result code returned.
            
            </param>
            <param name="serverMsg">    Error message specifying additional information
            from the server
            
            </param>
            <param name="rootException"> A throwable which is the underlying cause
            of the LdapException.
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapException.#ctor(System.String,System.Int32,System.String,System.String)">
            <summary> Constructs an exception with a detailed message obtained from the
            specified <code>MessageOrKey</code> String.
            Additional parameters specify the result code, the message returned
            from the server, and a matchedDN returned from the server.
            
            The String is used either as a message key to obtain a localized
            messsage from ExceptionMessages, or if there is no key in the
            resource matching the text, it is used as the detailed message itself.
            
            </summary>
            <param name="messageOrKey"> Key to addition result information, a key into
            ExceptionMessages, or the information
            itself if the key doesn't exist.
            
            </param>
            <param name="resultCode">   The result code returned.
            
            </param>
            <param name="serverMsg">    Error message specifying additional information
            from the server
            
            </param>
            <param name="matchedDN">     The maximal subset of a specified DN which could
            be matched by the server on a search operation.
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapException.#ctor(System.String,System.Object[],System.Int32,System.String,System.String)">
            <summary> Constructs an exception with a detailed message obtained from the
            specified <code>MessageOrKey</code> String and modifying arguments.
            Additional parameters specify the result code, a message returned from
            the server, and a matchedDN returned from the server.
            
            The String is used either as a message key to obtain a localized
            messsage from ExceptionMessages, or if there is no key in the
            resource matching the text, it is used as the detailed message itself.
            
            The message in the default locale is built with the supplied arguments,
            which are saved to be used for building messages for other locales.
            
            </summary>
            <param name="messageOrKey"> Key to addition result information, a key into
            ExceptionMessages, or the information
            itself if the key doesn't exist.
            
            </param>
            <param name="arguments">   The modifying arguments to be included in the
            message string.
            
            </param>
            <param name="resultCode">   The result code returned.
            
            </param>
            <param name="serverMsg">    Error message specifying additional information
            from the server
            
            </param>
            <param name="matchedDN">     The maximal subset of a specified DN which could
            be matched by the server on a search operation.
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapException.#ctor(System.String,System.Object[],System.Int32,System.String,System.String,System.Exception)">
            <summary> Constructs an exception with a detailed message obtained from the
            specified <code>MessageOrKey</code> String and modifying arguments.
            Additional parameters specify the result code, a message returned
            from the server, a matchedDN returned from
            the server, and a rootException which is the underlying cause of an error
            on the client.
            
            The String is used either as a message key to obtain a localized
            messsage from ExceptionMessages, or if there is no key in the
            resource matching the text, it is used as the detailed message itself.
            
            The message in the default locale is built with the supplied arguments,
            which are saved to be used for building messages for other locales.
            
            </summary>
            <param name="messageOrKey"> Key to addition result information, a key into
            ExceptionMessages, or the information
            itself if the key doesn't exist.
            
            </param>
            <param name="arguments">   The modifying arguments to be included in the
            message string.
            
            </param>
            <param name="resultCode">   The result code returned.
            
            </param>
            <param name="serverMsg">    Error message specifying additional information
            from the server
            
            </param>
            <param name="rootException"> A throwable which is the underlying cause
            of the LdapException.
            
            </param>
            <param name="matchedDN">     The maximal subset of a specified DN which could
            be matched by the server on a search operation.
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapException.resultCodeToString">
            <summary> Returns a string representing the result code in the default
            locale.
            
            </summary>
            <returns> The message for the result code in the LdapException object.
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapException.resultCodeToString(System.Int32)">
            <summary> Returns a string representing the specified result code in the default
            locale.
            
            </summary>
            <param name="code"> The result code for which a message is to be returned.
            
            </param>
            <returns> The message corresponding to the specified result code, or
            or null if the message is not available for the default locale.
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapException.resultCodeToString(System.Globalization.CultureInfo)">
            <summary> Returns a string representing the result code in the
            specified locale.
            
            </summary>
            <param name="locale">The locale in which to render the error message.
            
            </param>
            <returns> A message corresponding to the result code in the
            specified locale, or null if the message is not available
            for the requested locale.
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapException.resultCodeToString(System.Int32,System.Globalization.CultureInfo)">
            <summary> Returns a string representing the specified error code in the
            specified locale.
            
            </summary>
            <param name="code">    The result code for which a message is to be
            returned.
            
            </param>
            <param name="locale">  The locale in which to render the message.
            
            </param>
            <returns> A message corresponding to the result code in the
            specified locale, or null if the message is not available
            for the requested locale.
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapException.ToString">
            <summary> returns a string of information about the exception and the
            the nested exceptions, if any.
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapException.getExceptionString(System.String)">
            <summary> builds a string of information about the exception and the
            the nested exceptions, if any.
            
            </summary>
            <param name="exception">The name of the exception class
            </param>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapException.LdapErrorMessage">
            <summary> Returns the error message from the Ldap server, if this message is
            available (that is, if this message was set). If the message was not set,
            this method returns null.
            
            </summary>
            <returns> The error message or null if the message was not set.
            
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapException.Cause">
            <summary> Returns the lower level Exception which caused the failure, if any.
            For example, an IOException with additional information may be returned
            on a CONNECT_ERROR failure.
            </summary>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapException.ResultCode">
            <summary> Returns the result code from the exception.
            
            The codes are defined as <code>public final static int</code> members
            of the Ldap Exception class. If the exception is a
            result of error information returned from a directory operation, the
            code will be one of those defined for the class. Otherwise, a local error
            code is returned. 
            </summary>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapException.MatchedDN">
            <summary> Returns the part of a submitted distinguished name which could be
            matched by the server.
            
            If the exception was caused by a local error, such as no server
            available, the return value is null. If the exception resulted from
            an operation being executed on a server, the value is an empty string
            except when the result of the operation was one of the following:
            <ul>
            <li>NO_SUCH_OBJECT</li>
            <li>ALIAS_PROBLEM</li>
            <li>INVALID_DN_SYNTAX</li>
            <li>ALIAS_DEREFERENCING_PROBLEM</li>
            </ul>
            
            </summary>
            <returns> The part of a submitted distinguished name which could be
            matched by the server or null if the error is a local error.
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.InterThreadException.#ctor(System.String,System.Object[],System.Int32,System.Exception,Novell.Directory.Ldap.Message)">
            <summary> Constructs a InterThreadException with its associated message.
            
            </summary>
            <param name="message">       The text providign additional error information.
            
            </param>
            <param name="resultCode">    The error result code.
            
            </param>
            <param name="request">       The Message class associated with this exception.
            </param>
        </member>
        <member name="P:Novell.Directory.Ldap.InterThreadException.MessageID">
            <summary> Returns the message ID of this message request.
            
            </summary>
            <returns> the message ID.  Returns -1 if no message
            is associated with this exception.
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.InterThreadException.ReplyType">
            <summary> Returns the message type expected as a reply to
            the message associated with this message's request type.
            
            </summary>
            <returns> the message type of the expected reply.  Returns -1
            if no reply expected.
            </returns>
        </member>
        <member name="T:Novell.Directory.Ldap.LdapAbandonRequest">
            <summary> Represents an Ldap Abandon Request
            
            </summary>
            <seealso cref="M:Novell.Directory.Ldap.LdapConnection.SendRequest(Novell.Directory.Ldap.LdapMessage,Novell.Directory.Ldap.LdapMessageQueue)">
            </seealso> 
        </member>
        <member name="T:Novell.Directory.Ldap.LdapMessage">
            <summary> The base class for Ldap request and response messages.
            
            Subclassed by response messages used in asynchronous operations.
            
            
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapMessage.BIND_REQUEST">
            <summary> A bind request operation.
            
            BIND_REQUEST = 0
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapMessage.BIND_RESPONSE">
            <summary> A bind response operation.
            
            BIND_RESPONSE = 1
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapMessage.UNBIND_REQUEST">
            <summary> An unbind request operation.
            
            UNBIND_REQUEST = 2
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapMessage.SEARCH_REQUEST">
            <summary> A search request operation.
            
            SEARCH_REQUEST = 3
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapMessage.SEARCH_RESPONSE">
            <summary> A search response containing data.
            
            SEARCH_RESPONSE = 4
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapMessage.SEARCH_RESULT">
            <summary> A search result message - contains search status.
            
            SEARCH_RESULT = 5
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapMessage.MODIFY_REQUEST">
            <summary> A modify request operation.
            
            MODIFY_REQUEST = 6
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapMessage.MODIFY_RESPONSE">
            <summary> A modify response operation.
            
            MODIFY_RESPONSE = 7
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapMessage.ADD_REQUEST">
            <summary> An add request operation.
            
            ADD_REQUEST = 8
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapMessage.ADD_RESPONSE">
            <summary> An add response operation.
            
            ADD_RESONSE = 9
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapMessage.DEL_REQUEST">
            <summary> A delete request operation.
            
            DEL_REQUEST = 10
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapMessage.DEL_RESPONSE">
            <summary> A delete response operation.
            
            DEL_RESONSE = 11
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapMessage.MODIFY_RDN_REQUEST">
            <summary> A modify RDN request operation.
            
            MODIFY_RDN_REQUEST = 12
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapMessage.MODIFY_RDN_RESPONSE">
            <summary> A modify RDN response operation.
            
            MODIFY_RDN_RESPONSE = 13
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapMessage.COMPARE_REQUEST">
            <summary> A compare result operation.
            
            COMPARE_REQUEST = 14
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapMessage.COMPARE_RESPONSE">
            <summary> A compare response operation.
            
            COMPARE_RESPONSE = 15
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapMessage.ABANDON_REQUEST">
            <summary> An abandon request operation.
            
            ABANDON_REQUEST = 16
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapMessage.SEARCH_RESULT_REFERENCE">
            <summary> A search result reference operation.
            
            SEARCH_RESULT_REFERENCE = 19
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapMessage.EXTENDED_REQUEST">
            <summary> An extended request operation.
            
            EXTENDED_REQUEST = 23
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapMessage.EXTENDED_RESPONSE">
            <summary> An extended response operation.
            
            EXTENDED_RESONSE = 24
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapMessage.INTERMEDIATE_RESPONSE">
            <summary> An intermediate response operation.
            
            INTERMEDIATE_RESONSE = 25
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapMessage.message">
            <summary> A request or response message for an asynchronous Ldap operation.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapMessage.imsgNum">
            <summary> Counters used to construct request message #'s, unique for each request
            Will be enabled after ASN.1 conversion
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapMessage.#ctor">
            <summary> Dummy constuctor</summary>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapMessage.#ctor(System.Int32,Novell.Directory.Ldap.Rfc2251.RfcRequest,Novell.Directory.Ldap.LdapControl[])">
            <summary> Creates an LdapMessage when sending a protocol operation and sends
            some optional controls with the message.
            
            </summary>
            <param name="op">The operation type of message.
            
            </param>
            <param name="controls">The controls to use with the operation.
            
            </param>
            <seealso cref="P:Novell.Directory.Ldap.LdapMessage.Type">
            </seealso>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapMessage.#ctor(Novell.Directory.Ldap.Rfc2251.RfcLdapMessage)">
            <summary> Creates an Rfc 2251 LdapMessage when the libraries receive a response
            from a command.
            
            </summary>
            <param name="message">A response message.
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapMessage.Clone(System.String,System.String,System.Boolean)">
            <summary> Returns a mutated clone of this LdapMessage,
            replacing base dn, filter.
            
            </summary>
            <param name="dn">the base dn
            
            </param>
            <param name="filter">the filter
            
            </param>
            <param name="reference">true if a search reference
            
            </param>
            <returns> the object representing the new message
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapMessage.controlFactory(System.String,System.Boolean,System.SByte[])">
            <summary> Instantiates an LdapControl.  We search through our list of
            registered controls.  If we find a matchiing OID we instantiate
            that control by calling its contructor.  Otherwise we default to
            returning a regular LdapControl object
            
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapMessage.ToString">
            <summary> Creates a String representation of this object
            
            </summary>
            <returns> a String representation for this LdapMessage
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapMessage.RequestingMessage">
            <summary> Returns the LdapMessage request associated with this response</summary>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapMessage.Controls">
            <summary> Returns any controls in the message.</summary>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapMessage.MessageID">
            <summary> Returns the message ID.  The message ID is an integer value
            identifying the Ldap request and its response.
            </summary>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapMessage.Type">
            <summary> Returns the Ldap operation type of the message.
            
            The type is one of the following:
            <ul>
            <li>BIND_REQUEST            = 0;</li>
            <li>BIND_RESPONSE           = 1;</li>
            <li>UNBIND_REQUEST          = 2;</li>
            <li>SEARCH_REQUEST          = 3;</li>
            <li>SEARCH_RESPONSE         = 4;</li>
            <li>SEARCH_RESULT           = 5;</li>
            <li>MODIFY_REQUEST          = 6;</li>
            <li>MODIFY_RESPONSE         = 7;</li>
            <li>ADD_REQUEST             = 8;</li>
            <li>ADD_RESPONSE            = 9;</li>
            <li>DEL_REQUEST             = 10;</li>
            <li>DEL_RESPONSE            = 11;</li>
            <li>MODIFY_RDN_REQUEST      = 12;</li>
            <li>MODIFY_RDN_RESPONSE     = 13;</li>
            <li>COMPARE_REQUEST         = 14;</li>
            <li>COMPARE_RESPONSE        = 15;</li>
            <li>ABANDON_REQUEST         = 16;</li>
            <li>SEARCH_RESULT_REFERENCE = 19;</li>
            <li>EXTENDED_REQUEST        = 23;</li>
            <li>EXTENDED_RESPONSE       = 24;</li>
            <li>INTERMEDIATE_RESPONSE   = 25;</li>
            </ul>
            
            </summary>
            <returns> The operation type of the message.
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapMessage.Request">
            <summary> Indicates whether the message is a request or a response
            
            </summary>
            <returns> true if the message is a request, false if it is a response,
            a search result, or a search result reference.
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapMessage.Asn1Object">
            <summary> Returns the RFC 2251 LdapMessage composed in this object.</summary>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapMessage.Tag">
            <summary> Retrieves the identifier tag for this message.
            
            An identifier can be associated with a message with the
            <code>setTag</code> method.
            Tags are set by the application and not by the API or the server.
            If a server response <code>isRequest() == false</code> has no tag,
            the tag associated with the corresponding server request is used.
            
            </summary>
            <returns> the identifier associated with this message or <code>null</code>
            if none.
            
            </returns>
            <summary> Sets a string identifier tag for this message.
            
            This method allows an API to set a tag and later identify messages
            by retrieving the tag associated with the message.
            Tags are set by the application and not by the API or the server.
            Message tags are not included with any message sent to or received
            from the server.
            
            Tags set on a request to the server
            are automatically associated with the response messages when they are
            received by the API and transferred to the application.
            The application can explicitly set a different value in a
            response message.
            
            To set a value in a server request, for example an
            {@link LdapSearchRequest}, you must create the object,
            set the tag, and use the
            {@link LdapConnection.SendRequest LdapConnection.sendRequest()}
            method to send it to the server.
            
            </summary>
            <param name="stringTag"> the String assigned to identify this message.
            
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapAbandonRequest.#ctor(System.Int32,Novell.Directory.Ldap.LdapControl[])">
            <summary> Construct an Ldap Abandon Request.
            
            </summary>
            <param name="id">The ID of the operation to abandon.
            
            </param>
            <param name="cont">Any controls that apply to the abandon request
            or null if none.
            </param>
        </member>
        <member name="T:Novell.Directory.Ldap.LdapAddRequest">
            <summary> Represents an Ldap Add Request.
            
            </summary>
            <seealso cref="M:Novell.Directory.Ldap.LdapConnection.SendRequest(Novell.Directory.Ldap.LdapMessage,Novell.Directory.Ldap.LdapMessageQueue)">
            </seealso>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapAddRequest.#ctor(Novell.Directory.Ldap.LdapEntry,Novell.Directory.Ldap.LdapControl[])">
            <summary> Constructs a request to add an entry to the directory.
            
            </summary>
            <param name="entry">The LdapEntry to add to the directory.
            
            </param>
            <param name="cont">Any controls that apply to the add request,
            or null if none.
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapAddRequest.makeRfcAttrList(Novell.Directory.Ldap.LdapEntry)">
            <summary> Build the attribuite list from an LdapEntry.
            
            </summary>
            <param name="entry">The LdapEntry associated with this add request.
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapAddRequest.ToString">
            <summary> Return an Asn1 representation of this add request.
            
            #return an Asn1 representation of this object.
            </summary>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapAddRequest.Entry">
            <summary> Constructs an LdapEntry that represents the add request
            
            </summary>
            <returns> an LdapEntry that represents the add request.
            </returns>
        </member>
        <member name="T:Novell.Directory.Ldap.LdapAttribute">
            <summary> The name and values of one attribute of a directory entry.
            
            LdapAttribute objects are used when searching for, adding,
            modifying, and deleting attributes from the directory.
            LdapAttributes are often used in conjunction with an
            {@link LdapAttributeSet} when retrieving or adding multiple
            attributes to an entry.
            
            
            
            </summary>
            <seealso cref="T:Novell.Directory.Ldap.LdapEntry">
            </seealso>
            <seealso cref="T:Novell.Directory.Ldap.LdapAttributeSet">
            </seealso>
            <seealso cref="T:Novell.Directory.Ldap.LdapModification">
            </seealso>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapAttribute.#ctor(Novell.Directory.Ldap.LdapAttribute)">
            <summary> Constructs an attribute with copies of all values of the input
            attribute.
            
            </summary>
            <param name="attr"> An LdapAttribute to use as a template.
            
            @throws IllegalArgumentException if attr is null
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapAttribute.#ctor(System.String)">
            <summary> Constructs an attribute with no values.
            
            </summary>
            <param name="attrName">Name of the attribute.
            
            @throws IllegalArgumentException if attrName is null
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapAttribute.#ctor(System.String,System.SByte[])">
            <summary> Constructs an attribute with a byte-formatted value.
            
            </summary>
            <param name="attrName">Name of the attribute.
            </param>
            <param name="attrBytes">Value of the attribute as raw bytes.
            
             Note: If attrBytes represents a string it should be UTF-8 encoded.
            
            @throws IllegalArgumentException if attrName or attrBytes is null
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapAttribute.#ctor(System.String,System.String)">
            <summary> Constructs an attribute with a single string value.
            
            </summary>
            <param name="attrName">Name of the attribute.
            </param>
            <param name="attrString">Value of the attribute as a string.
            
            @throws IllegalArgumentException if attrName or attrString is null
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapAttribute.#ctor(System.String,System.String[])">
            <summary> Constructs an attribute with an array of string values.
            
            </summary>
            <param name="attrName">Name of the attribute.
            </param>
            <param name="attrStrings">Array of values as strings.
            
            @throws IllegalArgumentException if attrName, attrStrings, or a member
            of attrStrings is null
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapAttribute.Clone">
            <summary> Returns a clone of this LdapAttribute.
            
            </summary>
            <returns> clone of this LdapAttribute.
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapAttribute.addValue(System.String)">
            <summary> Adds a string value to the attribute.
            
            </summary>
            <param name="attrString">Value of the attribute as a String.
            
            @throws IllegalArgumentException if attrString is null
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapAttribute.addValue(System.SByte[])">
            <summary> Adds a byte-formatted value to the attribute.
            
            </summary>
            <param name="attrBytes">Value of the attribute as raw bytes.
            
             Note: If attrBytes represents a string it should be UTF-8 encoded.
            
            @throws IllegalArgumentException if attrBytes is null
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapAttribute.addBase64Value(System.String)">
            <summary> Adds a base64 encoded value to the attribute.
            The value will be decoded and stored as bytes.  String
            data encoded as a base64 value must be UTF-8 characters.
            
            </summary>
            <param name="attrString">The base64 value of the attribute as a String.
            
            @throws IllegalArgumentException if attrString is null
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapAttribute.addBase64Value(System.Text.StringBuilder,System.Int32,System.Int32)">
            <summary> Adds a base64 encoded value to the attribute.
            The value will be decoded and stored as bytes.  Character
            data encoded as a base64 value must be UTF-8 characters.
            
            </summary>
            <param name="attrString">The base64 value of the attribute as a StringBuffer.
            </param>
            <param name="start"> The start index of base64 encoded part, inclusive.
            </param>
            <param name="end"> The end index of base encoded part, exclusive.
            
            @throws IllegalArgumentException if attrString is null
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapAttribute.addBase64Value(System.Char[])">
            <summary> Adds a base64 encoded value to the attribute.
            The value will be decoded and stored as bytes.  Character
            data encoded as a base64 value must be UTF-8 characters.
            
            </summary>
            <param name="attrChars">The base64 value of the attribute as an array of
            characters.
            
            @throws IllegalArgumentException if attrString is null
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapAttribute.addURLValue(System.String)">
            <summary> Adds a URL, indicating a file or other resource that contains
            the value of the attribute.
            
            </summary>
            <param name="url">String value of a URL pointing to the resource containing
            the value of the attribute.
            
            @throws IllegalArgumentException if url is null
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapAttribute.addURLValue(System.Uri)">
            <summary> Adds a URL, indicating a file or other resource that contains
            the value of the attribute.
            
            </summary>
            <param name="url">A URL class pointing to the resource containing the value
            of the attribute.
            
            @throws IllegalArgumentException if url is null
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapAttribute.getBaseName">
            <summary> Returns the base name of the attribute.
            
            For example, if the attribute name is cn;lang-ja;phonetic,
            this method returns cn.
            
            </summary>
            <returns> The base name of the attribute.
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapAttribute.getBaseName(System.String)">
            <summary> Returns the base name of the specified attribute name.
            
            For example, if the attribute name is cn;lang-ja;phonetic,
            this method returns cn.
            
            </summary>
            <param name="attrName">Name of the attribute from which to extract the
            base name.
            
            </param>
            <returns> The base name of the attribute.
            
            @throws IllegalArgumentException if attrName is null
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapAttribute.getSubtypes">
            <summary> Extracts the subtypes from the attribute name.
            
            For example, if the attribute name is cn;lang-ja;phonetic,
            this method returns an array containing lang-ja and phonetic.
            
            </summary>
            <returns> An array subtypes or null if the attribute has none.
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapAttribute.getSubtypes(System.String)">
            <summary> Extracts the subtypes from the specified attribute name.
            
            For example, if the attribute name is cn;lang-ja;phonetic,
            this method returns an array containing lang-ja and phonetic.
            
            </summary>
            <param name="attrName">  Name of the attribute from which to extract
            the subtypes.
            
            </param>
            <returns> An array subtypes or null if the attribute has none.
            
            @throws IllegalArgumentException if attrName is null
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapAttribute.hasSubtype(System.String)">
            <summary> Reports if the attribute name contains the specified subtype.
            
            For example, if you check for the subtype lang-en and the
            attribute name is cn;lang-en, this method returns true.
            
            </summary>
            <param name="subtype"> The single subtype to check for.
            
            </param>
            <returns> True, if the attribute has the specified subtype;
            false, if it doesn't.
            
            @throws IllegalArgumentException if subtype is null
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapAttribute.hasSubtypes(System.String[])">
            <summary> Reports if the attribute name contains all the specified subtypes.
            
             For example, if you check for the subtypes lang-en and phonetic
            and if the attribute name is cn;lang-en;phonetic, this method
            returns true. If the attribute name is cn;phonetic or cn;lang-en,
            this method returns false.
            
            </summary>
            <param name="subtypes">  An array of subtypes to check for.
            
            </param>
            <returns> True, if the attribute has all the specified subtypes;
            false, if it doesn't have all the subtypes.
            
            @throws IllegalArgumentException if subtypes is null or if array member
            is null.
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapAttribute.removeValue(System.String)">
            <summary> Removes a string value from the attribute.
            
            </summary>
            <param name="attrString">  Value of the attribute as a string.
            
            Note: Removing a value which is not present in the attribute has
            no effect.
            
            @throws IllegalArgumentException if attrString is null
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapAttribute.removeValue(System.SByte[])">
            <summary> Removes a byte-formatted value from the attribute.
            
            </summary>
            <param name="attrBytes">   Value of the attribute as raw bytes.
             Note: If attrBytes represents a string it should be UTF-8 encoded.
            Example: <code>String.getBytes("UTF-8");</code>
            
            Note: Removing a value which is not present in the attribute has
            no effect.
            
            @throws IllegalArgumentException if attrBytes is null
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapAttribute.size">
            <summary> Returns the number of values in the attribute.
            
            </summary>
            <returns> The number of values in the attribute.
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapAttribute.CompareTo(System.Object)">
            <summary> Compares this object with the specified object for order.
            
             Ordering is determined by comparing attribute names (see
            {@link #getName() }) using the method compareTo() of the String class.
            
            
            </summary>
            <param name="attribute">  The LdapAttribute to be compared to this object.
            
            </param>
            <returns>            Returns a negative integer, zero, or a positive
            integer as this object is less than, equal to, or greater than the
            specified object.
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapAttribute.add(System.SByte[])">
            <summary> Adds an object to <code>this</code> object's list of attribute values
            
            </summary>
            <param name="bytes">  Ultimately all of this attribute's values are treated
            as binary data so we simplify the process by requiring
            that all data added to our list is in binary form.
            
             Note: If attrBytes represents a string it should be UTF-8 encoded.
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapAttribute.equals(System.SByte[],System.SByte[])">
            <summary> Returns true if the two specified arrays of bytes are equal to each
            another.  Matches the logic of Arrays.equals which is not available
            in jdk 1.1.x.
            
            </summary>
            <param name="e1">the first array to be tested
            </param>
            <param name="e2">the second array to be tested
            </param>
            <returns> true if the two arrays are equal
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapAttribute.ToString">
            <summary> Returns a string representation of this LdapAttribute
            
            </summary>
            <returns> a string representation of this LdapAttribute
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapAttribute.ByteValues">
            <summary> Returns an enumerator for the values of the attribute in byte format.
            
            </summary>
            <returns> The values of the attribute in byte format.
             Note: All string values will be UTF-8 encoded. To decode use the
            String constructor. Example: new String( byteArray, "UTF-8" );
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapAttribute.StringValues">
            <summary> Returns an enumerator for the string values of an attribute.
            
            </summary>
            <returns> The string values of an attribute.
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapAttribute.ByteValueArray">
            <summary> Returns the values of the attribute as an array of bytes.
            
            </summary>
            <returns> The values as an array of bytes or an empty array if there are
            no values.
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapAttribute.StringValueArray">
            <summary> Returns the values of the attribute as an array of strings.
            
            </summary>
            <returns> The values as an array of strings or an empty array if there are
            no values
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapAttribute.StringValue">
            <summary> Returns the the first value of the attribute as a <code>String</code>.
            
            </summary>
            <returns>  The UTF-8 encoded<code>String</code> value of the attribute's
            value.  If the value wasn't a UTF-8 encoded <code>String</code>
            to begin with the value of the returned <code>String</code> is
            non deterministic.
            
            If <code>this</code> attribute has more than one value the
            first value is converted to a UTF-8 encoded <code>String</code>
            and returned. It should be noted, that the directory may
            return attribute values in any order, so that the first
            value may vary from one call to another.
            
            If the attribute has no values <code>null</code> is returned
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapAttribute.ByteValue">
            <summary> Returns the the first value of the attribute as a byte array.
            
            </summary>
            <returns>  The binary value of <code>this</code> attribute or
            <code>null</code> if <code>this</code> attribute doesn't have a value.
            
            If the attribute has no values <code>null</code> is returned
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapAttribute.LangSubtype">
            <summary> Returns the language subtype of the attribute, if any.
            
            For example, if the attribute name is cn;lang-ja;phonetic,
            this method returns the string, lang-ja.
            
            </summary>
            <returns> The language subtype of the attribute or null if the attribute
            has none.
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapAttribute.Name">
            <summary> Returns the name of the attribute.
            
            </summary>
            <returns> The name of the attribute.
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapAttribute.Value">
            <summary> Replaces all values with the specified value. This protected method is
            used by sub-classes of LdapSchemaElement because the value cannot be set
            with a contructor.
            </summary>
        </member>
        <member name="T:Novell.Directory.Ldap.LdapAttributeSchema">
            <summary> The definition of an attribute type in the schema.
            
            LdapAttributeSchema is used to discover an attribute's
            syntax, and add or delete an attribute definition.
            RFC 2252, "Lightweight Directory Access Protocol (v3):
            Attribute Syntax Definitions" contains a description
            of the information on the Ldap representation of schema.
            draft-sermerseim-nds-ldap-schema-02, "Ldap Schema for NDS"
            defines the schema descriptions and non-standard syntaxes
            used by Novell eDirectory.
            
            </summary>
            <seealso cref="T:Novell.Directory.Ldap.LdapSchema">
            </seealso>
        </member>
        <member name="T:Novell.Directory.Ldap.LdapSchemaElement">
            <summary>  The LdapSchemaElement class is the base class representing schema
            elements (definitions) in Ldap.
            
            An LdapSchemaElement is read-only, single-valued LdapAttribute.
            Therefore, it does not support the addValue and removeValue methods from
            LdapAttribute.  This class overrides those methods and throws
            <code>UnsupportedOperationException</code> if either of those methods are
            invoked by an application.
            
            </summary>
            <seealso cref="T:Novell.Directory.Ldap.LdapSchema">
            </seealso>
            <seealso cref="M:Novell.Directory.Ldap.LdapConnection.FetchSchema(System.String)">
            </seealso>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapSchemaElement.#ctor(System.String)">
            <summary> Creates an LdapSchemaElement by setting the name of the LdapAttribute.
            Because this is the only constructor, all extended classes are expected
            to call this constructor.  The value of the LdapAttribute must be set
            by the setValue method.
            </summary>
            <param name="attrName"> The attribute name of the schema definition. Valid
            names are one of the following:
            "attributeTypes", "objectClasses", "ldapSyntaxes",
            "nameForms", "dITContentRules", "dITStructureRules",
            "matchingRules", or "matchingRuleUse"
            </param>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapSchemaElement.names">
            <summary> The names of the schema element.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapSchemaElement.oid">
            <summary> The OID for the schema element.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapSchemaElement.description">
            <summary> The description for the schema element.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapSchemaElement.obsolete">
            <summary> If present, indicates that the element is obsolete, no longer in use in
            the directory.
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapSchemaElement.qualifier">
            <summary> A string array of optional, or vendor-specific, qualifiers for the
            schema element.
            
             These optional qualifiers begin with "X-"; the Novell eDirectory
            specific qualifiers begin with "X-NDS". 
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapSchemaElement.hashQualifier">
            <summary> A hash table that contains the vendor-specific qualifiers (for example,
            the X-NDS flags).
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapSchemaElement.getQualifier(System.String)">
            <summary> Returns an array of all values of a specified optional or non-
            standard qualifier of the element.
            
            The getQualifier method may be used to access the values of
            vendor-specific qualifiers (which begin with "X-").
            
            </summary>
            <param name="name">     The name of the qualifier, case-sensitive.
            
            </param>
            <returns> An array of values for the specified non-standard qualifier.
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapSchemaElement.ToString">
            <summary> Returns a string in a format suitable for directly adding to a directory,
            as a value of the particular schema element.
            
            </summary>
            <returns> A string that can be used to add the element to the directory.
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapSchemaElement.formatString">
            <summary> Implementations of formatString format a schema element into a string
            suitable for using in a modify (ADD) operation to the directory.
            toString uses this method.  This method is needed because a call to
            setQualifier requires reconstructing the string value of the schema
            element.
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapSchemaElement.setQualifier(System.String,System.String[])">
            <summary> Sets the values of a specified optional or non-standard qualifier of
            the element.
            
            The setQualifier method is used to set the values of vendor-
            specific qualifiers (which begin with "X-").
            
            </summary>
            <param name="name">          The name of the qualifier, case-sensitive.
            
            </param>
            <param name="values">        The values to set for the qualifier.
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapSchemaElement.addValue(System.String)">
            <summary>  LdapSchemaElement is read-only and this method is over-ridden to
            throw an exception.
            @throws UnsupportedOperationException always thrown since
            LdapSchemaElement is read-only
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapSchemaElement.addValue(System.Byte[])">
            <summary>  LdapSchemaElement is read-only and this method is over-ridden to
            throw an exception.
            @throws UnsupportedOperationException always thrown since
            LdapSchemaElement is read-only
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapSchemaElement.removeValue(System.String)">
            <summary>  LdapSchemaElement is read-only and this method is over-ridden to
            throw an exception.
            @throws UnsupportedOperationException always thrown since
            LdapSchemaElement is read-only
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapSchemaElement.removeValue(System.Byte[])">
            <summary>  LdapSchemaElement is read-only and this method is over-ridden to
            throw an exception.
            @throws UnsupportedOperationException always thrown since
            LdapSchemaElement is read-only
            </summary>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapSchemaElement.Names">
            <summary> Returns an array of names for the element, or null if
            none is found.
            
            The getNames method accesses the NAME qualifier (from the BNF
            descriptions of Ldap schema definitions). The array consists of all
            values of the NAME qualifier. 
            
            </summary>
            <returns> An array of names for the element, or null if none
            is found.
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapSchemaElement.Description">
            <summary> Returns the description of the element.
            
            The getDescription method returns the value of the DESC qualifier
            (from the BNF descriptions of Ldap schema definitions). 
            
            </summary>
            <returns> The description of the element.
            
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapSchemaElement.ID">
            <summary> Returns the unique object identifier (OID) of the element.
            
            </summary>
            <returns> The OID of the element.
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapSchemaElement.QualifierNames">
            <summary> Returns an enumeration of all qualifiers of the element which are
            vendor specific (begin with "X-").
            
            </summary>
            <returns> An enumeration of all qualifiers of the element.
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapSchemaElement.Obsolete">
            <summary> Returns whether the element has the OBSOLETE qualifier
            in its Ldap definition.
            
            </summary>
            <returns> True if the Ldap definition contains the OBSOLETE qualifier;
            false if OBSOLETE qualifier is not present.
            </returns>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapAttributeSchema.USER_APPLICATIONS">
            <summary> Indicates that the attribute usage is for ordinary application
            or user data.
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapAttributeSchema.DIRECTORY_OPERATION">
            <summary> Indicates that the attribute usage is for directory operations.
            Values are vendor specific.
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapAttributeSchema.DISTRIBUTED_OPERATION">
            <summary> Indicates that the attribute usage is for distributed operational
            attributes. These hold server (DSA) information that is shared among
            servers holding replicas of the entry.
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapAttributeSchema.DSA_OPERATION">
            <summary> Indicates that the attribute usage is for local operational attributes.
            These hold server (DSA) information that is local to a server.
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapAttributeSchema.#ctor(System.String[],System.String,System.String,System.String,System.Boolean,System.String,System.Boolean,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Int32)">
            <summary> Constructs an attribute definition for adding to or deleting from a
            directory's schema.
            
            </summary>
            <param name="names">Names of the attribute.
            
            </param>
            <param name="oid">  Object identifer of the attribute, in
            dotted numerical format.
            
            </param>
            <param name="description">  Optional description of the attribute.
            
            </param>
            <param name="syntaxString"> Object identifer of the syntax of the
            attribute, in dotted numerical format.
            
            </param>
            <param name="single">   True if the attribute is to be single-valued.
            
            </param>
            <param name="superior"> Optional name of the attribute type which this
            attribute type derives from; null if there is no
            superior attribute type.
            
            </param>
            <param name="obsolete"> True if the attribute is obsolete.
            
            </param>
            <param name="equality"> Optional matching rule name; null if there is not
            an equality matching rule for this attribute.
            
            </param>
            <param name="ordering">Optional matching rule name; null if there is not
            an ordering matching rule for this attribute.
            
            </param>
            <param name="substring">   Optional matching rule name; null if there is not
            a substring matching rule for this attribute.
            
            </param>
            <param name="collective">   True of this attribute is a collective attribute
            
            </param>
            <param name="isUserModifiable"> False if this attribute is a read-only attribute
            
            </param>
            <param name="usage">       Describes what the attribute is used for. Must be
            one of the following: USER_APPLICATIONS,
            DIRECTORY_OPERATION, DISTRIBUTED_OPERATION or
            DSA_OPERATION.
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapAttributeSchema.#ctor(System.String)">
            <summary> Constructs an attribute definition from the raw string value returned
            on a directory query for "attributetypes".
            
            </summary>
            <param name="raw">     The raw string value returned on a directory
            query for "attributetypes".
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapAttributeSchema.formatString">
            <summary> Returns a string in a format suitable for directly adding to a
            directory, as a value of the particular schema element attribute.
            
            </summary>
            <returns> A string representation of the attribute's definition.
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapAttributeSchema.SyntaxString">
            <summary> Returns the object identifer of the syntax of the attribute, in
            dotted numerical format.
            
            </summary>
            <returns> The object identifer of the attribute's syntax.
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapAttributeSchema.Superior">
            <summary> Returns the name of the attribute type which this attribute derives
            from, or null if there is no superior attribute.
            
            </summary>
            <returns> The attribute's superior attribute, or null if there is none.
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapAttributeSchema.SingleValued">
            <summary> Returns true if the attribute is single-valued.
            
            </summary>
            <returns> True if the attribute is single-valued; false if the attribute
            is multi-valued.
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapAttributeSchema.EqualityMatchingRule">
            <summary> Returns the matching rule for this attribute.
            
            </summary>
            <returns> The attribute's equality matching rule; null if it has no equality
            matching rule.
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapAttributeSchema.OrderingMatchingRule">
            <summary> Returns the ordering matching rule for this attribute.
            
            </summary>
            <returns> The attribute's ordering matching rule; null if it has no ordering
            matching rule.
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapAttributeSchema.SubstringMatchingRule">
            <summary> Returns the substring matching rule for this attribute.
            
            </summary>
            <returns> The attribute's substring matching rule; null if it has no substring
            matching rule.
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapAttributeSchema.Collective">
            <summary> Returns true if the attribute is a collective attribute.
            
            </summary>
            <returns> True if the attribute is a collective; false if the attribute
            is not a collective attribute.
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapAttributeSchema.UserModifiable">
            <summary> Returns false if the attribute is read-only.
            
            </summary>
            <returns> False if the attribute is read-only; true if the attribute
            is read-write.
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapAttributeSchema.Usage">
            <summary> Returns the usage of the attribute.
            
            </summary>
            <returns> One of the following values: USER_APPLICATIONS,
            DIRECTORY_OPERATION, DISTRIBUTED_OPERATION or
            DSA_OPERATION.
            </returns>
        </member>
        <member name="T:Novell.Directory.Ldap.LdapAttributeSet">
            <summary> 
            A set of {@link LdapAttribute} objects.
            
            An <code>LdapAttributeSet</code> is a collection of <code>LdapAttribute</code>
            classes as returned from an <code>LdapEntry</code> on a search or read
            operation. <code>LdapAttributeSet</code> may be also used to contruct an entry
            to be added to a directory.  If the <code>add()</code> or <code>addAll()</code>
            methods are called and one or more of the objects to be added is not
            an <code>LdapAttribute, ClassCastException</code> is thrown (as discussed in the
            documentation for <code>java.util.Collection</code>).
            
            
            </summary>
            <seealso cref="T:Novell.Directory.Ldap.LdapAttribute">
            </seealso>
            <seealso cref="T:Novell.Directory.Ldap.LdapEntry">
            </seealso>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapAttributeSet.map">
            <summary> This is the underlying data structure for this set.
            HashSet is similar to the functionality of this set.  The difference
            is we use the name of an attribute as keys in the Map and LdapAttributes
            as the values.  We also do not declare the map as transient, making the
            map serializable.
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapAttributeSet.#ctor">
            <summary> Constructs an empty set of attributes.</summary>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapAttributeSet.Clone">
            <summary> Returns a deep copy of this attribute set.
            
            </summary>
            <returns> A deep copy of this attribute set.
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapAttributeSet.getAttribute(System.String)">
            <summary> Returns the attribute matching the specified attrName.
            
            For example:
            <ul>
            <li><code>getAttribute("cn")</code>      returns only the "cn" attribute</li>
            <li><code>getAttribute("cn;lang-en")</code> returns only the "cn;lang-en"
            attribute.</li>
            </ul>
            In both cases, <code>null</code> is returned if there is no exact match to
            the specified attrName.
            
            Note: Novell eDirectory does not currently support language subtypes.
            It does support the "binary" subtype.
            
            </summary>
            <param name="attrName">  The name of an attribute to retrieve, with or without
            subtype specifications. For example, "cn", "cn;phonetic", and
            "cn;binary" are valid attribute names.
            
            </param>
            <returns> The attribute matching the specified attrName, or <code>null</code>
            if there is no exact match.
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapAttributeSet.getAttribute(System.String,System.String)">
            <summary> Returns a single best-match attribute, or <code>null</code> if no match is
            available in the entry.
            
            Ldap version 3 allows adding a subtype specification to an attribute
            name. For example, "cn;lang-ja" indicates a Japanese language
            subtype of the "cn" attribute and "cn;lang-ja-JP-kanji" may be a subtype
            of "cn;lang-ja". This feature may be used to provide multiple
            localizations in the same directory. For attributes which do not vary
            among localizations, only the base attribute may be stored, whereas
            for others there may be varying degrees of specialization.
            
            For example, <code>getAttribute(attrName,lang)</code> returns the
            <code>LdapAttribute</code> that exactly matches attrName and that
            best matches lang.
            
            If there are subtypes other than "lang" subtypes included
            in attrName, for example, "cn;binary", only attributes with all of
            those subtypes are returned. If lang is <code>null</code> or empty, the
            method behaves as getAttribute(attrName). If there are no matching
            attributes, <code>null</code> is returned. 
            
            
            Assume the entry contains only the following attributes:
            
            <ul>
            <li>cn;lang-en</li>
            <li>cn;lang-ja-JP-kanji</li>
            <li>sn</li>
            </ul>
            
            Examples:
            <ul>
            <li><code>getAttribute( "cn" )</code>       returns <code>null</code>.</li>
            <li><code>getAttribute( "sn" )</code>       returns the "sn" attribute.</li>
            <li><code>getAttribute( "cn", "lang-en-us" )</code>
            returns the "cn;lang-en" attribute.</li>
            <li><code>getAttribute( "cn", "lang-en" )</code>
            returns the "cn;lang-en" attribute.</li>
            <li><code>getAttribute( "cn", "lang-ja" )</code>
            returns <code>null</code>.</li>
            <li><code>getAttribute( "sn", "lang-en" )</code>
            returns the "sn" attribute.</li>
            </ul>
            
            Note: Novell eDirectory does not currently support language subtypes.
            It does support the "binary" subtype.
            
            </summary>
            <param name="attrName"> The name of an attribute to retrieve, with or without
            subtype specifications. For example, "cn", "cn;phonetic", and
            cn;binary" are valid attribute names.
            
            </param>
            <param name="lang">  A language specification with optional subtypes
            appended using "-" as separator. For example, "lang-en", "lang-en-us",
            "lang-ja", and "lang-ja-JP-kanji" are valid language specification.
            
            </param>
            <returns> A single best-match <code>LdapAttribute</code>, or <code>null</code>
            if no match is found in the entry.
            
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapAttributeSet.getSubset(System.String)">
            <summary> Creates a new attribute set containing only the attributes that have
            the specified subtypes.
            
            For example, suppose an attribute set contains the following
            attributes:
            
            <ul>
            <li>    cn</li>
            <li>    cn;lang-ja</li>
            <li>    sn;phonetic;lang-ja</li>
            <li>    sn;lang-us</li>
            </ul>
            
            Calling the <code>getSubset</code> method and passing lang-ja as the
            argument, the method returns an attribute set containing the following
            attributes:
            
            <ul>
            <li>cn;lang-ja</li>
            <li>sn;phonetic;lang-ja</li>
            </ul>
            
            </summary>
            <param name="subtype">   Semi-colon delimited list of subtypes to include. For
            example:
            <ul>
            <li> "lang-ja" specifies only Japanese language subtypes</li>
            <li> "binary" specifies only binary subtypes</li>
            <li> "binary;lang-ja" specifies only Japanese language subtypes
            which also are binary</li>
            </ul>
            
            Note: Novell eDirectory does not currently support language subtypes.
            It does support the "binary" subtype.
            
            </param>
            <returns> An attribute set containing the attributes that match the
            specified subtype.
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapAttributeSet.GetEnumerator">
            <summary> Returns an iterator over the attributes in this set.  The attributes
            returned from this iterator are not in any particular order.
            
            </summary>
            <returns> iterator over the attributes in this set
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapAttributeSet.IsEmpty">
            <summary> Returns <code>true</code> if this set contains no elements
            
            </summary>
            <returns> <code>true</code> if this set contains no elements
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapAttributeSet.Contains(System.Object)">
            <summary> Returns <code>true</code> if this set contains an attribute of the same name
            as the specified attribute.
            
            </summary>
            <param name="attr">  Object of type <code>LdapAttribute</code>
            
            </param>
            <returns> true if this set contains the specified attribute
            
            @throws ClassCastException occurs the specified Object
            is not of type LdapAttribute.
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapAttributeSet.Add(System.Object)">
            <summary> Adds the specified attribute to this set if it is not already present.
            If an attribute with the same name already exists in the set then the
            specified attribute will not be added.
            
            </summary>
            <param name="attr">  Object of type <code>LdapAttribute</code>
            
            </param>
            <returns> true if the attribute was added.
            
            @throws ClassCastException occurs the specified Object
            is not of type <code>LdapAttribute</code>.
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapAttributeSet.Remove(System.Object)">
            <summary> Removes the specified object from this set if it is present.
            
            If the specified object is of type <code>LdapAttribute</code>, the
            specified attribute will be removed.  If the specified object is of type
            <code>String</code>, the attribute with a name that matches the string will
            be removed.
            
            </summary>
            <param name="object">LdapAttribute to be removed or <code>String</code> naming
            the attribute to be removed.
            
            </param>
            <returns> true if the object was removed.
            
            @throws ClassCastException occurs the specified Object
            is not of type <code>LdapAttribute</code> or of type <code>String</code>.
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapAttributeSet.Clear">
            <summary> Removes all of the elements from this set.</summary>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapAttributeSet.AddAll(System.Collections.ICollection)">
            <summary> Adds all <code>LdapAttribute</code> objects in the specified collection to
            this collection.
            
            </summary>
            <param name="c"> Collection of <code>LdapAttribute</code> objects.
            
            @throws ClassCastException occurs when an element in the
            collection is not of type <code>LdapAttribute</code>.
            
            </param>
            <returns> true if this set changed as a result of the call.
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapAttributeSet.ToString">
            <summary> Returns a string representation of this LdapAttributeSet
            
            </summary>
            <returns> a string representation of this LdapAttributeSet
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapAttributeSet.Count">
            <summary> Returns the number of attributes in this set.
            
            </summary>
            <returns> number of attributes in this set.
            </returns>
        </member>
        <member name="T:Novell.Directory.Ldap.LdapAuthHandler">
            <summary> 
            Used to provide credentials for authentication when processing a
            referral.
            
            A programmer desiring to supply authentication credentials
            to the API when automatically following referrals MUST
            implement this interface. If LdapAuthHandler or LdapBindHandler are not
            implemented, automatically followed referrals will use anonymous
            authentication. Referral URLs of any type other than Ldap (i.e. a
            referral URL other than ldap://something) are not chased automatically
            by the API on automatic following.
            
            
            </summary>
            <seealso cref="T:Novell.Directory.Ldap.LdapBindHandler">
            </seealso>
            <seealso cref="P:Novell.Directory.Ldap.LdapConstraints.ReferralFollowing">
            </seealso>
        </member>
        <member name="T:Novell.Directory.Ldap.LdapReferralHandler">
            <summary> 
            Shared ancestor to the two types of referral objects - LdapBindHandler and
            LdapAuthHandler.
            
            </summary>
            <seealso cref="T:Novell.Directory.Ldap.LdapBindHandler">
            </seealso>
            <seealso cref="T:Novell.Directory.Ldap.LdapAuthHandler">
            
            </seealso>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapAuthHandler.getAuthProvider(System.String,System.Int32)">
            <summary> Returns an object which can provide credentials for authenticating to
            a server at the specified host and port.
            
            </summary>
            <param name="host">   Contains a host name or the IP address (in dotted string
            format) of a host running an Ldap server.
            
            </param>
            <param name="port">   Contains the TCP or UDP port number of the host.
            
            </param>
            <returns> An object with authentication credentials to the specified
            host and port.
            </returns>
        </member>
        <member name="T:Novell.Directory.Ldap.LdapAuthProvider">
            <summary>  An implementation of LdapAuthHandler must be able to provide an
            LdapAuthProvider object at the time of a referral.  The class
            encapsulates information that is used by the client for authentication
            when following referrals automatically.
            
            </summary>
            <seealso cref="T:Novell.Directory.Ldap.LdapAuthHandler">
            </seealso>
            <seealso cref="T:Novell.Directory.Ldap.LdapBindHandler">
            </seealso>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapAuthProvider.#ctor(System.String,System.SByte[])">
            <summary> Constructs information that is used by the client for authentication
            when following referrals automatically.
            
            </summary>
            <param name="dn">          The distinguished name to use when authenticating to
            a server.
            
            </param>
            <param name="password">    The password to use when authenticating to a server.
            </param>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapAuthProvider.DN">
            <summary> Returns the distinguished name to be used for authentication on
            automatic referral following.
            
            </summary>
            <returns> The distinguished name from the object.
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapAuthProvider.Password">
            <summary> Returns the password to be used for authentication on automatic
            referral following.
            
            </summary>
            <returns> The byte[] value (UTF-8) of the password from the object.
            </returns>
        </member>
        <member name="T:Novell.Directory.Ldap.LdapBindHandler">
            <summary> 
            Used to do explicit bind processing on a referral.
            
            This interface allows a programmer to override the default
            authentication and reauthentication behavior when automatically
            following referrals and search references. It is used to control the
            authentication mechanism used on automatic referral following.
            
            A client can specify an instance of this class to be used
            on a single operation (through the LdapConstraints object)
            or for all operations (through the LdapContraints object
            associated with the connection).
            
            
            </summary>
            <seealso cref="T:Novell.Directory.Ldap.LdapAuthHandler">
            </seealso>
            <seealso cref="P:Novell.Directory.Ldap.LdapConstraints.ReferralFollowing">
            </seealso>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapBindHandler.Bind(System.String[],Novell.Directory.Ldap.LdapConnection)">
            <summary> Called by LdapConnection when a referral is received.
            
            This method has the responsibility to bind to one of the
            hosts in the list specified by the ldaprul parameter which corresponds
            exactly to the list of hosts returned in a single referral response.
            An implementation may access the host, port, credentials, and other
            information in the original LdapConnection object to decide on an
            appropriate authentication mechanism, and/or interact with a user or
            external module. The object implementing LdapBind creates a new
            LdapConnection object to perform its connect and bind calls.  It
            returns the new connection when both the connect and bind operations
            succeed on one host from the list.  The LdapConnection object referral
            following code uses the new LdapConnection object when it resends the
            search request, updated with the new search base and possible search
            filter. An LdapException is thrown on failure, as in the
            LdapConnection.bind method. 
            
            </summary>
            <param name="ldapurl">The list of servers contained in a referral response.
            </param>
            <param name="conn">   An established connection to an Ldap server.
            
            </param>
            <returns>       An established connection to one of the ldap servers
            in the referral list.
            
            </returns>
            <exception>  LdapReferralException An LdapreferralException is thrown
            with appropriate fields set to give the reason for the failure.
            </exception>
        </member>
        <member name="T:Novell.Directory.Ldap.LdapBindRequest">
            <summary> Represents a simple bind request.
            
            </summary>
            <seealso cref="M:Novell.Directory.Ldap.LdapConnection.SendRequest(Novell.Directory.Ldap.LdapMessage,Novell.Directory.Ldap.LdapMessageQueue)">
            </seealso>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapBindRequest.#ctor(System.Int32,System.String,System.SByte[],Novell.Directory.Ldap.LdapControl[])">
            <summary> Constructs a simple bind request.
            
            </summary>
            <param name="version"> The Ldap protocol version, use Ldap_V3.
            Ldap_V2 is not supported.
            
            </param>
            <param name="dn">     If non-null and non-empty, specifies that the
            connection and all operations through it should
            be authenticated with dn as the distinguished
            name.
            
            </param>
            <param name="passwd"> If non-null and non-empty, specifies that the
            connection and all operations through it should
            be authenticated with dn as the distinguished
            name and passwd as password.
            
            </param>
            <param name="cont">Any controls that apply to the simple bind request,
            or null if none.
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapBindRequest.ToString">
            <summary> Return an Asn1 representation of this add request.
            
            #return an Asn1 representation of this object.
            </summary>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapBindRequest.AuthenticationDN">
            <summary> Retrieves the Authentication DN for a bind request.
            
            </summary>
            <returns> the Authentication DN for a bind request
            </returns>
        </member>
        <member name="T:Novell.Directory.Ldap.LdapCompareAttrNames">
            <summary>  Compares Ldap entries based on attribute name.
            
            An object of this class defines ordering when sorting LdapEntries,
            usually from search results.  When using this Comparator, LdapEntry objects
            are sorted by the attribute names(s) passed in on the
            constructor, in ascending or descending order.  The object is typically
            supplied to an implementation of the collection interfaces such as
            java.util.TreeSet which performs sorting. 
            
            Comparison is performed via locale-sensitive Java String comparison,
            which may not correspond to the Ldap ordering rules by which an Ldap server
            would sort them.
            
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapCompareAttrNames.#ctor(System.String)">
            <summary> Constructs an object that sorts results by a single attribute, in
            ascending order.
            
            </summary>
            <param name="attrName">      Name of an attribute by which to sort.
            
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapCompareAttrNames.#ctor(System.String,System.Boolean)">
            <summary> Constructs an object that sorts results by a single attribute, in
            either ascending or descending order.
            
            </summary>
            <param name="attrName">      Name of an attribute to sort by.
            
            </param>
            <param name="ascendingFlag"> True specifies ascending order; false specifies
            descending order.
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapCompareAttrNames.#ctor(System.String[])">
            <summary> Constructs an object that sorts by one or more attributes, in the
            order provided, in ascending order.
            
            Note: Novell eDirectory allows sorting by one attribute only. The
            direcctory server must also be configured to index the specified
            attribute.
            
            </summary>
            <param name="attrNames">     Array of names of attributes to sort by.
            
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapCompareAttrNames.#ctor(System.String[],System.Boolean[])">
            <summary> Constructs an object that sorts by one or more attributes, in the
            order provided, in either ascending or descending order for each
            attribute.
            
            Note: Novell eDirectory supports only ascending sort order (A,B,C ...)
            and allows sorting only by one attribute. The directory server must be
            configured to index this attribute.
            
            </summary>
            <param name="attrNames">     Array of names of attributes to sort by.
            
            </param>
            <param name="ascendingFlags"> Array of flags, one for each attrName, where
            true specifies ascending order and false specifies
            descending order. An LdapException is thrown if
            the length of ascendingFlags is not greater than
            or equal to the length of attrNames.
            
            </param>
            <exception> LdapException A general exception which includes an error
            message and an Ldap error code.
            
            </exception>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapCompareAttrNames.Compare(System.Object,System.Object)">
            <summary> Compares the the attributes of the first LdapEntry to the second.
            Only the values of the attributes named at the construction of this
            object will be compared.  Multi-valued attributes compare on the first
            value only.  
            
            </summary>
            <param name="object1">        Target entry for comparison.
            
            </param>
            <param name="object2">        Entry to be compared to.
            
            </param>
            <returns>     Negative value if the first entry is less than the second and
            positive if the first is greater than the second.  Zero is returned if all
            attributes to be compared are the same.
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapCompareAttrNames.Equals(System.Object)">
            <summary> Determines if this comparator is equal to the comparator passed in.
            
             This will return true if the comparator is an instance of
            LdapCompareAttrNames and compares the same attributes names in the same
            order.
            
            </summary>
            <returns> true the comparators are equal
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapCompareAttrNames.Locale">
            <summary> Returns the locale to be used for sorting, if a locale has been
            specified.
            
            If locale is null, a basic String.compareTo method is used for
            collation.  If non-null, a locale-specific collation is used. 
            
            </summary>
            <returns> The locale if one has been specified
            </returns>
            <summary> Sets the locale to be used for sorting.
            
            </summary>
            <param name="locale">  The locale to be used for sorting.
            </param>
        </member>
        <member name="T:Novell.Directory.Ldap.LdapCompareRequest">
            <summary> Represents an Ldap Compare Request.
            
            </summary>
            <seealso cref="M:Novell.Directory.Ldap.LdapConnection.SendRequest(Novell.Directory.Ldap.LdapMessage,Novell.Directory.Ldap.LdapMessageQueue)">
            </seealso>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapCompareRequest.#ctor(System.String,System.String,System.SByte[],Novell.Directory.Ldap.LdapControl[])">
            <summary> Constructs an LdapCompareRequest Object.
            
            </summary>
            <param name="dn">     The distinguished name of the entry containing an
            attribute to compare.
            
            </param>
            <param name="name">   The name of the attribute to compare.
            
            </param>
            <param name="value">   The value of the attribute to compare.
            
            
            </param>
            <param name="cont">Any controls that apply to the compare request,
            or null if none.
            </param>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapCompareRequest.AttributeDescription">
            <summary> Returns the LdapAttribute associated with this request.
            
            </summary>
            <returns> the LdapAttribute
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapCompareRequest.AssertionValue">
            <summary> Returns the LdapAttribute associated with this request.
            
            </summary>
            <returns> the LdapAttribute
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapCompareRequest.DN">
            <summary> Returns of the dn of the entry to compare in the directory
            
            </summary>
            <returns> the dn of the entry to compare
            </returns>
        </member>
        <member name="T:Novell.Directory.Ldap.LdapConnection">
            <summary> The central class that encapsulates the connection
            to a directory server through the Ldap protocol.
            LdapConnection objects are used to perform common Ldap
            operations such as search, modify and add.
            
            In addition, LdapConnection objects allow you to bind to an
            Ldap server, set connection and search constraints, and perform
            several other tasks.
            
            An LdapConnection object is not connected on
            construction and can only be connected to one server at one
            port. Multiple threads may share this single connection, typically
            by cloning the connection object, one for each thread. An
            application may have more than one LdapConnection object, connected
            to the same or different directory servers.
            
            
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapConnection.SCOPE_BASE">
            <summary> Used with search to specify that the scope of entrys to search is to
            search only the base obect.
            
            SCOPE_BASE = 0
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapConnection.SCOPE_ONE">
            <summary> Used with search to specify that the scope of entrys to search is to
            search only the immediate subordinates of the base obect.
            
            SCOPE_ONE = 1
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapConnection.SCOPE_SUB">
            <summary> Used with search to specify that the scope of entrys to search is to
            search the base object and all entries within its subtree.
            
            SCOPE_ONE = 2
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapConnection.NO_ATTRS">
            <summary> Used with search instead of an attribute list to indicate that no
            attributes are to be returned.
            
            NO_ATTRS = "1.1"
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapConnection.ALL_USER_ATTRS">
            <summary> Used with search instead of an attribute list to indicate that all
            attributes are to be returned.
            
            ALL_USER_ATTRS = "*"
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapConnection.Ldap_V3">
            <summary> Specifies the Ldapv3 protocol version when performing a bind operation.
            
            Specifies Ldap version V3 of the protocol, and is specified
            when performing bind operations.
            You can use this identifier in the version parameter
            of the bind method to specify an Ldapv3 bind.
            Ldap_V3 is the default protocol version
            
            Ldap_V3 = 3
            
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapConnection.DEFAULT_PORT">
            <summary> The default port number for Ldap servers.
            
            You can use this identifier to specify the port when establishing
            a clear text connection to a server.  This the default port.
            
            DEFAULT_PORT = 389
            
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapConnection.DEFAULT_SSL_PORT">
            <summary> The default SSL port number for Ldap servers.
            
            DEFAULT_SSL_PORT = 636
            
            You can use this identifier to specify the port when establishing
            a an SSL connection to a server..
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapConnection.Ldap_PROPERTY_SDK">
            <summary> A string that can be passed in to the getProperty method.
            
            Ldap_PROPERTY_SDK = "version.sdk"
            
            You can use this string to request the version of the SDK.
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapConnection.Ldap_PROPERTY_PROTOCOL">
            <summary> A string that can be passed in to the getProperty method.
            
            Ldap_PROPERTY_PROTOCOL = "version.protocol"
            
            You can use this string to request the version of the
            Ldap protocol.
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapConnection.Ldap_PROPERTY_SECURITY">
            <summary> A string that can be passed in to the getProperty method.
            
            Ldap_PROPERTY_SECURITY = "version.security"
            
            You can use this string to request the type of security
            being used.
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapConnection.SERVER_SHUTDOWN_OID">
            <summary> A string that corresponds to the server shutdown notification OID.
            This notification may be used by the server to advise the client that
            the server is about to close the connection due to an error
            condition.
            
            SERVER_SHUTDOWN_OID = "1.3.6.1.4.1.1466.20036"
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapConnection.START_TLS_OID">
            <summary> The OID string that identifies a StartTLS request and response.</summary>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapConnection.#ctor">
            <summary> Constructs a new LdapConnection object, which will use the supplied
            class factory to construct a socket connection during
            LdapConnection.connect method.
            
            </summary>
            <param name="factory">    An object capable of producing a Socket.
            
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapConnection.Clone">
            <summary> Returns a copy of the object with a private context, but sharing the
            network connection if there is one.
            
            The network connection remains open until all clones have
            disconnected or gone out of scope. Any connection opened after
            cloning is private to the object making the connection.
            
            The clone can issue requests and freely modify options and search
            constraints, and , without affecting the source object or other clones.
            If the clone disconnects or reconnects, it is completely dissociated
            from the source object and other clones. Reauthenticating in a clone,
            however, is a global operation which will affect the source object
            and all associated clones, because it applies to the single shared
            physical connection. Any request by an associated object after one
            has reauthenticated will carry the new identity.
            
            </summary>
            <returns> A of the object.
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapConnection.Finalize">
            <summary> Closes the connection, if open, and releases any other resources held
            by the object.
            
            </summary>
            <exception> LdapException A general exception which includes an error
            message and an Ldap error code.
            
            </exception>
            <seealso cref="M:Novell.Directory.Ldap.LdapConnection.Disconnect">
            </seealso>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapConnection.getProperty(System.String)">
            <summary> Returns a property of a connection object.
            
            </summary>
            <param name="name">  Name of the property to be returned.
            
            The following read-only properties are available
            for any given connection:
            <ul>
            <li>Ldap_PROPERTY_SDK returns the version of this SDK,
            as a Float data type.</li>
            
            <li>Ldap_PROPERTY_PROTOCOL returns the highest supported version of
            the Ldap protocol, as a Float data type.</li>
            
            <li>Ldap_PROPERTY_SECURITY returns a comma-separated list of the
            types of authentication supported, as a
            string.</li>
            </ul>
            
            A deep copy of the property is provided where applicable; a
            client does not need to clone the object received.
            
            </param>
            <returns> The object associated with the requested property,
            or null if the property is not defined.
            
            </returns>
            <seealso cref="M:Novell.Directory.Ldap.LdapConstraints.getProperty(System.String)">
            </seealso>
            <seealso cref="T:System.Object">
            </seealso>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapConnection.AddUnsolicitedNotificationListener(Novell.Directory.Ldap.LdapUnsolicitedNotificationListener)">
            <summary> Registers an object to be notified on arrival of an unsolicited
            message from a server.
            
            An unsolicited message has the ID 0. A new thread is created and
            the method "messageReceived" in each registered object is called in
            turn.
            
            </summary>
            <param name="listener"> An object to be notified on arrival of an
            unsolicited message from a server.  This object must
            implement the LdapUnsolicitedNotificationListener interface.
            
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapConnection.RemoveUnsolicitedNotificationListener(Novell.Directory.Ldap.LdapUnsolicitedNotificationListener)">
            <summary> Deregisters an object so that it will no longer be notified on
            arrival of an unsolicited message from a server. If the object is
            null or was not previously registered for unsolicited notifications,
            the method does nothing.
            
            
            </summary>
            <param name="listener"> An object to no longer be notified on arrival of
            an unsolicited message from a server.
            
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapConnection.startTLS">
            <summary> Starts Transport Layer Security (TLS) protocol on this connection
            to enable session privacy.
            
            This affects the LdapConnection object and all cloned objects. A
            socket factory that implements LdapTLSSocketFactory must be set on the
            connection.
            
            </summary>
            <exception> LdapException Thrown if TLS cannot be started.  If a
            SocketFactory has been specified that does not implement
            LdapTLSSocketFactory an LdapException is thrown.
            
            </exception>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapConnection.stopTLS">
             <summary> Stops Transport Layer Security(TLS) on the LDAPConnection and reverts
             back to an anonymous state.
            
             @throws LDAPException This can occur for the following reasons: 
             <UL>        
             <LI>StartTLS has not been called before stopTLS</LI>
             <LI>There exists outstanding messages that have not received all
             responses</LI>
             <LI>The sever was not able to support the operation</LI></UL>
            
             <p>Note: The Sun and IBM implementions of JSSE do not currently allow
             stopping TLS on an open Socket.  In order to produce the same results
             this method currently disconnects the socket and reconnects, giving
             the application an anonymous connection to the server, as required
             by StopTLS</p>
             </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapConnection.Abandon(Novell.Directory.Ldap.LdapSearchResults)">
            <summary> 
            
            Notifies the server not to send additional results associated with
            this LdapSearchResults object, and discards any results already
            received.
            
            </summary>
            <param name="results">  An object returned from a search.
            
            </param>
            <exception> LdapException A general exception which includes an error
            message and an Ldap error code.
            </exception>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapConnection.Abandon(Novell.Directory.Ldap.LdapSearchResults,Novell.Directory.Ldap.LdapConstraints)">
            <summary> 
            
            Notifies the server not to send additional results associated with
            this LdapSearchResults object, and discards any results already
            received.
            
            </summary>
            <param name="results">  An object returned from a search.
            
            </param>
            <param name="cons">    The contraints specific to the operation.
            
            </param>
            <exception> LdapException A general exception which includes an error
            message and an Ldap error code.
            </exception>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapConnection.Abandon(System.Int32)">
            <summary> 
            Abandons an asynchronous operation.
            
            </summary>
            <param name="id">     The ID of the asynchronous operation to abandon. The ID
            can be obtained from the response queue for the
            operation.
            
            </param>
            <exception> LdapException A general exception which includes an error
            message and an Ldap error code.
            </exception>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapConnection.Abandon(System.Int32,Novell.Directory.Ldap.LdapConstraints)">
            <summary>  Abandons an asynchronous operation, using the specified
            constraints.
            
            </summary>
            <param name="id">The ID of the asynchronous operation to abandon.
            The ID can be obtained from the search
            queue for the operation.
            
            </param>
            <param name="cons">The contraints specific to the operation.
            
            </param>
            <exception> LdapException A general exception which includes an error
            message and an Ldap error code.
            </exception>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapConnection.Abandon(Novell.Directory.Ldap.LdapMessageQueue)">
            <summary> Abandons all outstanding operations managed by the queue.
            
            All operations in progress, which are managed by the specified queue,
            are abandoned.
            
            </summary>
            <param name="queue">    The queue returned from an asynchronous request.
            All outstanding operations managed by the queue
            are abandoned, and the queue is emptied.
            
            </param>
            <exception> LdapException A general exception which includes an error
            message and an Ldap error code.
            </exception>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapConnection.Abandon(Novell.Directory.Ldap.LdapMessageQueue,Novell.Directory.Ldap.LdapConstraints)">
            <summary> Abandons all outstanding operations managed by the queue.
            
            All operations in progress, which are managed by the specified
            queue, are abandoned.
            
            </summary>
            <param name="queue">    The queue returned from an asynchronous request.
            All outstanding operations managed by the queue
            are abandoned, and the queue is emptied.
            
            </param>
            <param name="cons">    The contraints specific to the operation.
            
            </param>
            <exception> LdapException A general exception which includes an error
            message and an Ldap error code.
            </exception>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapConnection.Add(Novell.Directory.Ldap.LdapEntry)">
            <summary> Synchronously adds an entry to the directory.
            
            </summary>
            <param name="entry">   LdapEntry object specifying the distinguished
            name and attributes of the new entry.
            
            </param>
            <exception> LdapException A general exception which includes an error
            message and an Ldap error code.
            </exception>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapConnection.Add(Novell.Directory.Ldap.LdapEntry,Novell.Directory.Ldap.LdapConstraints)">
            <summary> 
            Synchronously adds an entry to the directory, using the specified
            constraints.
            
            </summary>
            <param name="entry">  LdapEntry object specifying the distinguished
            name and attributes of the new entry.
            
            </param>
            <param name="cons">   Constraints specific to the operation.
            
            </param>
            <exception> LdapException A general exception which includes an error
            message and an Ldap error code.
            </exception>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapConnection.Add(Novell.Directory.Ldap.LdapEntry,Novell.Directory.Ldap.LdapResponseQueue)">
            <summary> Asynchronously adds an entry to the directory.
            
            </summary>
            <param name="entry">  LdapEntry object specifying the distinguished
            name and attributes of the new entry.
            
            </param>
            <param name="queue">  Handler for messages returned from a server in
            response to this request. If it is null, a
            queue object is created internally.
            
            </param>
            <exception> LdapException A general exception which includes an error
            message and an Ldap error code.
            </exception>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapConnection.Add(Novell.Directory.Ldap.LdapEntry,Novell.Directory.Ldap.LdapResponseQueue,Novell.Directory.Ldap.LdapConstraints)">
            <summary> Asynchronously adds an entry to the directory, using the specified
            constraints.
            
            </summary>
            <param name="entry">  LdapEntry object specifying the distinguished
            name and attributes of the new entry.
            
            </param>
            <param name="queue"> Handler for messages returned from a server in
            response to this request. If it is null, a
            queue object is created internally.
            
            </param>
            <param name="cons">  Constraints specific to the operation.
            
            </param>
            <exception> LdapException A general exception which includes an error
            message and an Ldap error code.
            </exception>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapConnection.Bind(System.String,System.String)">
            <summary> Synchronously authenticates to the Ldap server (that the object is
            currently connected to) as an Ldapv3 bind, using the specified name and
            password.
            
            If the object has been disconnected from an Ldap server,
            this method attempts to reconnect to the server. If the object
            has already authenticated, the old authentication is discarded.
            
            </summary>
            <param name="dn">     If non-null and non-empty, specifies that the
            connection and all operations through it should
            be authenticated with dn as the distinguished
            name.
            
            </param>
            <param name="passwd"> If non-null and non-empty, specifies that the
            connection and all operations through it should
            be authenticated with dn as the distinguished
            name and passwd as password.
            
            Note: the application should use care in the use
            of String password objects.  These are long lived
            objects, and may expose a security risk, especially
            in objects that are serialized.  The LdapConnection
            keeps no long lived instances of these objects.
            
            </param>
            <exception> LdapException A general exception which includes an error
            message and an Ldap error code.
            
            </exception>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapConnection.Bind(System.Int32,System.String,System.String)">
            <summary> Synchronously authenticates to the Ldap server (that the object is
            currently connected to) using the specified name, password,
            and Ldap version.
            
            If the object has been disconnected from an Ldap server,
            this method attempts to reconnect to the server. If the object
            has already authenticated, the old authentication is discarded.
            
            </summary>
            <param name="version"> The Ldap protocol version, use Ldap_V3.
            Ldap_V2 is not supported.
            
            </param>
            <param name="dn">     If non-null and non-empty, specifies that the
            connection and all operations through it should
            be authenticated with dn as the distinguished
            name.
            
            </param>
            <param name="passwd"> If non-null and non-empty, specifies that the
            connection and all operations through it should
            be authenticated with dn as the distinguished
            name and passwd as password.
            
            Note: the application should use care in the use
            of String password objects.  These are long lived
            objects, and may expose a security risk, especially
            in objects that are serialized.  The LdapConnection
            keeps no long lived instances of these objects.
            
            </param>
            <exception> LdapException A general exception which includes an error
            message and an Ldap error code.
            
            </exception>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapConnection.Bind(System.String,System.String,Novell.Directory.Ldap.LdapConstraints)">
            <summary> Synchronously authenticates to the Ldap server (that the object is
            currently connected to) as an Ldapv3 bind, using the specified name,
            password, and constraints.
            
            If the object has been disconnected from an Ldap server,
            this method attempts to reconnect to the server. If the object
            has already authenticated, the old authentication is discarded.
            
            </summary>
            <param name="dn">     If non-null and non-empty, specifies that the
            connection and all operations through it should
            be authenticated with dn as the distinguished
            name.
            
            </param>
            <param name="passwd"> If non-null and non-empty, specifies that the
            connection and all operations through it should
            be authenticated with dn as the distinguished
            name and passwd as password.
            Note: the application should use care in the use
            of String password objects.  These are long lived
            objects, and may expose a security risk, especially
            in objects that are serialized.  The LdapConnection
            keeps no long lived instances of these objects.
            
            </param>
            <param name="cons">    Constraints specific to the operation.
            
            </param>
            <exception> LdapException A general exception which includes an error
            message and an Ldap error code.
            
            </exception>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapConnection.Bind(System.Int32,System.String,System.String,Novell.Directory.Ldap.LdapConstraints)">
            <summary> Synchronously authenticates to the Ldap server (that the object is
            currently connected to) using the specified name, password, Ldap version,
            and constraints.
            
            If the object has been disconnected from an Ldap server,
            this method attempts to reconnect to the server. If the object
            has already authenticated, the old authentication is discarded.
            
            </summary>
            <param name="version"> The Ldap protocol version, use Ldap_V3.
            Ldap_V2 is not supported.
            
            </param>
            <param name="dn">      If non-null and non-empty, specifies that the
            connection and all operations through it should
            be authenticated with dn as the distinguished
            name.
            
            </param>
            <param name="passwd"> If non-null and non-empty, specifies that the
            connection and all operations through it should
            be authenticated with dn as the distinguished
            name and passwd as password.
            
            Note: the application should use care in the use
            of String password objects.  These are long lived
            objects, and may expose a security risk, especially
            in objects that are serialized.  The LdapConnection
            keeps no long lived instances of these objects.
            
            </param>
            <param name="cons">   The constraints specific to the operation.
            
            </param>
            <exception> LdapException A general exception which includes an error
            message and an Ldap error code.
            
            </exception>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapConnection.Bind(System.Int32,System.String,System.SByte[])">
            <summary> Synchronously authenticates to the Ldap server (that the object is
            currently connected to) using the specified name, password,
            and Ldap version.
            
            If the object has been disconnected from an Ldap server,
            this method attempts to reconnect to the server. If the object
            has already authenticated, the old authentication is discarded.
            
            </summary>
            <param name="version"> The version of the Ldap protocol to use
            in the bind, use Ldap_V3.  Ldap_V2 is not supported.
            
            </param>
            <param name="dn">     If non-null and non-empty, specifies that the
            connection and all operations through it should
            be authenticated with dn as the distinguished
            name.
            
            </param>
            <param name="passwd"> If non-null and non-empty, specifies that the
            connection and all operations through it should
            be authenticated with dn as the distinguished
            name and passwd as password.
            
            </param>
            <exception> LdapException A general exception which includes an error
            message and an Ldap error code.
            </exception>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapConnection.Bind(System.Int32,System.String,System.SByte[],Novell.Directory.Ldap.LdapConstraints)">
            <summary> 
            Synchronously authenticates to the Ldap server (that the object is
            currently connected to) using the specified name, password, Ldap version,
            and constraints.
            
            If the object has been disconnected from an Ldap server,
            this method attempts to reconnect to the server. If the object
            has already authenticated, the old authentication is discarded.
            
            </summary>
            <param name="version"> The Ldap protocol version, use Ldap_V3.
            Ldap_V2 is not supported.
            
            </param>
            <param name="dn">      If non-null and non-empty, specifies that the
            connection and all operations through it should
            be authenticated with dn as the distinguished
            name.
            
            </param>
            <param name="passwd"> If non-null and non-empty, specifies that the
            connection and all operations through it should
            be authenticated with dn as the distinguished
            name and passwd as password.
            
            </param>
            <param name="cons">   The constraints specific to the operation.
            
            </param>
            <exception> LdapException A general exception which includes an error
            message and an Ldap error code.
            </exception>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapConnection.Bind(System.Int32,System.String,System.SByte[],Novell.Directory.Ldap.LdapResponseQueue)">
            <summary> Asynchronously authenticates to the Ldap server (that the object is
            currently connected to) using the specified name, password, Ldap
            version, and queue.
            
            If the object has been disconnected from an Ldap server,
            this method attempts to reconnect to the server. If the object
            has already authenticated, the old authentication is discarded.
            
            
            </summary>
            <param name="version"> The Ldap protocol version, use Ldap_V3.
            Ldap_V2 is not supported.
            
            </param>
            <param name="dn">     If non-null and non-empty, specifies that the
            connection and all operations through it should
            be authenticated with dn as the distinguished
            name.
            
            </param>
            <param name="passwd"> If non-null and non-empty, specifies that the
            connection and all operations through it should
            be authenticated with dn as the distinguished
            name and passwd as password.
            
            </param>
            <param name="queue">  Handler for messages returned from a server in
            response to this request. If it is null, a
            queue object is created internally.
            
            </param>
            <exception> LdapException A general exception which includes an error
            message and an Ldap error code.
            </exception>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapConnection.Bind(System.Int32,System.String,System.SByte[],Novell.Directory.Ldap.LdapResponseQueue,Novell.Directory.Ldap.LdapConstraints)">
            <summary> Asynchronously authenticates to the Ldap server (that the object is
            currently connected to) using the specified name, password, Ldap
            version, queue, and constraints.
            
            If the object has been disconnected from an Ldap server,
            this method attempts to reconnect to the server. If the object
            had already authenticated, the old authentication is discarded.
            
            </summary>
            <param name="version"> The Ldap protocol version, use Ldap_V3.
            Ldap_V2 is not supported.
            
            </param>
            <param name="dn">     If non-null and non-empty, specifies that the
            connection and all operations through it should
            be authenticated with dn as the distinguished
            name.
            
            </param>
            <param name="passwd"> If non-null and non-empty, specifies that the
            connection and all operations through it should
            be authenticated with dn as the distinguished
            name and passwd as password.
            
            </param>
            <param name="queue">  Handler for messages returned from a server in
            response to this request. If it is null, a
            queue object is created internally.
            
            </param>
            <param name="cons">     Constraints specific to the operation.
            
            </param>
            <exception> LdapException A general exception which includes an error
            message and an Ldap error code.
            </exception>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapConnection.Compare(System.String,Novell.Directory.Ldap.LdapAttribute)">
            <summary> 
            Synchronously checks to see if an entry contains an attribute
            with a specified value.
            
            </summary>
            <param name="dn">     The distinguished name of the entry to use in the
            comparison.
            
            </param>
            <param name="attr">   The attribute to compare against the entry. The
            method checks to see if the entry has an
            attribute with the same name and value as this
            attribute.
            
            </param>
            <returns> True if the entry has the value,
            and false if the entry does not
            have the value or the attribute.
            
            </returns>
            <exception> LdapException A general exception which includes an error
            message and an Ldap error code.
            </exception>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapConnection.Compare(System.String,Novell.Directory.Ldap.LdapAttribute,Novell.Directory.Ldap.LdapConstraints)">
            <summary> 
            Synchronously checks to see if an entry contains an attribute with a
            specified value, using the specified constraints.
            
            </summary>
            <param name="dn">     The distinguished name of the entry to use in the
            comparison.
            
            </param>
            <param name="attr">   The attribute to compare against the entry. The
            method checks to see if the entry has an
            attribute with the same name and value as this
            attribute.
            
            </param>
            <param name="cons">   Constraints specific to the operation.
            
            </param>
            <returns> True if the entry has the value,
            and false if the entry does not
            have the value or the attribute.
            
            </returns>
            <exception> LdapException A general exception which includes an error
            message and an Ldap error code.
            </exception>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapConnection.Compare(System.String,Novell.Directory.Ldap.LdapAttribute,Novell.Directory.Ldap.LdapResponseQueue)">
            <summary> Asynchronously compares an attribute value with one in the directory,
            using the specified queue.
            
            Please note that a successful completion of this command results in
            one of two status codes: LdapException.COMPARE_TRUE if the entry
            has the value, and LdapException.COMPARE_FALSE if the entry
            does not have the value or the attribute.
            
            </summary>
            <param name="dn">     The distinguished name of the entry containing an
            attribute to compare.
            
            </param>
            <param name="attr">   An attribute to compare.
            
            </param>
            <param name="queue">  The queue for messages returned from a server in
            response to this request. If it is null, a
            queue object is created internally.
            
            </param>
            <exception> LdapException A general exception which includes an error
            message and an Ldap error code.
            
            </exception>
            <seealso cref="F:Novell.Directory.Ldap.LdapException.COMPARE_TRUE">
            </seealso>
            <seealso cref="F:Novell.Directory.Ldap.LdapException.COMPARE_FALSE">
            </seealso>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapConnection.Compare(System.String,Novell.Directory.Ldap.LdapAttribute,Novell.Directory.Ldap.LdapResponseQueue,Novell.Directory.Ldap.LdapConstraints)">
            <summary> Asynchronously compares an attribute value with one in the directory,
            using the specified queue and contraints.
            
            Please note that a successful completion of this command results in
            one of two status codes: LdapException.COMPARE_TRUE if the entry
            has the value, and LdapException.COMPARE_FALSE if the entry
            does not have the value or the attribute.
            
            </summary>
            <param name="dn">     The distinguished name of the entry containing an
            attribute to compare.
            
            </param>
            <param name="attr">   An attribute to compare.
            
            </param>
            <param name="queue">    Handler for messages returned from a server in
            response to this request. If it is null, a
            queue object is created internally.
            
            </param>
            <param name="cons">     Constraints specific to the operation.
            
            </param>
            <exception> LdapException A general exception which includes an error
            message and an Ldap error code.
            
            </exception>
            <seealso cref="F:Novell.Directory.Ldap.LdapException.COMPARE_TRUE">
            </seealso>
            <seealso cref="F:Novell.Directory.Ldap.LdapException.COMPARE_FALSE">
            </seealso>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapConnection.Connect(System.String,System.Int32)">
            <summary> 
            Connects to the specified host and port.
            
            If this LdapConnection object represents an open connection, the
            connection is closed first before the new connection is opened.
            At this point, there is no authentication, and any operations are
            conducted as an anonymous client.
            
             When more than one host name is specified, each host is contacted
            in turn until a connection can be established.
            
            </summary>
            <param name="host">A host name or a dotted string representing the IP address
            of a host running an Ldap server. It may also
            contain a list of host names, space-delimited. Each host
            name can include a trailing colon and port number.
            
            </param>
            <param name="port">The TCP or UDP port number to connect to or contact.
            The default Ldap port is 389. The port parameter is
            ignored for any host hame which includes a colon and
            port number.
            
            </param>
            <exception> LdapException A general exception which includes an error
            message and an Ldap error code.
            
            </exception>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapConnection.Delete(System.String)">
            <summary> 
            Synchronously deletes the entry with the specified distinguished name
            from the directory.
            
            Note: A Delete operation will not remove an entry that contains
            subordinate entries, nor will it dereference alias entries. 
            
            </summary>
            <param name="dn">     The distinguished name of the entry to delete.
            
            </param>
            <exception> LdapException A general exception which includes an error
            message and an Ldap error code.
            </exception>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapConnection.Delete(System.String,Novell.Directory.Ldap.LdapConstraints)">
            <summary> Synchronously deletes the entry with the specified distinguished name
            from the directory, using the specified constraints.
            
            Note: A Delete operation will not remove an entry that contains
            subordinate entries, nor will it dereference alias entries. 
            
            </summary>
            <param name="dn">     The distinguished name of the entry to delete.
            
            </param>
            <param name="cons">   Constraints specific to the operation.
            
            </param>
            <exception> LdapException A general exception which includes an error
            message and an Ldap error code.
            </exception>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapConnection.Delete(System.String,Novell.Directory.Ldap.LdapResponseQueue)">
            <summary> Asynchronously deletes the entry with the specified distinguished name
            from the directory and returns the results to the specified queue.
            
            Note: A Delete operation will not remove an entry that contains
            subordinate entries, nor will it dereference alias entries. 
            
            </summary>
            <param name="dn">     The distinguished name of the entry to modify.
            
            </param>
            <param name="queue">    The queue for messages returned from a server in
            response to this request. If it is null, a
            queue object is created internally.
            
            </param>
            <exception> LdapException A general exception which includes an error
            message and an Ldap error code.
            
            </exception>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapConnection.Delete(System.String,Novell.Directory.Ldap.LdapResponseQueue,Novell.Directory.Ldap.LdapConstraints)">
            <summary> Asynchronously deletes the entry with the specified distinguished name
            from the directory, using the specified contraints and queue.
            
            Note: A Delete operation will not remove an entry that contains
            subordinate entries, nor will it dereference alias entries. 
            
            </summary>
            <param name="dn">     The distinguished name of the entry to delete.
            
            </param>
            <param name="queue">     The queue for messages returned from a server in
            response to this request. If it is null, a
            queue object is created internally.
            
            </param>
            <param name="cons">   The constraints specific to the operation.
            
            </param>
            <exception> LdapException A general exception which includes an error
            message and an Ldap error code.
            
            </exception>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapConnection.Disconnect">
            <summary> 
            Synchronously disconnects from the Ldap server.
            
            Before the object can perform Ldap operations again, it must
            reconnect to the server by calling connect.
            
            The disconnect method abandons any outstanding requests, issues an
            unbind request to the server, and then closes the socket.
            
            </summary>
            <exception> LdapException A general exception which includes an error
            message and an Ldap error code.
            
            </exception>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapConnection.Disconnect(Novell.Directory.Ldap.LdapConstraints)">
            <summary> Synchronously disconnects from the Ldap server.
            
            Before the object can perform Ldap operations again, it must
            reconnect to the server by calling connect.
            
            The disconnect method abandons any outstanding requests, issues an
            unbind request to the server, and then closes the socket.
            
            </summary>
            <param name="cons">LDPConstraints to be set with the unbind request
            
            </param>
            <exception> LdapException A general exception which includes an error
            message and an Ldap error code.
            </exception>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapConnection.Disconnect(Novell.Directory.Ldap.LdapConstraints,System.Boolean)">
            <summary> Synchronously disconnect from the server
            
            </summary>
            <param name="how">true if application call disconnect API, false if finalize.
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapConnection.ExtendedOperation(Novell.Directory.Ldap.LdapExtendedOperation)">
            <summary> Provides a synchronous means to access extended, non-mandatory
            operations offered by a particular Ldapv3 compliant server.
            
            </summary>
            <param name="op"> The object which contains (1) an identifier of an extended
            operation which should be recognized by the particular Ldap
            server this client is connected to and (2)
            an operation-specific sequence of octet strings
            or BER-encoded values.
            
            </param>
            <returns> An operation-specific object, containing an ID and either an octet
            string or BER-encoded values.
            
            </returns>
            <exception> LdapException A general exception which includes an error
            message and an Ldap error code.
            </exception>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapConnection.ExtendedOperation(Novell.Directory.Ldap.LdapExtendedOperation,Novell.Directory.Ldap.LdapConstraints)">
            <summary> 
            Provides a synchronous means to access extended, non-mandatory
            operations offered by a particular Ldapv3 compliant server.
            
            </summary>
            <param name="op"> The object which contains (1) an identifier of an extended
            operation which should be recognized by the particular Ldap
            server this client is connected to and (2) an
            operation-specific sequence of octet strings
            or BER-encoded values.
            
            </param>
            <param name="cons">The constraints specific to the operation.
            
            </param>
            <returns> An operation-specific object, containing an ID and either an
            octet string or BER-encoded values.
            
            </returns>
            <exception> LdapException A general exception which includes an error
            message and an Ldap error code.
            </exception>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapConnection.ExtendedOperation(Novell.Directory.Ldap.LdapExtendedOperation,Novell.Directory.Ldap.LdapResponseQueue)">
            <summary> Provides an asynchronous means to access extended, non-mandatory
            operations offered by a particular Ldapv3 compliant server.
            
            </summary>
            <param name="op"> The object which contains (1) an identifier of an extended
            operation which should be recognized by the particular Ldap
            server this client is connected to and (2) an
            operation-specific sequence of octet strings
            or BER-encoded values.
            
            </param>
            <param name="queue">    The queue for messages returned from a server in
            response to this request. If it is null, a queue
            object is created internally.
            
            </param>
            <returns> An operation-specific object, containing an ID and either an octet
            string or BER-encoded values.
            
            </returns>
            <exception> LdapException A general exception which includes an error
            message and an Ldap error code.
            </exception>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapConnection.ExtendedOperation(Novell.Directory.Ldap.LdapExtendedOperation,Novell.Directory.Ldap.LdapConstraints,Novell.Directory.Ldap.LdapResponseQueue)">
            <summary> Provides an asynchronous means to access extended, non-mandatory
            operations offered by a particular Ldapv3 compliant server.
            
            </summary>
            <param name="op"> The object which contains (1) an identifier of an extended
            operation which should be recognized by the particular Ldap
            server this client is connected to and (2) an operation-
            specific sequence of octet strings or BER-encoded values.
            
            </param>
            <param name="queue">    The queue for messages returned from a server in
            response to this request. If it is null, a queue
            object is created internally.
            
            </param>
            <param name="cons">     The constraints specific to this operation.
            
            </param>
            <returns> An operation-specific object, containing an ID and either an
            octet string or BER-encoded values.
            
            </returns>
            <exception> LdapException A general exception which includes an error
            message and an Ldap error code.
            </exception>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapConnection.MakeExtendedOperation(Novell.Directory.Ldap.LdapExtendedOperation,Novell.Directory.Ldap.LdapConstraints)">
            <summary> Formulates the extended operation, constraints into an
            LdapMessage and returns the LdapMessage.  This is used by
            extendedOperation and startTLS which needs the LdapMessage to
            get the MessageID.
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapConnection.Modify(System.String,Novell.Directory.Ldap.LdapModification)">
            <summary> Synchronously makes a single change to an existing entry in the
            directory.
            
            For example, this modify method changes the value of an attribute,
            adds a new attribute value, or removes an existing attribute value. 
            
            The LdapModification object specifies both the change to be made and
            the LdapAttribute value to be changed.
            
            If the request fails with {@link LdapException.CONNECT_ERROR},
            it is indeterminate whether or not the server made the modification.
            
            </summary>
            <param name="dn">    The distinguished name of the entry to modify.
            
            </param>
            <param name="mod">   A single change to be made to the entry.
            
            </param>
            <exception> LdapException A general exception which includes an error
            message and an Ldap error code.
            </exception>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapConnection.Modify(System.String,Novell.Directory.Ldap.LdapModification,Novell.Directory.Ldap.LdapConstraints)">
            <summary> 
            Synchronously makes a single change to an existing entry in the
            directory, using the specified constraints.
            
            For example, this modify method changes the value of an attribute,
            adds a new attribute value, or removes an existing attribute value.
            
            The LdapModification object specifies both the change to be
            made and the LdapAttribute value to be changed.
            
            If the request fails with {@link LdapException.CONNECT_ERROR},
            it is indeterminate whether or not the server made the modification.
            
            </summary>
            <param name="dn">      The distinguished name of the entry to modify.
            
            </param>
            <param name="mod">     A single change to be made to the entry.
            
            </param>
            <param name="cons">    The constraints specific to the operation.
            
            </param>
            <exception> LdapException A general exception which includes an error
            message and an Ldap error code.
            </exception>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapConnection.Modify(System.String,Novell.Directory.Ldap.LdapModification[])">
            <summary> 
            Synchronously makes a set of changes to an existing entry in the
            directory.
            
            For example, this modify method changes attribute values, adds
            new attribute values, or removes existing attribute values.
            
            Because the server applies all changes in an LdapModification array
            atomically, the application can expect that no changes
            have been performed if an error is returned.
            If the request fails with {@link LdapException.CONNECT_ERROR},
            it is indeterminate whether or not the server made the modifications.
            
            </summary>
            <param name="dn">    Distinguished name of the entry to modify.
            
            </param>
            <param name="mods">  The changes to be made to the entry.
            
            </param>
            <exception> LdapException A general exception which includes an error
            message and an Ldap error code.
            </exception>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapConnection.Modify(System.String,Novell.Directory.Ldap.LdapModification[],Novell.Directory.Ldap.LdapConstraints)">
            <summary> Synchronously makes a set of changes to an existing entry in the
            directory, using the specified constraints.
            
            For example, this modify method changes attribute values, adds new
            attribute values, or removes existing attribute values.
            
            Because the server applies all changes in an LdapModification array
            atomically, the application can expect that no changes
            have been performed if an error is returned.
            If the request fails with {@link LdapException.CONNECT_ERROR},
            it is indeterminate whether or not the server made the modifications.
            
            </summary>
            <param name="dn">     The distinguished name of the entry to modify.
            
            </param>
            <param name="mods">   The changes to be made to the entry.
            
            </param>
            <param name="cons">   The constraints specific to the operation.
            
            </param>
            <exception> LdapException A general exception which includes an
            error message and an Ldap error code.
            </exception>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapConnection.Modify(System.String,Novell.Directory.Ldap.LdapModification,Novell.Directory.Ldap.LdapResponseQueue)">
            <summary> Asynchronously makes a single change to an existing entry in the
            directory.
            
            For example, this modify method can change the value of an attribute,
            add a new attribute value, or remove an existing attribute value.
            
            The LdapModification object specifies both the change to be made and
            the LdapAttribute value to be changed.
            
            If the request fails with {@link LdapException.CONNECT_ERROR},
            it is indeterminate whether or not the server made the modification.
            
            </summary>
            <param name="dn">        Distinguished name of the entry to modify.
            
            </param>
            <param name="mod">       A single change to be made to the entry.
            
            </param>
            <param name="queue">     Handler for messages returned from a server in
            response to this request. If it is null, a
            queue object is created internally.
            
            </param>
            <exception> LdapException A general exception which includes an error
            message and an Ldap error code.
            </exception>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapConnection.Modify(System.String,Novell.Directory.Ldap.LdapModification,Novell.Directory.Ldap.LdapResponseQueue,Novell.Directory.Ldap.LdapConstraints)">
            <summary> Asynchronously makes a single change to an existing entry in the
            directory, using the specified constraints and queue.
            
            For example, this modify method can change the value of an attribute,
            add a new attribute value, or remove an existing attribute value.
            
            The LdapModification object specifies both the change to be made
            and the LdapAttribute value to be changed.
            
            If the request fails with {@link LdapException.CONNECT_ERROR},
            it is indeterminate whether or not the server made the modification.
            
            </summary>
            <param name="dn">         Distinguished name of the entry to modify.
            
            </param>
            <param name="mod">        A single change to be made to the entry.
            
            </param>
            <param name="queue">      Handler for messages returned from a server in
            response to this request. If it is null, a
            queue object is created internally.
            
            </param>
            <param name="cons">       Constraints specific to the operation.
            
            </param>
            <exception> LdapException A general exception which includes an error
            message and an Ldap error code.
            </exception>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapConnection.Modify(System.String,Novell.Directory.Ldap.LdapModification[],Novell.Directory.Ldap.LdapResponseQueue)">
            <summary> Asynchronously makes a set of changes to an existing entry in the
            directory.
            
            For example, this modify method can change attribute values, add new
            attribute values, or remove existing attribute values.
            
            Because the server applies all changes in an LdapModification array
            atomically, the application can expect that no changes
            have been performed if an error is returned.
            If the request fails with {@link LdapException.CONNECT_ERROR},
            it is indeterminate whether or not the server made the modifications.
            
            </summary>
            <param name="dn">        The distinguished name of the entry to modify.
            
            </param>
            <param name="mods">      The changes to be made to the entry.
            
            </param>
            <param name="queue">     The queue for messages returned from a server in
            response to this request. If it is null, a
            queue object is created internally.
            
            </param>
            <exception> LdapException A general exception which includes an error
            message and an Ldap error code.
            </exception>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapConnection.Modify(System.String,Novell.Directory.Ldap.LdapModification[],Novell.Directory.Ldap.LdapResponseQueue,Novell.Directory.Ldap.LdapConstraints)">
            <summary> Asynchronously makes a set of changes to an existing entry in the
            directory, using the specified constraints and queue.
            
            For example, this modify method can change attribute values, add new
            attribute values, or remove existing attribute values.
            
            Because the server applies all changes in an LdapModification array
            atomically, the application can expect that no changes
            have been performed if an error is returned.
            If the request fails with {@link LdapException.CONNECT_ERROR},
            it is indeterminate whether or not the server made the modifications.
            
            </summary>
            <param name="dn">        The distinguished name of the entry to modify.
            
            </param>
            <param name="mods">      The changes to be made to the entry.
            
            </param>
            <param name="queue">     The queue for messages returned from a server in
            response to this request. If it is null, a
            queue object is created internally.
            
            </param>
            <param name="cons">      Constraints specific to the operation.
            
            </param>
            <exception> LdapException A general exception which includes an error
            message and an Ldap error code.
            </exception>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapConnection.Read(System.String)">
            <summary> Synchronously reads the entry for the specified distiguished name (DN)
            and retrieves all attributes for the entry.
            
            </summary>
            <param name="dn">       The distinguished name of the entry to retrieve.
            
            </param>
            <returns> the LdapEntry read from the server.
            
            </returns>
            <exception> LdapException if the object was not found
            </exception>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapConnection.Read(System.String,Novell.Directory.Ldap.LdapSearchConstraints)">
            <summary> 
            Synchronously reads the entry for the specified distiguished name (DN),
            using the specified constraints, and retrieves all attributes for the
            entry.
            
            </summary>
            <param name="dn">        The distinguished name of the entry to retrieve.
            
            </param>
            <param name="cons">      The constraints specific to the operation.
            
            </param>
            <returns> the LdapEntry read from the server
            
            </returns>
            <exception> LdapException if the object was not found
            </exception>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapConnection.Read(System.String,System.String[])">
            <summary> 
            Synchronously reads the entry for the specified distinguished name (DN)
            and retrieves only the specified attributes from the entry.
            
            </summary>
            <param name="dn">        The distinguished name of the entry to retrieve.
            
            </param>
            <param name="attrs">     The names of the attributes to retrieve.
            
            </param>
            <returns> the LdapEntry read from the server
            
            </returns>
            <exception> LdapException if the object was not found
            </exception>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapConnection.Read(System.String,System.String[],Novell.Directory.Ldap.LdapSearchConstraints)">
            <summary> Synchronously reads the entry for the specified distinguished name (DN),
            using the specified constraints, and retrieves only the specified
            attributes from the entry.
            
            </summary>
            <param name="dn">      The distinguished name of the entry to retrieve.
            
            </param>
            <param name="attrs">   The names of the attributes to retrieve.
            
            </param>
            <param name="cons">    The constraints specific to the operation.
            
            </param>
            <returns> the LdapEntry read from the server
            
            </returns>
            <exception> LdapException if the object was not found
            </exception>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapConnection.Read(Novell.Directory.Ldap.LdapUrl)">
            <summary> Synchronously reads the entry specified by the Ldap URL.
            
            When this read method is called, a new connection is created
            automatically, using the host and port specified in the URL. After
            finding the entry, the method closes the connection (in other words,
            it disconnects from the Ldap server).
            
            If the URL specifies a filter and scope, they are not used. Of the
            information specified in the URL, this method only uses the Ldap host
            name and port number, the base distinguished name (DN), and the list
            of attributes to return.
            
            </summary>
            <param name="toGet">          Ldap URL specifying the entry to read.
            
            </param>
            <returns> The entry specified by the base DN.
            
            </returns>
            <exception> LdapException if the object was not found
            </exception>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapConnection.Read(Novell.Directory.Ldap.LdapUrl,Novell.Directory.Ldap.LdapSearchConstraints)">
            <summary> Synchronously reads the entry specified by the Ldap URL, using the
            specified constraints.
            
            When this method is called, a new connection is created
            automatically, using the host and port specified in the URL. After
            finding the entry, the method closes the connection (in other words,
            it disconnects from the Ldap server).
            
            If the URL specifies a filter and scope, they are not used. Of the
            information specified in the URL, this method only uses the Ldap host
            name and port number, the base distinguished name (DN), and the list
            of attributes to return.
            
            </summary>
            <returns> The entry specified by the base DN.
            
            </returns>
            <param name="toGet">      Ldap URL specifying the entry to read.
            
            </param>
            <param name="cons">      Constraints specific to the operation.
            
            </param>
            <exception> LdapException if the object was not found
            </exception>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapConnection.Rename(System.String,System.String,System.Boolean)">
            <summary> 
            Synchronously renames an existing entry in the directory.
            
            </summary>
            <param name="dn">      The current distinguished name of the entry.
            
            </param>
            <param name="newRdn">  The new relative distinguished name for the entry.
            
            </param>
            <param name="deleteOldRdn">  If true, the old name is not retained as an
            attribute value. If false, the old name is
            retained as an attribute value.
            
            </param>
            <exception> LdapException A general exception which includes an error
            message and an Ldap error code.
            </exception>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapConnection.Rename(System.String,System.String,System.Boolean,Novell.Directory.Ldap.LdapConstraints)">
            <summary> 
            Synchronously renames an existing entry in the directory, using the
            specified constraints.
            
            </summary>
            <param name="dn">            The current distinguished name of the entry.
            
            </param>
            <param name="newRdn">        The new relative distinguished name for the entry.
            
            </param>
            <param name="deleteOldRdn">  If true, the old name is not retained as an
            attribute value. If false, the old name is
            retained as an attribute value.
            
            </param>
            <param name="cons">          The constraints specific to the operation.
            
            </param>
            <exception> LdapException A general exception which includes an error
            message and an Ldap error code.
            </exception>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapConnection.Rename(System.String,System.String,System.String,System.Boolean)">
            <summary> Synchronously renames an existing entry in the directory, possibly
            repositioning the entry in the directory tree.
            
            </summary>
            <param name="dn">            The current distinguished name of the entry.
            
            </param>
            <param name="newRdn">        The new relative distinguished name for the entry.
            
            </param>
            <param name="newParentdn">   The distinguished name of an existing entry which
            is to be the new parent of the entry.
            
            </param>
            <param name="deleteOldRdn">  If true, the old name is not retained as an
            attribute value. If false, the old name is
            retained as an attribute value.
            
            </param>
            <exception> LdapException A general exception which includes an error
            message and an Ldap error code.
            </exception>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapConnection.Rename(System.String,System.String,System.String,System.Boolean,Novell.Directory.Ldap.LdapConstraints)">
            <summary> 
            Synchronously renames an existing entry in the directory, using the
            specified constraints and possibly repositioning the entry in the
            directory tree.
            
            </summary>
            <param name="dn">            The current distinguished name of the entry.
            
            </param>
            <param name="newRdn">        The new relative distinguished name for the entry.
            
            </param>
            <param name="newParentdn">   The distinguished name of an existing entry which
            is to be the new parent of the entry.
            
            </param>
            <param name="deleteOldRdn">  If true, the old name is not retained as an
            attribute value. If false, the old name is
            retained as an attribute value.
            
            </param>
            <param name="cons">          The constraints specific to the operation.
            
            </param>
            <exception> LdapException A general exception which includes an error
            message and an Ldap error code.
            </exception>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapConnection.Rename(System.String,System.String,System.Boolean,Novell.Directory.Ldap.LdapResponseQueue)">
            <summary> Asynchronously renames an existing entry in the directory.
            
            </summary>
            <param name="dn">            The current distinguished name of the entry.
            
            </param>
            <param name="newRdn">        The new relative distinguished name for the entry.
            
            </param>
            <param name="deleteOldRdn">  If true, the old name is not retained as an
            attribute value. If false, the old name is
            retained as an attribute value.
            
            </param>
            <param name="queue">         The queue for messages returned from a server in
            response to this request. If it is null, a
            queue object is created internally.
            
            </param>
            <exception> LdapException A general exception which includes an error
            message and an Ldap error code.
            </exception>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapConnection.Rename(System.String,System.String,System.Boolean,Novell.Directory.Ldap.LdapResponseQueue,Novell.Directory.Ldap.LdapConstraints)">
            <summary> Asynchronously renames an existing entry in the directory, using the
            specified constraints.
            
            </summary>
            <param name="dn">            The current distinguished name of the entry.
            
            </param>
            <param name="newRdn">        The new relative distinguished name for the entry.
            
            </param>
            <param name="deleteOldRdn">  If true, the old name is not retained as an
            attribute value. If false, the old name is
            retained as an attribute value.
            
            </param>
            <param name="queue">         The queue for messages returned from a server in
            response to this request. If it is null, a
            queue object is created internally.
            
            </param>
            <param name="cons">          The constraints specific to the operation.
            
            </param>
            <exception> LdapException A general exception which includes an error
            message and an Ldap error code.
            </exception>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapConnection.Rename(System.String,System.String,System.String,System.Boolean,Novell.Directory.Ldap.LdapResponseQueue)">
            <summary> Asynchronously renames an existing entry in the directory, possibly
            repositioning the entry in the directory.
            
            </summary>
            <param name="dn">            The current distinguished name of the entry.
            
            </param>
            <param name="newRdn">        The new relative distinguished name for the entry.
            
            </param>
            <param name="newParentdn">   The distinguished name of an existing entry which
            is to be the new parent of the entry.
            
            </param>
            <param name="deleteOldRdn">  If true, the old name is not retained as an
            attribute value. If false, the old name is
            retained as an attribute value.
            
            </param>
            <param name="queue">         The queue for messages returned from a server in
            response to this request. If it is null, a
            queue object is created internally.
            
            </param>
            <exception> LdapException A general exception which includes an error
            message and an Ldap error code.
            </exception>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapConnection.Rename(System.String,System.String,System.String,System.Boolean,Novell.Directory.Ldap.LdapResponseQueue,Novell.Directory.Ldap.LdapConstraints)">
            <summary> Asynchronously renames an existing entry in the directory, using the
            specified constraints and possibily repositioning the entry in the
            directory.
            
            </summary>
            <param name="dn">            The current distinguished name of the entry.
            
            </param>
            <param name="newRdn">        The new relative distinguished name for the entry.
            
            </param>
            <param name="newParentdn">   The distinguished name of an existing entry which
            is to be the new parent of the entry.
            
            </param>
            <param name="deleteOldRdn">  If true, the old name is not retained as an
            attribute value. If false, the old name is
            retained as an attribute value.
            
            </param>
            <param name="queue">         The queue for messages returned from a server in
            response to this request. If it is null, a
            queue object is created internally.
            
            </param>
            <param name="cons">          The constraints specific to the operation.
            
            </param>
            <exception> LdapException A general exception which includes an error
            message and an Ldap error code.
            </exception>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapConnection.Search(System.String,System.Int32,System.String,System.String[],System.Boolean)">
            <summary> 
            Synchronously performs the search specified by the parameters.
            
            </summary>
            <param name="base">          The base distinguished name to search from.
            
            </param>
            <param name="scope">         The scope of the entries to search. The following
            are the valid options:
            <ul>
            <li>SCOPE_BASE - searches only the base DN</li>
            
            <li>SCOPE_ONE - searches only entries under the base DN</li>
            
            <li>SCOPE_SUB - searches the base DN and all entries
            within its subtree</li>
            </ul>
            </param>
            <param name="filter">        Search filter specifying the search criteria.
            
            </param>
            <param name="attrs">         Names of attributes to retrieve.
            
            </param>
            <param name="typesOnly">     If true, returns the names but not the values of
            the attributes found. If false, returns the
            names and values for attributes found.
            
            </param>
            <exception> LdapException A general exception which includes an error
            message and an Ldap error code.
            </exception>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapConnection.Search(System.String,System.Int32,System.String,System.String[],System.Boolean,Novell.Directory.Ldap.LdapSearchConstraints)">
            <summary> 
            Synchronously performs the search specified by the parameters,
            using the specified search constraints (such as the
            maximum number of entries to find or the maximum time to wait for
            search results).
            
            As part of the search constraints, the method allows specifying
            whether or not the results are to be delivered all at once or in
            smaller batches. If specified that the results are to be delivered in
            smaller batches, each iteration blocks only until the next batch of
            results is returned.
            
            </summary>
            <param name="base">          The base distinguished name to search from.
            
            </param>
            <param name="scope">         The scope of the entries to search. The following
            are the valid options:
            <ul>
            <li>SCOPE_BASE - searches only the base DN</li>
            
            <li>SCOPE_ONE - searches only entries under the base DN</li>
            
            <li>SCOPE_SUB - searches the base DN and all entries
            within its subtree</li>
            </ul>
            </param>
            <param name="filter">        The search filter specifying the search criteria.
            
            </param>
            <param name="attrs">         The names of attributes to retrieve.
            
            </param>
            <param name="typesOnly">     If true, returns the names but not the values of
            the attributes found.  If false, returns the
            names and values for attributes found.
            
            </param>
            <param name="cons">          The constraints specific to the search.
            
            </param>
            <exception> LdapException A general exception which includes an error
            message and an Ldap error code.
            </exception>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapConnection.Search(System.String,System.Int32,System.String,System.String[],System.Boolean,Novell.Directory.Ldap.LdapSearchQueue)">
            <summary> Asynchronously performs the search specified by the parameters.
            
            </summary>
            <param name="base">          The base distinguished name to search from.
            
            </param>
            <param name="scope">         The scope of the entries to search. The following
            are the valid options:
            <ul>
            <li>SCOPE_BASE - searches only the base DN</li>
            
            <li>SCOPE_ONE - searches only entries under the base DN</li>
            
            <li>SCOPE_SUB - searches the base DN and all entries
            within its subtree</li>
            </ul>
            </param>
            <param name="filter">        Search filter specifying the search criteria.
            
            </param>
            <param name="attrs">         Names of attributes to retrieve.
            
            </param>
            <param name="typesOnly">     If true, returns the names but not the values of
            the attributes found.  If false, returns the
            names and values for attributes found.
            
            </param>
            <param name="queue">         Handler for messages returned from a server in
            response to this request. If it is null, a
            queue object is created internally.
            
            </param>
            <exception> LdapException A general exception which includes an error
            message and an Ldap error code.
            </exception>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapConnection.Search(System.String,System.Int32,System.String,System.String[],System.Boolean,Novell.Directory.Ldap.LdapSearchQueue,Novell.Directory.Ldap.LdapSearchConstraints)">
            <summary> Asynchronously performs the search specified by the parameters,
            also allowing specification of constraints for the search (such
            as the maximum number of entries to find or the maximum time to
            wait for search results).
            
            </summary>
            <param name="base">          The base distinguished name to search from.
            
            </param>
            <param name="scope">         The scope of the entries to search. The following
            are the valid options:
            <ul>
            <li>SCOPE_BASE - searches only the base DN</li>
            
            <li>SCOPE_ONE - searches only entries under the base DN</li>
            
            <li>SCOPE_SUB - searches the base DN and all entries
            within its subtree</li>
            </ul>
            </param>
            <param name="filter">        The search filter specifying the search criteria.
            
            </param>
            <param name="attrs">         The names of attributes to retrieve.
            
            </param>
            <param name="typesOnly">     If true, returns the names but not the values of
            the attributes found.  If false, returns the
            names and values for attributes found.
            
            </param>
            <param name="queue">         The queue for messages returned from a server in
            response to this request. If it is null, a
            queue object is created internally.
            
            </param>
            <param name="cons">          The constraints specific to the search.
            
            </param>
            <exception> LdapException A general exception which includes an error
            message and an Ldap error code.
            </exception>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapConnection.Search(Novell.Directory.Ldap.LdapUrl)">
            <summary> Synchronously performs the search specified by the Ldap URL, returning
            an enumerable LdapSearchResults object.
            
            </summary>
            <param name="toGet">The Ldap URL specifying the entry to read.
            
            </param>
            <exception> LdapException A general exception which includes an error
            message and an Ldap error code.
            </exception>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapConnection.Search(Novell.Directory.Ldap.LdapUrl,Novell.Directory.Ldap.LdapSearchConstraints)">
            <summary> Synchronously perfoms the search specified by the Ldap URL, using
            the specified search constraints (such as the maximum number of
            entries to find or the maximum time to wait for search results).
            
            When this method is called, a new connection is created
            automatically, using the host and port specified in the URL. After
            all search results have been received from the server, the method
            closes the connection (in other words, it disconnects from the Ldap
            server).
            
            As part of the search constraints, a choice can be made as to whether
            to have the results delivered all at once or in smaller batches. If
            the results are to be delivered in smaller batches, each iteration
            blocks only until the next batch of results is returned.
            
            
            </summary>
            <param name="toGet">         Ldap URL specifying the entry to read.
            
            </param>
            <param name="cons">          The constraints specific to the search.
            
            </param>
            <exception> LdapException A general exception which includes an error
            message and an Ldap error code.
            </exception>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapConnection.SendRequest(Novell.Directory.Ldap.LdapMessage,Novell.Directory.Ldap.LdapMessageQueue)">
            <summary> Sends an Ldap request to a directory server.
            
            The specified the Ldap request is sent to the directory server
            associated with this connection using default constraints. An Ldap
            request object is a subclass {@link LdapMessage} with the operation
            type set to one of the request types. You can build a request by using
            the request classes found in this package
            
            You should note that, since Ldap requests sent to the server
            using sendRequest are asynchronous, automatic referral following
            does not apply to these requests.
            
            </summary>
            <param name="request">The Ldap request to send to the directory server.
            </param>
            <param name="queue">   The queue for messages returned from a server in
            response to this request. If it is null, a
            queue object is created internally.
            </param>
            <exception>     LdapException A general exception which includes an error
            message and an Ldap error code.
            
            </exception>
            <seealso cref="P:Novell.Directory.Ldap.LdapMessage.Type">
            </seealso>
            <seealso cref="M:Novell.Directory.Ldap.Rfc2251.RfcLdapMessage.isRequest">
            </seealso>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapConnection.SendRequest(Novell.Directory.Ldap.LdapMessage,Novell.Directory.Ldap.LdapMessageQueue,Novell.Directory.Ldap.LdapConstraints)">
            <summary> Sends an Ldap request to a directory server.
            
            The specified the Ldap request is sent to the directory server
            associated with this connection. An Ldap request object is an
            {@link LdapMessage} with the operation type set to one of the request
            types. You can build a request by using the request classes found in this
            package
            
            You should note that, since Ldap requests sent to the server
            using sendRequest are asynchronous, automatic referral following
            does not apply to these requests.
            
            </summary>
            <param name="request">The Ldap request to send to the directory server.
            </param>
            <param name="queue">   The queue for messages returned from a server in
            response to this request. If it is null, a
            queue object is created internally.
            </param>
            <param name="cons">   The constraints that apply to this request
            </param>
            <exception>     LdapException A general exception which includes an error
            message and an Ldap error code.
            
            </exception>
            <seealso cref="P:Novell.Directory.Ldap.LdapMessage.Type">
            </seealso>
            <seealso cref="M:Novell.Directory.Ldap.Rfc2251.RfcLdapMessage.isRequest">
            </seealso>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapConnection.SendRequestToServer(Novell.Directory.Ldap.LdapMessage,System.Int32,Novell.Directory.Ldap.LdapResponseQueue,Novell.Directory.Ldap.Utilclass.BindProperties)">
            <summary> Locates the appropriate message agent and sends
            the Ldap request to a directory server.
            
            </summary>
            <param name="msg">the message to send
            
            </param>
            <param name="timeout">the timeout value
            
            </param>
            <param name="queue">the response queue or null
            
            </param>
            <returns> the LdapResponseQueue for this request
            
            </returns>
            <exception> LdapException A general exception which includes an error
            message and an Ldap error code.
            </exception>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapConnection.getReferralConnection(System.String[])">
            <summary> get an LdapConnection object so that we can follow a referral.
            This function is never called if cons.getReferralFollowing() returns
            false.
            
            </summary>
            <param name="referrals">the array of referral strings
            
            
            </param>
            <returns> The referralInfo object
            
            </returns>
            <exception> LdapReferralException A general exception which includes
            an error message and an Ldap error code.
            </exception>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapConnection.chkResultCode(Novell.Directory.Ldap.LdapMessageQueue,Novell.Directory.Ldap.LdapConstraints,Novell.Directory.Ldap.LdapResponse)">
            <summary> Check the result code and throw an exception if needed.
            
            If referral following is enabled, checks if we need to
            follow a referral
            
            </summary>
            <param name="queue">- the message queue of the current response
            
            </param>
            <param name="cons">- the constraints that apply to the request
            
            </param>
            <param name="response">- the LdapResponse to check
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapConnection.chaseReferral(Novell.Directory.Ldap.LdapMessageQueue,Novell.Directory.Ldap.LdapConstraints,Novell.Directory.Ldap.LdapMessage,System.String[],System.Int32,System.Boolean,System.Collections.ArrayList)">
            <summary> Follow referrals if necessary referral following enabled.
            This function is called only by synchronous requests.
            Search responses come here only if referral following is
            enabled and if we are processing a SearchResultReference
            or a Response with a status of REFERRAL, i.e. we are
            going to follow a referral.
            
            This functions recursively follows a referral until a result
            is returned or until the hop limit is reached.
            
            </summary>
            <param name="queue">The LdapResponseQueue for this request
            
            </param>
            <param name="cons">The constraints that apply to the request
            
            </param>
            <param name="msg">The referral or search reference response message
            
            </param>
            <param name="initialReferrals">The referral array returned from the
            initial request.
            
            </param>
            <param name="hopCount">the number of hops already used while
            following this referral
            
            </param>
            <param name="searchReference">true if the message is a search reference
            
            </param>
            <param name="connectionList">An optional array list used to store
            the LdapConnection objects used in following the referral.
            
            </param>
            <returns> The array list used to store the all LdapConnection objects
            used in following the referral.  The list will be empty
            if there were none.
            
            </returns>
            <exception> LdapException A general exception which includes an error
            message and an Ldap error code.
            </exception>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapConnection.rebuildRequest(Novell.Directory.Ldap.LdapMessage,Novell.Directory.Ldap.LdapUrl,System.Boolean)">
            <summary> Builds a new request replacing dn, scope, and filter where approprate
            
            </summary>
            <param name="msg">the original LdapMessage to build the new request from
            
            </param>
            <param name="url">the referral url
            
            </param>
            <returns> a new LdapMessage with appropriate information replaced
            
            </returns>
            <exception> LdapException A general exception which includes an error
            message and an Ldap error code.
            </exception>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapConnection.FetchSchema(System.String)">
            <summary> Retrieves the schema associated with a particular schema DN in the
            directory server.
            The schema DN for a particular entry is obtained by calling the
            getSchemaDN method of LDAPConnection
            
            </summary>
            <param name="schemaDN">The schema DN used to fetch the schema.
            
            </param>
            <returns>    An LDAPSchema entry containing schema attributes.  If the
            entry contains no schema attributes then the returned LDAPSchema object
            will be empty.
            
            </returns>
            <exception> LDAPException     This exception occurs if the schema entry
            cannot be retrieved with this connection.
            </exception>
            <seealso cref="M:Novell.Directory.Ldap.LdapConnection.GetSchemaDN">
            </seealso>
            <seealso cref="M:Novell.Directory.Ldap.LdapConnection.GetSchemaDN(System.String)">
            </seealso>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapConnection.GetSchemaDN">
            <summary> Retrieves the Distiguished Name (DN) for the schema advertised in the
            root DSE of the Directory Server.
            
            The DN can be used with the methods fetchSchema and modify to retreive
            and extend schema definitions.  The schema entry is located by reading
            subschemaSubentry attribute of the root DSE.  This is equivalent to
            calling {@link #getSchemaDN(String) } with the DN parameter as an empty
            string: <code>getSchemaDN("")</code>.
            
            
            </summary>
            <returns>     Distinguished Name of a schema entry in effect for the
            Directory.
            </returns>
            <exception> LDAPException     This exception occurs if the schema DN
            cannot be retrieved, or if the subschemaSubentry attribute associated
            with the root DSE contains multiple values.
            
            </exception>
            <seealso cref="M:Novell.Directory.Ldap.LdapConnection.FetchSchema(System.String)">
            </seealso>
            <seealso cref="M:Novell.Directory.Ldap.LdapConnection.Modify(System.String,Novell.Directory.Ldap.LdapModification)">
            </seealso>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapConnection.GetSchemaDN(System.String)">
            <summary> Retrieves the Distiguished Name (DN) of the schema associated with a
            entry in the Directory.
            
            The DN can be used with the methods fetchSchema and modify to retreive
            and extend schema definitions.  Reads the subschemaSubentry of the entry
            specified.
            
            </summary>
            <param name="dn">    Distinguished Name of any entry.  The subschemaSubentry
            attribute is queried from this entry.
            
            </param>
            <returns>      Distinguished Name of a schema entry in effect for the entry
            identified by <code>dn</code>.
            
            </returns>
            <exception> LDAPException     This exception occurs if a null or empty
            value is passed as dn, if the subschemasubentry attribute cannot
            be retrieved, or the subschemasubentry contains multiple values.
            
            </exception>
            <seealso cref="M:Novell.Directory.Ldap.LdapConnection.FetchSchema(System.String)">
            </seealso>
            <seealso cref="M:Novell.Directory.Ldap.LdapConnection.Modify(System.String,Novell.Directory.Ldap.LdapModification)">
            </seealso>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapConnection.ProtocolVersion">
            <summary> Returns the protocol version uses to authenticate.
            
             0 is returned if no authentication has been performed.
            
            </summary>
            <returns> The protol version used for authentication or 0
            not authenticated.
            
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapConnection.AuthenticationDN">
            <summary> Returns the distinguished name (DN) used for as the bind name during
            the last successful bind operation.  <code>null</code> is returned
            if no authentication has been performed or if the bind resulted in
            an aonymous connection.
            
            </summary>
            <returns> The distinguished name if authenticated; otherwise, null.
            
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapConnection.AuthenticationMethod">
            <summary> Returns the method used to authenticate the connection. The return
            value is one of the following:
            
            <ul>
            <li>"none" indicates the connection is not authenticated.</li>
            
            
            <li>"simple" indicates simple authentication was used or that a null
            or empty authentication DN was specified.</li>
            
            <li>"sasl" indicates that a SASL mechanism was used to authenticate</li>
            </ul>
            
            </summary>
            <returns> The method used to authenticate the connection.
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapConnection.SaslBindProperties">
            <summary> Returns the properties if any specified on binding with a
            SASL mechanism.
            
             Null is returned if no authentication has been performed
            or no authentication Map is present.
            
            </summary>
            <returns> The bind properties Map Object used for SASL bind or null if
            the connection is not present or not authenticated.
            
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapConnection.SaslBindCallbackHandler">
            <summary> Returns the call back handler if any specified on binding with a
            SASL mechanism.
            
             Null is returned if no authentication has been performed
            or no authentication call back handler is present.
            
            </summary>
            <returns> The call back handler used for SASL bind or null if the
            object is not present or not authenticated.
            
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapConnection.Constraints">
            <summary> Returns a copy of the set of constraints associated with this
            connection. These constraints apply to all operations performed
            through this connection (unless a different set of constraints is
            specified when calling an operation method).
            
            </summary>
            <returns> The set of default contraints that apply to this connection.
            
            </returns>
            <summary> Sets the constraints that apply to all operations performed through
            this connection (unless a different set of constraints is specified
            when calling an operation method).  An LdapSearchConstraints object
            which is passed to this method sets all constraints, while an
            LdapConstraints object passed to this method sets only base constraints.
            
            </summary>
            <param name="cons"> An LdapConstraints or LdapSearchConstraints Object
            containing the contstraint values to set.
            
            </param>
            <seealso cref="P:Novell.Directory.Ldap.LdapConnection.Constraints">
            </seealso>
            <seealso cref="P:Novell.Directory.Ldap.LdapConnection.SearchConstraints">
            </seealso>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapConnection.Host">
            <summary> Returns the host name of the Ldap server to which the object is or
            was last connected, in the format originally specified.
            
            </summary>
            <returns> The host name of the Ldap server to which the object last
            connected or null if the object has never connected.
            
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapConnection.Port">
            <summary> Returns the port number of the Ldap server to which the object is or
            was last connected.
            
            </summary>
            <returns> The port number of the Ldap server to which the object last
            connected or -1 if the object has never connected.
            
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapConnection.SearchConstraints">
            <summary> Returns a copy of the set of search constraints associated with this
            connection. These constraints apply to search operations performed
            through this connection (unless a different set of
            constraints is specified when calling the search operation method).
            
            </summary>
            <returns> The set of default search contraints that apply to
            this connection.
            
            </returns>
            <seealso cref="P:Novell.Directory.Ldap.LdapConnection.Constraints">
            </seealso>
            <seealso cref="T:Novell.Directory.Ldap.LdapSearchConstraints">
            </seealso>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapConnection.SecureSocketLayer">
            <summary>  Indicates whther the perform Secure Operation or not
            </summary>
            
            <returns> 
             True if SSL is on
             False if its not on 
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapConnection.Bound">
            <summary> Indicates whether the object has authenticated to the connected Ldap
            server.
            
            </summary>
            <returns> True if the object has authenticated; false if it has not
            authenticated.
            
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapConnection.Connected">
            <summary> Indicates whether the connection represented by this object is open
            at this time.
            
            </summary>
            <returns>  True if connection is open; false if the connection is closed.
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapConnection.TLS">
             <summary> Indicatates if the connection is protected by TLS.
            
             </summary>
             <returns> If startTLS has completed this method returns true.
             If stopTLS has completed or start tls failed, this method returns false.
             </returns>
             <returns>  True if the connection is protected by TLS.
            
             </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapConnection.ResponseControls">
            <summary>  Returns the Server Controls associated with the most recent response
            to a synchronous request on this connection object, or null
            if the latest response contained no Server Controls. The method
            always returns null for asynchronous requests. For asynchronous
            requests, the response controls are available in LdapMessage.
            
            </summary>
            <returns> The server controls associated with the most recent response
            to a synchronous request or null if the response contains no server
            controls.
            
            </returns>
            <seealso cref="P:Novell.Directory.Ldap.LdapMessage.Controls">
            </seealso>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapConnection.Connection">
            <summary> Return the Connection object associated with this LdapConnection
            
            </summary>
            <returns> the Connection object
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapConnection.ConnectionName">
            <summary> Return the Connection object name associated with this LdapConnection
            
            </summary>
            <returns> the Connection object name
            </returns>
        </member>
        <member name="T:Novell.Directory.Ldap.LdapConstraints">
            <summary> Defines options controlling Ldap operations on the directory.
            
            An LdapConstraints object is always associated with an LdapConnection
            object; its values can be changed with LdapConnection.setConstraints, or
            overridden by passing an LdapConstraints object to an operation.
            
            </summary>
            <seealso cref="P:Novell.Directory.Ldap.LdapConnection.Constraints">
            </seealso>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapConstraints.#ctor">
            <summary> Constructs a new LdapConstraints object that specifies the default
            set of constraints.
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapConstraints.#ctor(System.Int32,System.Boolean,Novell.Directory.Ldap.LdapReferralHandler,System.Int32)">
            <summary> Constructs a new LdapConstraints object specifying constraints that
            control wait time, and referral handling.
            
            </summary>
            <param name="msLimit"> The maximum time in milliseconds to wait for results.
            The default is 0, which means that there is no
            maximum time limit. This limit is enforced for an
            operation by the API, not by the server.
            The operation will be abandoned and terminated by the
            API with a result code of LdapException.Ldap_TIMEOUT
            if the operation exceeds the time limit.
            
            </param>
            <param name="doReferrals">Determines whether to automatically follow
            referrals or not. Specify true to follow
            referrals automatically, and false to throw
            an LdapReferralException if the server responds
            with a referral. False is the default value.
            The way referrals are followed automatically is
            determined by the setting of the handler parameter.
            It is ignored for asynchronous operations.
            
            </param>
            <param name="handler">  The custom authentication handler called when
            LdapConnection needs to authenticate, typically on
            following a referral.  A null may be specified to
            indicate default authentication processing, i.e.
            referrals are followed with anonymous authentication.
            The handler object may be an implemention of either the
            LdapBindHandler or LdapAuthHandler interface.
            The implementation of these interfaces determines how
            authentication is performed when following referrals.
            It is ignored for asynchronous operations.
            
            </param>
            <param name="hop_limit">The maximum number of referrals to follow in a
            sequence during automatic referral following.
            The default value is 10. A value of 0 means no limit.
            The operation will be abandoned and terminated by the
            API with a result code of
            LdapException.REFERRAL_LIMIT_EXCEEDED if the
            number of referrals in a sequence exceeds the limit.
            It is ignored for asynchronous operations.
            
            </param>
            <seealso cref="F:Novell.Directory.Ldap.LdapException.Ldap_TIMEOUT">
            </seealso>
            <seealso cref="F:Novell.Directory.Ldap.LdapException.REFERRAL_LIMIT_EXCEEDED">
            </seealso>
            <seealso cref="F:Novell.Directory.Ldap.LdapException.REFERRAL">
            </seealso>
            <seealso cref="T:Novell.Directory.Ldap.LdapReferralException">
            </seealso>
            <seealso cref="T:Novell.Directory.Ldap.LdapBindHandler">
            </seealso>
            <seealso cref="T:Novell.Directory.Ldap.LdapAuthHandler">
            </seealso>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapConstraints.getControls">
            <summary> Returns the controls to be sent to the server.
            
            </summary>
            <returns> The controls to be sent to the server, or null if none.
            
            </returns>
            <seealso cref="N:Novell.Directory.Ldap.Controls">
            </seealso>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapConstraints.getProperty(System.String)">
            <summary> Gets a property of the constraints object which has been
            assigned with {@link #setProperty(String, Object)}.
            
            </summary>
            <param name="name">  Name of the property to be returned.
            
            </param>
            <returns> the object associated with the property,
            or <code>null</code> if the property is not set.
            
            </returns>
            <seealso cref="T:System.Object">
            </seealso>
            <seealso cref="M:Novell.Directory.Ldap.LdapConnection.getProperty(System.String)">
            </seealso>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapConstraints.getReferralHandler">
            <summary> Returns an object that can process authentication for automatic
            referral handling.
            
            It may be null.
            
            </summary>
            <returns> An LdapReferralHandler object that can process authentication.
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapConstraints.setControls(Novell.Directory.Ldap.LdapControl)">
            <summary> Sets a single control to be sent to the server.
            
            </summary>
            <param name="control">    A single control to be sent to the server or
            null if none.
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapConstraints.setControls(Novell.Directory.Ldap.LdapControl[])">
            <summary> Sets controls to be sent to the server.
            
            </summary>
            <param name="controls">     An array of controls to be sent to the server or
            null if none.
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapConstraints.setProperty(System.String,System.Object)">
            <summary> Sets a property of the constraints object.
            
            No property names have been defined at this time, but the
            mechanism is in place in order to support revisional as well as
            dynamic and proprietary extensions to operation modifiers.
            
            </summary>
            <param name="name">   Name of the property to set.
            
            </param>
            <param name="value">  Value to assign to the property.
            property is not supported.
            
            @throws NullPointerException if name or value are null
            
            </param>
            <seealso cref="M:Novell.Directory.Ldap.LdapConnection.getProperty(System.String)">
            </seealso>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapConstraints.setReferralHandler(Novell.Directory.Ldap.LdapReferralHandler)">
            <summary> Specifies the object that will process authentication requests
            during automatic referral following.
            
            The default is null.
            
            </summary>
            <param name="handler">   An object that implements LdapBindHandler or
            LdapAuthHandler
            
            </param>
            <seealso cref="T:Novell.Directory.Ldap.LdapAuthHandler">
            </seealso>
            <seealso cref="T:Novell.Directory.Ldap.LdapBindHandler">
            </seealso>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapConstraints.Clone">
            <summary> Clones an LdapConstraints object.
            
            </summary>
            <returns> An LdapConstraints object.
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapConstraints.HopLimit">
            <summary> Returns the maximum number of referrals to follow during automatic
            referral following.  The operation will be abandoned and terminated by
            the API with a result code of LdapException.REFERRAL_LIMIT_EXCEEDED
            if the number of referrals in a sequence exceeds the limit.
            It is ignored for asynchronous operations.
            
            </summary>
            <returns> The maximum number of referrals to follow in sequence
            
            </returns>
            <seealso cref="P:Novell.Directory.Ldap.LdapConstraints.HopLimit">
            </seealso>
            <seealso cref="F:Novell.Directory.Ldap.LdapException.REFERRAL_LIMIT_EXCEEDED">
            </seealso>
            <summary> Sets the maximum number of referrals to follow in sequence during
            automatic referral following.
            
            </summary>
            <param name="hop_limit">The maximum number of referrals to follow in a
            sequence during automatic referral following.
            The default value is 10. A value of 0 means no limit.
            The operation will be abandoned and terminated by the
            API with a result code of
            LdapException.REFERRAL_LIMIT_EXCEEDED if the
            number of referrals in a sequence exceeds the limit.
            It is ignored for asynchronous operations.
            
            </param>
            <seealso cref="F:Novell.Directory.Ldap.LdapException.REFERRAL_LIMIT_EXCEEDED">
            </seealso>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapConstraints.Properties">
            <summary> Gets all the properties of the constraints object which has been
            assigned with {@link #setProperty(String, Object)}.
            A value of <code>null</code> is returned if no properties are defined.
            
            </summary>
            <seealso cref="T:System.Object">
            </seealso>
            <seealso cref="M:Novell.Directory.Ldap.LdapConnection.getProperty(System.String)">
            </seealso>
            <summary> Sets all the properties of the constraints object.
            
            </summary>
            <param name="props">the properties represented by the Hashtable object to set.
            </param>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapConstraints.ReferralFollowing">
            <summary> Specified whether or not referrals are followed automatically.
            
            </summary>
            <returns>  True if referrals are followed automatically, or
            false if referrals throw an LdapReferralException.
            </returns>
            <summary> Specifies whether referrals are followed automatically or if
            referrals throw an LdapReferralException.
            
            Referrals of any type other than to an Ldap server (for example, a
            referral URL other than ldap://something) are ignored on automatic
            referral following. 
            
             The default is false.
            
            </summary>
            <param name="doReferrals">   True to follow referrals automatically.
            False to throw an LdapReferralException if
            the server returns a referral.
            </param>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapConstraints.TimeLimit">
            <summary> Returns the maximum number of milliseconds to wait for any operation
            under these constraints.
            
            If the value is 0, there is no maximum time limit on waiting
            for operation results. The actual granularity of the timeout depends
            platform.  This limit is enforced the the API on an
            operation, not by the server.
            The operation will be abandoned and terminated by the
            API with a result code of LdapException.Ldap_TIMEOUT if the
            operation exceeds the time limit.
            
            </summary>
            <returns> The maximum number of milliseconds to wait for the operation.
            
            </returns>
            <seealso cref="F:Novell.Directory.Ldap.LdapException.Ldap_TIMEOUT">
            </seealso>
            <summary> Sets the maximum number of milliseconds the client waits for
            any operation under these constraints to complete.
            
            If the value is 0, there is no maximum time limit enforced by the
            API on waiting for the operation results. The actual granularity of
            the timeout depends on the platform.
            The operation will be abandoned and terminated by the
            API with a result code of LdapException.Ldap_TIMEOUT if the
            operation exceeds the time limit.
            
            </summary>
            <param name="msLimit">     The maximum milliseconds to wait.
            
            </param>
            <seealso cref="F:Novell.Directory.Ldap.LdapException.Ldap_TIMEOUT">
            </seealso>
        </member>
        <member name="T:Novell.Directory.Ldap.LdapControl">
            <summary>  Encapsulates optional additional parameters or constraints to be applied to
            an Ldap operation.
            
            When included with LdapConstraints or LdapSearchConstraints
            on an LdapConnection or with a specific operation request, it is
            sent to the server along with operation requests.
            
            </summary>
            <seealso cref="P:Novell.Directory.Ldap.LdapConnection.ResponseControls">
            </seealso>
            <seealso cref="M:Novell.Directory.Ldap.LdapConstraints.getControls">
            </seealso>
            <seealso cref="M:Novell.Directory.Ldap.LdapConstraints.setControls(Novell.Directory.Ldap.LdapControl)">
            </seealso>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapControl.#ctor(System.String,System.Boolean,System.SByte[])">
            <summary> Constructs a new LdapControl object using the specified values.
            
            </summary>
            <param name="oid">    The OID of the control, as a dotted string.
            
            </param>
            <param name="critical">  True if the Ldap operation should be discarded if
            the control is not supported. False if
            the operation can be processed without the control.
            
            </param>
            <param name="values">    The control-specific data.
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapControl.#ctor(Novell.Directory.Ldap.Rfc2251.RfcControl)">
            <summary> Create an LdapControl from an existing control.</summary>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapControl.Clone">
            <summary> Returns a copy of the current LdapControl object.
            
            </summary>
            <returns> A copy of the current LdapControl object.
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapControl.getValue">
            <summary> Returns the control-specific data of the object.
            
            </summary>
            <returns> The control-specific data of the object as a byte array,
            or null if the control has no data.
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapControl.setValue(System.SByte[])">
            <summary> Sets the control-specific data of the object.  This method is for
            use by an extension of LdapControl.
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapControl.register(System.String,System.Type)">
            <summary> Registers a class to be instantiated on receipt of a control with the
            given OID.
            
            Any previous registration for the OID is overridden. The
            controlClass must be an extension of LdapControl.
            
            </summary>
            <param name="oid">           The object identifier of the control.
            
            </param>
            <param name="controlClass">  A class which can instantiate an LdapControl.
            </param>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapControl.ID">
            <summary> Returns the identifier of the control.
            
            </summary>
            <returns> The object ID of the control.
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapControl.Critical">
            <summary> Returns whether the control is critical for the operation.
            
            </summary>
            <returns> Returns true if the control must be supported for an associated
            operation to be executed, and false if the control is not required for
            the operation.
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapControl.Asn1Object">
            <summary> Returns the RFC 2251 Control object.
            
            </summary>
            <returns> An ASN.1 RFC 2251 Control.
            </returns>
        </member>
        <member name="T:Novell.Directory.Ldap.LdapDeleteRequest">
            <summary> Represents a request to delete an entry.
            
            </summary>
            <seealso cref="M:Novell.Directory.Ldap.LdapConnection.SendRequest(Novell.Directory.Ldap.LdapMessage,Novell.Directory.Ldap.LdapMessageQueue)">
            </seealso>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapDeleteRequest.#ctor(System.String,Novell.Directory.Ldap.LdapControl[])">
            <summary> Constructs a request to delete an entry from the directory
            
            </summary>
            <param name="dn">the dn of the entry to delete.
            
            </param>
            <param name="cont">Any controls that apply to the abandon request
            or null if none.
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapDeleteRequest.ToString">
            <summary> Return an Asn1 representation of this delete request
            
            #return an Asn1 representation of this object
            </summary>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapDeleteRequest.DN">
            <summary> Returns of the dn of the entry to delete from the directory
            
            </summary>
            <returns> the dn of the entry to delete
            </returns>
        </member>
        <member name="T:Novell.Directory.Ldap.LdapDITContentRuleSchema">
            <summary>  Represents a DIT (Directory Information Tree) content rule
            in a directory schema.
            
            The LdapDITContentRuleSchema class is used to discover or modify
            additional auxiliary classes, mandatory and optional attributes, and
            restricted attributes in effect for an object class.
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapDITContentRuleSchema.#ctor(System.String[],System.String,System.String,System.Boolean,System.String[],System.String[],System.String[],System.String[])">
            <summary> Constructs a DIT content rule for adding to or deleting from the
            schema.
            
            </summary>
            <param name="names">       The names of the content rule.
            
            </param>
            <param name="oid">        The unique object identifier of the content rule -
            in dotted numerical format.
            
            </param>
            <param name="description">The optional description of the content rule.
            
            </param>
            <param name="obsolete">   True if the content rule is obsolete.
            
            </param>
            <param name="auxiliary">  A list of auxiliary object classes allowed for
            an entry to which this content rule applies.
            These may either be specified by name or
            numeric oid.
            
            </param>
            <param name="required">   A list of attributes that an entry
            to which this content rule applies must
            contain in addition to its normal set of
            mandatory attributes. These attributes may be
            specified by either name or numeric oid.
            
            </param>
            <param name="optional">   A list of attributes that an entry
            to which this content rule applies may contain
            in addition to its normal set of optional
            attributes. These attributes may be specified by
            either name or numeric oid.
            
            </param>
            <param name="precluded">  A list, consisting of a subset of the optional
            attributes of the structural and
            auxiliary object classes which are precluded
            from an entry to which this content rule
            applies. These may be specified by either name
            or numeric oid.
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapDITContentRuleSchema.#ctor(System.String)">
            <summary> Constructs a DIT content rule from the raw string value returned from a
            schema query for dITContentRules.
            
            </summary>
            <param name="raw">        The raw string value returned from a schema query
            for content rules.
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapDITContentRuleSchema.formatString">
            <summary> Returns a string in a format suitable for directly adding to a
            directory, as a value of the particular schema element class.
            
            </summary>
            <returns> A string representation of the class' definition.
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapDITContentRuleSchema.AuxiliaryClasses">
            <summary> Returns the list of allowed auxiliary classes.
            
            </summary>
            <returns> The list of allowed auxiliary classes.
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapDITContentRuleSchema.RequiredAttributes">
            <summary> Returns the list of additional required attributes for an entry
            controlled by this content rule.
            
            </summary>
            <returns> The list of additional required attributes.
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapDITContentRuleSchema.OptionalAttributes">
            <summary> Returns the list of additional optional attributes for an entry
            controlled by this content rule.
            
            </summary>
            <returns> The list of additional optional attributes.
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapDITContentRuleSchema.PrecludedAttributes">
            <summary> Returns the list of precluded attributes for an entry controlled by
            this content rule.
            
            </summary>
            <returns> The list of precluded attributes.
            </returns>
        </member>
        <member name="T:Novell.Directory.Ldap.LdapDITStructureRuleSchema">
            <summary> Represents the definition of a specific DIT (Directory Information Tree)
            structure rule in the directory schema.
            
            The LdapDITStructureRuleSchema class represents the definition of a DIT
            Structure Rule.  It is used to discover or modify which
            object classes a particular object class may be subordinate to in the DIT.
            
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapDITStructureRuleSchema.#ctor(System.String[],System.Int32,System.String,System.Boolean,System.String,System.String[])">
            <summary>Constructs a DIT structure rule for adding to or deleting from the
            schema.
            
            </summary>
            <param name="names">      The names of the structure rule.
            
            </param>
            <param name="ruleID">     The unique identifier of the structure rule. NOTE:
            this is an integer, not a dotted numerical
            identifier. Structure rules aren't identified
            by OID.
            
            </param>
            <param name="description">An optional description of the structure rule.
            
            </param>
            <param name="obsolete">   True if the structure rule is obsolete.
            
            </param>
            <param name="nameForm">   Either the identifier or name of a name form.
            This is used to indirectly refer to the object
            class that this structure rule applies to.
            
            </param>
            <param name="superiorIDs">A list of superior structure rules - specified
            by their integer ID. The object class
            specified by this structure rule (via the
            nameForm parameter) may only be subordinate in
            the DIT to object classes of those represented
            by the structure rules here; it may be null.
            
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapDITStructureRuleSchema.#ctor(System.String)">
            <summary> Constructs a DIT structure rule from the raw string value returned from
            a schema query for dITStructureRules.
            
            </summary>
            <param name="raw">        The raw string value returned from a schema
            query for dITStructureRules.
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapDITStructureRuleSchema.formatString">
            <summary> Returns a string in a format suitable for directly adding to a
            directory, as a value of the particular schema element class.
            
            </summary>
            <returns> A string representation of the class' definition.
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapDITStructureRuleSchema.RuleID">
            <summary> Returns the rule ID for this structure rule.
            
            The getRuleID method returns an integer rather than a dotted
            decimal OID. Objects of this class do not have an OID,
            thus getID can return null. 
            
            
            </summary>
            <returns> The rule ID for this structure rule.
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapDITStructureRuleSchema.NameForm">
            <summary> Returns the NameForm that this structure rule controls.
            
            You can get the actual object class that this structure rule controls
            by calling the getNameForm.getObjectClass method.
            
            </summary>
            <returns> The NameForm that this structure rule controls.
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapDITStructureRuleSchema.Superiors">
            <summary> Returns a list of all structure rules that are superior to this
            structure rule.
            
            To resolve to an object class, you need to first
            resolve the superior ID to another structure rule, then call
            the getNameForm.getObjectClass method on that structure rule.
            
            </summary>
            <returns> A list of all structure rules that are superior to this structure rule.
            </returns>
        </member>
        <member name="T:Novell.Directory.Ldap.LdapDN">
            <summary>  A utility class to facilitate composition and deomposition
            of distinguished names DNs.
            
            Specifies methods for manipulating a distinguished name DN
            and a relative distinguished name RDN.
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapDN.equals(System.String,System.String)">
            <summary> Compares the two strings per the distinguishedNameMatch equality matching
            (using case-ignore matching).  IllegalArgumentException is thrown if one
            or both DNs are invalid.  UnsupportedOpersationException is thrown if the
            API implementation is not able to detemine if the DNs match or not.
            
            </summary>
            <param name="dn1">           String form of the first DN to compare.
            
            </param>
            <param name="dn2">           String form of the second DN to compare.
            
            </param>
            <returns> Returns true if the two strings correspond to the same DN; false
            if the DNs are different.
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapDN.escapeRDN(System.String)">
            <summary> Returns the RDN after escaping the characters requiring escaping.
            
            For example, for the rdn "cn=Acme, Inc", the escapeRDN method
            returns "cn=Acme\, Inc".
            
            escapeRDN escapes the AttributeValue by inserting '\' before the
            following chars: * ',' '+' '"' '\' 'LESSTHAN' 'GREATERTHAN' ';' 
            '#' if it comes at the beginning of the string, and 
            ' ' (space) if it comes at the beginning or the end of a string.
            Note that single-valued attributes can be used because of ambiguity. See
            RFC 2253 
            
            </summary>
            <param name="rdn">           The RDN to escape.
            
            </param>
            <returns> The RDN with escaping characters.
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapDN.explodeDN(System.String,System.Boolean)">
            <summary> Returns the individual components of a distinguished name (DN).
            
            </summary>
            <param name="dn">       The distinguished name, for example, "cn=Babs
            Jensen,ou=Accounting,o=Acme,c=US"
            
            </param>
            <param name="noTypes">  If true, returns only the values of the
            components and not the names.  For example, "Babs
            Jensen", "Accounting", "Acme", "US" instead of
            "cn=Babs Jensen", "ou=Accounting", "o=Acme", and
            "c=US".
            
            </param>
            <returns> An array of strings representing the individual components
            of a DN, or null if the DN is not valid.
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapDN.explodeRDN(System.String,System.Boolean)">
            <summary> Returns the individual components of a relative distinguished name
            (RDN), normalized.
            
            </summary>
            <param name="rdn">    The relative distinguished name, or in other words,
            the left-most component of a distinguished name.
            
            </param>
            <param name="noTypes">  If true, returns only the values of the
            components, and not the names of the component, for
            example "Babs Jensen" instead of "cn=Babs Jensen".
            
            </param>
            <returns> An array of strings representing the individual components
            of an RDN, or null if the RDN is not a valid RDN.
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapDN.isValid(System.String)">
            <summary> Returns true if the string conforms to distinguished name syntax.</summary>
            <param name="dn">   String to evaluate fo distinguished name syntax.
            </param>
            <returns>      true if the dn is valid.
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapDN.normalize(System.String)">
            <summary> Returns the DN normalized by removal of non-significant space characters
            as per RFC 2253, section4.
            
            </summary>
            <returns>      a normalized string
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapDN.unescapeRDN(System.String)">
            <summary> Returns the RDN after unescaping the characters requiring escaping.
            
            For example, for the rdn "cn=Acme\, Inc", the unescapeRDN method
            returns "cn=Acme, Inc".
            unescapeRDN unescapes the AttributeValue by
            removing the '\' when the next character fits the following:
            ',' '+' '"' '\' 'LESSTHAN' 'GREATERTHAN' ';'
            '#' if it comes at the beginning of the Attribute Name
            (without the '\').
            ' ' (space) if it comes at the beginning or the end of the Attribute Name
            
            </summary>
            <param name="rdn">           The RDN to unescape.
            
            </param>
            <returns> The RDN with the escaping characters removed.
            </returns>
        </member>
        <member name="T:Novell.Directory.Ldap.LdapDSConstants">
            <summary> LDAPDSConstants.java contains bit values for [Entry Rights], [All attribute
            Rights], attribute rights, and entry flags in Novell eDirectory 
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapDSConstants.LDAP_DS_ENTRY_BROWSE">
            <summary> Browse right.
            
            <p>Allows a trustee to discover objects in the Novell eDirectory tree. 
            </p>
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapDSConstants.LDAP_DS_ENTRY_ADD">
            <summary> Creation right .
            
            <p>Allows a trustee to create child objects (new objects that are
            subordinate to the object in the Novell eDirectory tree). </p>
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapDSConstants.LDAP_DS_ENTRY_DELETE">
            <summary> Delete right.
            
            <p>Allows a trustee to delete an object. This right does not allow a 
            trustee to delete a container object that has subordinate objects. </p>
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapDSConstants.LDAP_DS_ENTRY_RENAME">
            <summary> Rename right.
            
            <p>Allows a trustee to rename the object.</p>
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapDSConstants.LDAP_DS_ENTRY_SUPERVISOR">
            <summary> Supercisor rights.
            
            <p>Gives a trustee all rights to an object and its attributes.</p>
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapDSConstants.LDAP_DS_ENTRY_INHERIT_CTL">
            <summary> Inherit ACL.
            
            <p>Allows a trustee to inherit the rights granted in the ACL
            and exercise them on subordinate objects.</p>
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapDSConstants.LDAP_DS_ATTR_COMPARE">
            <summary> Attribute compare.
            
            <p>Allows a trustee to compare a value with an attribute's value. This 
            allows the trustee to see if the attribute contains the value without 
            having rights to see the value.</p>
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapDSConstants.LDAP_DS_ATTR_READ">
            <summary> Attribute read.
            
            <p>Allows a trustee to read an attribute value. This right confers
            the Compare right.</p>
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapDSConstants.LDAP_DS_ATTR_WRITE">
            <summary> Attribute write.
            
            <p>Allows a trustee to add, delete, or modify an attribute value. This 
            right also gives the trustee the Self (Add or Delete Self) right.</p>
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapDSConstants.LDAP_DS_ATTR_SELF">
            <summary> Self rights.
            
            <p>Allows a trustee to add or delete its name as an attribute value on 
            those attributes that take object names as their values.</p>
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapDSConstants.LDAP_DS_ATTR_SUPERVISOR">
            <summary> All attribute rights.
            
            <p>Gives a trustee all rights to the object's attributes.</p>
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapDSConstants.LDAP_DS_ATTR_INHERIT_CTL">
            <summary> inherit the ACL rights.
            
            <p>Allows a trustee to inherit the rights granted in the ACL and 
            exercise these attribute rights on subordinate objects.</p>
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapDSConstants.LDAP_DS_DYNAMIC_ACL">
            <summary> dynamic ACL.
            
            <p>This bit will be set if the trustee in the ACL is a dynamic group 
            and its dynamic members should be considered for ACL rights 
            calculation purposes. If this bit is reset, the trustee's static 
            members alone will be considered for rights calculation purposes.</p>
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapDSConstants.LDAP_DS_ALIAS_ENTRY">
            <summary> Alias object.
            
            <p>Indicates that the entry is an alias object.</p>
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapDSConstants.LDAP_DS_PARTITION_ROOT">
            <summary> Partition root.
            
            <p>Indicates that the entry is the root partition.</p>
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapDSConstants.LDAP_DS_CONTAINER_ENTRY">
            <summary>Container entry.
            
            <p>Indicates that the entry is a container object and not a container
            alias.</p>
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapDSConstants.LDAP_DS_CONTAINER_ALIAS">
            <summary> Container alias.
            
            <p>Indicates that the entry is a container alias.</p>
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapDSConstants.LDAP_DS_MATCHES_LIST_FILTER">
            <summary> Matches the list.
            
            <p>Indicates that the entry matches the List filter.</p>
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapDSConstants.LDAP_DS_REFERENCE_ENTRY">
            <summary> Reference entry.
            
            <p>Indicates that the entry has been created as a reference rather than 
            an entry. The synchronization process is still running and has not 
            created an entry for the object on this replica.</p>
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapDSConstants.LDAP_DS_40X_REFERENCE_ENTRY">
            <summary> 4.0x reference entry.
            
            <p>Indicates that the entry is a reference rather than the object. The
            reference is in the older 4.0x form and appears only when upgrading </p>
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapDSConstants.LDAP_DS_BACKLINKED">
            <summary> New entry.
            
            <p>Indicates that the entry is being back linked.</p>
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapDSConstants.LDAP_DS_NEW_ENTRY">
            <summary> Temporary reference.
            
            <p>Indicates that the entry is new and replicas are still being updated.
            </p>
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapDSConstants.LDAP_DS_TEMPORARY_REFERENCE">
            <summary> Temporary reference.
            
            <p>Indicates that an external reference has been temporarily created for
            authentication; when the object logs out, the temporary reference is 
            deleted.</p>
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapDSConstants.LDAP_DS_AUDITED">
            <summary> Audited.
            
            <p>Indicates that the entry is being audited.</p>
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapDSConstants.LDAP_DS_ENTRY_NOT_PRESENT">
            <summary> Entry not present.
            
            <p>Indicates that the state of the entry is not present.</p>
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapDSConstants.LDAP_DS_ENTRY_VERIFY_CTS">
            <summary> Verify entry creation timestamp.
            
            <p>Indicates the entry's creation timestamp needs to be verified. Novell 
            eDirectory sets this flag when a replica is removed or upgraded from 
            NetWare 4.11 to NetWare 5.</p>
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapDSConstants.LDAP_DS_ENTRY_DAMAGED">
            <summary> entry damaged.
            
            <p>Indicates that the entry's information does not conform to the 
            standard format and is therefore damaged.</p>
            </summary>
        </member>
        <member name="T:Novell.Directory.Ldap.LdapEntry">
            <summary> Represents a single entry in a directory, consisting of
            a distinguished name (DN) and zero or more attributes.
            
            An instance of
            LdapEntry is created in order to add an entry to a directory, and
            instances of LdapEntry are returned on a search by enumerating an
            LdapSearchResults.
            
            </summary>
            <seealso cref="T:Novell.Directory.Ldap.LdapAttribute">
            </seealso>
            <seealso cref="T:Novell.Directory.Ldap.LdapAttributeSet">
            </seealso>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapEntry.#ctor">
            <summary> Constructs an empty entry.</summary>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapEntry.#ctor(System.String)">
            <summary> Constructs a new entry with the specified distinguished name and with
            an empty attribute set.
            
            </summary>
            <param name="dn"> The distinguished name of the entry. The
            value is not validated. An invalid distinguished
            name will cause operations using this entry to fail.
            
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapEntry.#ctor(System.String,Novell.Directory.Ldap.LdapAttributeSet)">
            <summary> Constructs a new entry with the specified distinguished name and set
            of attributes.
            
            </summary>
            <param name="dn">      The distinguished name of the new entry. The
            value is not validated. An invalid distinguished
            name will cause operations using this entry to fail.
            
            </param>
            <param name="attrs">   The initial set of attributes assigned to the
            entry.
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapEntry.getAttribute(System.String)">
            <summary> Returns the attributes matching the specified attrName.
            
            </summary>
            <param name="attrName">The name of the attribute or attributes to return.
            
            </param>
            <returns> An array of LdapAttribute objects.
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapEntry.getAttributeSet">
            <summary> Returns the attribute set of the entry.
            
            All base and subtype variants of all attributes are
            returned. The LdapAttributeSet returned may be
            empty if there are no attributes in the entry. 
            
            </summary>
            <returns> The attribute set of the entry.
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapEntry.getAttributeSet(System.String)">
            <summary> Returns an attribute set from the entry, consisting of only those
            attributes matching the specified subtypes.
            
            The getAttributeSet method can be used to extract only
            a particular language variant subtype of each attribute,
            if it exists. The "subtype" may be, for example, "lang-ja", "binary",
            or "lang-ja;phonetic". If more than one subtype is specified, separated
            with a semicolon, only those attributes with all of the named
            subtypes will be returned. The LdapAttributeSet returned may be
            empty if there are no matching attributes in the entry. 
            
            </summary>
            <param name="subtype"> One or more subtype specification(s), separated
            with semicolons. The "lang-ja" and
            "lang-en;phonetic" are valid subtype
            specifications.
            
            </param>
            <returns> An attribute set from the entry with the attributes that
            match the specified subtypes or an empty set if no attributes
            match.
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapEntry.CompareTo(System.Object)">
            <summary> Compares this object with the specified object for order.
            
            Ordering is determined by comparing normalized DN values
            (see {@link LdapEntry#getDN() } and
            {@link LdapDN#normalize(java.lang.String)}) using the
            compareTo method of the String class.  
            
            </summary>
            <param name="entry">    Entry to compare to
            
            </param>
            <returns>          A negative integer, zero, or a positive integer as this
            object is less than, equal to, or greater than the specified object.
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapEntry.ToString">
            <summary> Returns a string representation of this LdapEntry
            
            </summary>
            <returns> a string representation of this LdapEntry
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapEntry.DN">
            <summary> Returns the distinguished name of the entry.
            
            </summary>
            <returns> The distinguished name of the entry.
            </returns>
        </member>
        <member name="T:Novell.Directory.Ldap.LdapExtendedOperation">
            <summary> Encapsulates an ID which uniquely identifies a particular extended
            operation, known to a particular server, and the data associated
            with that extended operation.
            
            </summary>
            <seealso cref="M:Novell.Directory.Ldap.LdapConnection.ExtendedOperation(Novell.Directory.Ldap.LdapExtendedOperation)">
            </seealso>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapExtendedOperation.#ctor(System.String,System.SByte[])">
            <summary> Constructs a new object with the specified object ID and data.
            
            </summary>
            <param name="oid">    The unique identifier of the operation.
            
            </param>
            <param name="vals">   The operation-specific data of the operation.
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapExtendedOperation.Clone">
            <summary> Returns a clone of this object.
            
            </summary>
            <returns> clone of this object.
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapExtendedOperation.getID">
            <summary> Returns the unique identifier of the operation.
            
            </summary>
            <returns> The OID (object ID) of the operation.
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapExtendedOperation.getValue">
            <summary> Returns a reference to the operation-specific data.
            
            </summary>
            <returns> The operation-specific data.
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapExtendedOperation.setValue(System.SByte[])">
            <summary>  Sets the value for the operation-specific data.
            
            </summary>
            <param name="newVals"> The byte array of operation-specific data.
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapExtendedOperation.setID(System.String)">
            <summary>  Resets the OID for the operation to a new value
            
            </summary>
            <param name="newoid"> The new OID for the operation
            </param>
        </member>
        <member name="T:Novell.Directory.Ldap.LdapExtendedRequest">
            <summary> Represents an Ldap Extended Request.
            
            </summary>
            <seealso cref="M:Novell.Directory.Ldap.LdapConnection.SendRequest(Novell.Directory.Ldap.LdapMessage,Novell.Directory.Ldap.LdapMessageQueue)">
            </seealso> 
        </member>
        <member name="M:Novell.Directory.Ldap.LdapExtendedRequest.#ctor(Novell.Directory.Ldap.LdapExtendedOperation,Novell.Directory.Ldap.LdapControl[])">
            <summary> Constructs an LdapExtendedRequest.
            
            </summary>
            <param name="op"> The object which contains (1) an identifier of an extended
            operation which should be recognized by the particular Ldap
            server this client is connected to, and (2) an operation-
            specific sequence of octet strings or BER-encoded values.
            
            </param>
            <param name="cont">Any controls that apply to the extended request
            or null if none.
            </param>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapExtendedRequest.ExtendedOperation">
            <summary> Retrieves an extended operation from this request</summary>
            <returns> extended operation represented in this request.
            </returns>
        </member>
        <member name="T:Novell.Directory.Ldap.LdapExtendedResponse">
            <summary> 
            Encapsulates the response returned by an Ldap server on an
            asynchronous extended operation request.  It extends LdapResponse.
            
            The response can contain the OID of the extension, an octet string
            with the operation's data, both, or neither.
            </summary>
        </member>
        <member name="T:Novell.Directory.Ldap.LdapResponse">
            <summary>  A message received from an LdapServer
            in response to an asynchronous request.
            
            </summary>
            <seealso cref="M:Novell.Directory.Ldap.LdapConnection.Search(System.String,System.Int32,System.String,System.String[],System.Boolean)">
            </seealso>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapResponse.#ctor(Novell.Directory.Ldap.InterThreadException,Novell.Directory.Ldap.Utilclass.ReferralInfo)">
            <summary> Creates an LdapResponse using an LdapException.
            Used to wake up the user following an abandon.
            Note: The abandon doesn't have to be user initiated
            but may be the result of error conditions.
            
            Referral information is available if this connection created solely
            to follow a referral.
            
            </summary>
            <param name="ex"> The exception
            
            </param>
            <param name="activeReferral"> The referral actually used to create the
            connection
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapResponse.#ctor(Novell.Directory.Ldap.Rfc2251.RfcLdapMessage)">
            <summary> Creates a response LdapMessage when receiving an asynchronous
            response from a server.
            
            </summary>
            <param name="message"> The RfcLdapMessage from a server.
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapResponse.#ctor(System.Int32)">
            <summary> Creates a SUCCESS response LdapMessage. Typically the response
            comes from a source other than a BER encoded Ldap message,
            such as from DSML.  Other values which are allowed in a response
            are set to their empty values.
            
            </summary>
            <param name="type"> The message type as defined in LdapMessage.
            
            </param>
            <seealso cref="T:Novell.Directory.Ldap.LdapMessage">
            </seealso>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapResponse.#ctor(System.Int32,System.Int32,System.String,System.String,System.String[],Novell.Directory.Ldap.LdapControl[])">
            <summary> Creates a response LdapMessage from parameters. Typically the data
            comes from a source other than a BER encoded Ldap message,
            such as from DSML.
            
            </summary>
            <param name="type"> The message type as defined in LdapMessage.
            
            </param>
            <param name="resultCode"> The result code as defined in LdapException.
            
            </param>
            <param name="matchedDN">  The name of the lowest entry that was matched
            for some error result codes, an empty string
            or <code>null</code> if none.
            
            </param>
            <param name="serverMessage"> A diagnostic message returned by the server,
            an empty string or <code>null</code> if none.
            
            </param>
            <param name="referrals">  The referral URLs returned for a REFERRAL result
            code or <code>null</code> if none.
            
            </param>
            <param name="controls">   Any controls returned by the server or
            <code>null</code> if none.
            
            </param>
            <seealso cref="T:Novell.Directory.Ldap.LdapMessage">
            </seealso>
            <seealso cref="T:Novell.Directory.Ldap.LdapException">
            </seealso>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapResponse.chkResultCode">
            <summary> Checks the resultCode and throws the appropriate exception.
            
            </summary>
            <exception> LdapException A general exception which includes an error
            message and an Ldap error code.
            </exception>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapResponse.hasException">
            <summary> Indicates if this response is an embedded exception response
            
            </summary>
            <returns> true if contains an embedded Ldapexception
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapResponse.ErrorMessage">
            <summary> Returns any error message in the response.
            
            </summary>
            <returns> Any error message in the response.
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapResponse.MatchedDN">
            <summary> Returns the partially matched DN field from the server response,
            if the response contains one.
            
            </summary>
            <returns> The partially matched DN field, if the response contains one.
            
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapResponse.Referrals">
            <summary> Returns all referrals in a server response, if the response contains any.
            
            </summary>
            <returns> All the referrals in the server response.
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapResponse.ResultCode">
            <summary> Returns the result code in a server response.
            
             For a list of result codes, see the LdapException class. 
            
            </summary>
            <returns> The result code.
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapResponse.ResultException">
            <summary> Checks the resultCode and generates the appropriate exception or
            null if success.
            </summary>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapResponse.Controls">
            <summary> Returns any controls in the message.
            
            </summary>
            <seealso cref="P:Novell.Directory.Ldap.LdapMessage.Controls">
            </seealso>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapResponse.MessageID">
            <summary> Returns the message ID.
            
            </summary>
            <seealso cref="P:Novell.Directory.Ldap.LdapMessage.MessageID">
            </seealso>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapResponse.Type">
            <summary> Returns the Ldap operation type of the message.
            
            </summary>
            <returns> The operation type of the message.
            
            </returns>
            <seealso cref="P:Novell.Directory.Ldap.LdapMessage.Type">
            </seealso>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapResponse.Exception">
            <summary> Returns an embedded exception response
            
            </summary>
            <returns> an embedded exception if any
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapResponse.ActiveReferral">
            <summary> Indicates the referral instance being followed if the
            connection created to follow referrals.
            
            </summary>
            <returns> the referral being followed
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapExtendedResponse.#ctor(Novell.Directory.Ldap.Rfc2251.RfcLdapMessage)">
            <summary> Creates an LdapExtendedResponse object which encapsulates
            a server response to an asynchronous extended operation request.
            
            </summary>
            <param name="message"> The RfcLdapMessage to convert to an
            LdapExtendedResponse object.
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapExtendedResponse.register(System.String,System.Type)">
            <summary> Registers a class to be instantiated on receipt of a extendedresponse
            with the given OID.
            
            <p>Any previous registration for the OID is overridden. The 
            extendedResponseClass object MUST be an extension of 
            LDAPExtendedResponse. </p>
            
            </summary>
            <param name="oid">           The object identifier of the control.
            </param>
            <param name="extendedResponseClass"> A class which can instantiate an 
            LDAPExtendedResponse.
            </param>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapExtendedResponse.ID">
            <summary> Returns the message identifier of the response.
            
            </summary>
            <returns> OID of the response.
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapExtendedResponse.Value">
            <summary> Returns the value part of the response in raw bytes.
            
            </summary>
            <returns> The value of the response.
            </returns>
        </member>
        <member name="T:Novell.Directory.Ldap.LdapIntermediateResponse">
            
              Encapsulates the response returned by an LDAP server on an
              asynchronous extended operation request.  It extends LdapResponse.
            
              The response can contain the OID of the extension, an octet string
              with the operation's data, both, or neither.
        </member>
        <!-- Badly formed XML comment ignored for member "M:Novell.Directory.Ldap.LdapIntermediateResponse.register(System.String,System.Type)" -->
        <member name="M:Novell.Directory.Ldap.LdapIntermediateResponse.#ctor(Novell.Directory.Ldap.Rfc2251.RfcLdapMessage)">
             Creates an LdapIntermediateResponse object which encapsulates
             a server response to an asynchronous extended operation request.
            
             @param message  The RfcLdapMessage to convert to an
                             LdapIntermediateResponse object.
        </member>
        <member name="M:Novell.Directory.Ldap.LdapIntermediateResponse.getID">
             Returns the message identifier of the response.
            
             @return OID of the response.
        </member>
        <member name="M:Novell.Directory.Ldap.LdapIntermediateResponse.getValue">
             Returns the value part of the response in raw bytes.
            
             @return The value of the response.
        </member>
        <member name="T:Novell.Directory.Ldap.LdapLocalException">
            <summary>  Represents an Ldap exception that is not a result of a server response.</summary>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapLocalException.#ctor">
            <summary> Constructs a default exception with no specific error information.</summary>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapLocalException.#ctor(System.String,System.Int32)">
            <summary> Constructs a local exception with a detailed message obtained from the
            specified <code>MessageOrKey</code> String and the result code.
            
            The String is used either as a message key to obtain a localized
            messsage from ExceptionMessages, or if there is no key in the
            resource matching the text, it is used as the detailed message itself.
            
            </summary>
            <param name="messageOrKey"> Key to addition result information, a key into
            ExceptionMessages, or the information
            itself if the key doesn't exist.
            
            </param>
            <param name="resultCode">   The result code returned.
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapLocalException.#ctor(System.String,System.Object[],System.Int32)">
            <summary> Constructs a local exception with a detailed message obtained from the
            specified <code>MessageOrKey</code> String and modifying arguments.
            Additional parameters specify the result code.
            
            The String is used either as a message key to obtain a localized
            messsage from ExceptionMessages, or if there is no key in the
            resource matching the text, it is used as the detailed message itself.
            
            The message in the default locale is built with the supplied arguments,
            which are saved to be used for building messages for other locales.
            
            </summary>
            <param name="messageOrKey"> Key to addition result information, a key into
            ExceptionMessages, or the information
            itself if the key doesn't exist.
            
            </param>
            <param name="arguments">   The modifying arguments to be included in the
            message string.
            
            </param>
            <param name="resultCode">   The result code returned.
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapLocalException.#ctor(System.String,System.Int32,System.Exception)">
            <summary> Constructs a local exception with a detailed message obtained from the
            specified <code>MessageOrKey</code> String.
            Additional parameters specify the result code and a rootException which
            is the underlying cause of an error on the client.
            
            The String is used either as a message key to obtain a localized
            messsage from ExceptionMessages, or if there is no key in the
            resource matching the text, it is used as the detailed message itself.
            
            </summary>
            <param name="messageOrKey"> Key to addition result information, a key into
            ExceptionMessages, or the information
            itself if the key doesn't exist.
            
            </param>
            <param name="resultCode">   The result code returned.
            
            </param>
            <param name="rootException"> A throwable which is the underlying cause
            of the LdapException.
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapLocalException.#ctor(System.String,System.Object[],System.Int32,System.Exception)">
            <summary> Constructs a local exception with a detailed message obtained from the
            specified <code>MessageOrKey</code> String and modifying arguments.
            Additional parameters specify the result code
            and a rootException which is the underlying cause of an error
            on the client.
            
            The String is used either as a message key to obtain a localized
            messsage from ExceptionMessages, or if there is no key in the
            resource matching the text, it is used as the detailed message itself.
            
            The message in the default locale is built with the supplied arguments,
            which are saved to be used for building messages for other locales.
            
            </summary>
            <param name="messageOrKey"> Key to addition result information, a key into
            ExceptionMessages, or the information
            itself if the key doesn't exist.
            
            </param>
            <param name="arguments">   The modifying arguments to be included in the
            message string.
            
            </param>
            <param name="resultCode">   The result code returned.
            
            </param>
            <param name="rootException"> A throwable which is the underlying cause
            of the LdapException.
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapLocalException.ToString">
            <summary> returns a string of information about the exception and the
            the nested exceptions, if any.
            </summary>
        </member>
        <member name="T:Novell.Directory.Ldap.LdapMatchingRuleSchema">
            <summary>  The schematic definition of a particular matching rule
            in a particular Directory Server.
            
            The LdapMatchingRuleSchema class represents the definition of a mathcing
            rule.  It is used to query matching rule syntax, and to add or delete a
            matching rule definition in a directory.
            
            Novell eDirectory does not currently allow matching rules to be added
            or deleted from the schema.
            
            </summary>
            <seealso cref="T:Novell.Directory.Ldap.LdapAttributeSchema">
            </seealso>
            <seealso cref="T:Novell.Directory.Ldap.LdapSchemaElement">
            </seealso>
            <seealso cref="T:Novell.Directory.Ldap.LdapSchema">
            </seealso>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapMatchingRuleSchema.#ctor(System.String[],System.String,System.String,System.String[],System.Boolean,System.String)">
            <summary> Constructs a matching rule definition for adding to or deleting from
            a directory.
            
            </summary>
            <param name="names">      The names of the attribute.
            
            </param>
            <param name="oid">        Object Identifier of the attribute - in
            dotted-decimal format.
            
            </param>
            <param name="description">  Optional description of the attribute.
            
            </param>
            <param name="attributes">   The OIDs of attributes to which the rule applies.
            This parameter may be null. All attributes added to
            this array must use the same syntax.
            
            </param>
            <param name="obsolete">     true if this matching rule is obsolete.
            
            
            </param>
            <param name="syntaxString">  The unique object identifer of the syntax of the
            attribute, in dotted numerical format.
            
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapMatchingRuleSchema.#ctor(System.String,System.String)">
            <summary> Constructs a matching rule definition from the raw string values
            returned from a schema query for "matchingRule" and for
            "matchingRuleUse" for the same rule.
            
            </summary>
            <param name="rawMatchingRule">   The raw string value returned on a directory
            query for "matchingRule".
            
            </param>
            <param name="rawMatchingRuleUse"> The raw string value returned on a directory
            query for "matchingRuleUse".
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapMatchingRuleSchema.formatString">
            <summary> Returns a string in a format suitable for directly adding to a
            directory, as a value of the particular schema element attribute.
            
            </summary>
            <returns> A string representation of the attribute's definition.
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapMatchingRuleSchema.Attributes">
            <summary> Returns the OIDs of the attributes to which this rule applies.
            
            </summary>
            <returns> The OIDs of the attributes to which this matching rule applies.
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapMatchingRuleSchema.SyntaxString">
            <summary> Returns the OID of the syntax that this matching rule is valid for.
            
            </summary>
            <returns> The OID of the syntax that this matching rule is valid for.
            </returns>
        </member>
        <member name="T:Novell.Directory.Ldap.LdapMatchingRuleUseSchema">
            <summary>Represents the definition of a specific matching rule use in the
            directory schema.
            
            The LdapMatchingRuleUseSchema class represents the definition of a
            matching rule use.  It is used to discover or modify which attributes are
            suitable for use with an extensible matching rule. It contains the name and
            identifier of a matching rule, and a list of attributes which
            it applies to.
            
            </summary>
            <seealso cref="T:Novell.Directory.Ldap.LdapAttributeSchema">
            </seealso>
            <seealso cref="T:Novell.Directory.Ldap.LdapSchemaElement">
            </seealso>
            <seealso cref="T:Novell.Directory.Ldap.LdapSchema">
            </seealso>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapMatchingRuleUseSchema.#ctor(System.String[],System.String,System.String,System.Boolean,System.String[])">
            <summary> Constructs a matching rule use definition for adding to or deleting
            from the schema.
            
            </summary>
            <param name="names">      Name(s) of the matching rule.
            
            </param>
            <param name="oid">        Object Identifier of the the matching rule
            in dotted-decimal format.
            
            </param>
            <param name="description">Optional description of the matching rule use.
            
            </param>
            <param name="obsolete">   True if the matching rule use is obsolete.
            
            </param>
            <param name="attributes"> List of attributes that this matching rule
            applies to. These values may be either the
            names or numeric oids of the attributes.
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapMatchingRuleUseSchema.#ctor(System.String)">
            <summary> Constructs a matching rule use definition from the raw string value
            returned on a schema query for matchingRuleUse.
            
            </summary>
            <param name="raw">       The raw string value returned on a schema
            query for matchingRuleUse.
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapMatchingRuleUseSchema.formatString">
            <summary> Returns a string in a format suitable for directly adding to a
            directory, as a value of the particular schema element attribute.
            
            </summary>
            <returns> A string representation of the attribute's definition.
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapMatchingRuleUseSchema.Attributes">
            <summary> Returns an array of all the attributes which this matching rule
            applies to.
            
            </summary>
            <returns> An array of all the attributes which this matching rule applies to.
            </returns>
        </member>
        <member name="T:Novell.Directory.Ldap.LdapMessageQueue">
            <summary>  Represents a queue of incoming asynchronous messages from the server.
            It is the common interface for {@link LdapResponseQueue} and
            {@link LdapSearchQueue}.
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapMessageQueue.agent">
            <summary> The message agent object associated with this queue</summary>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapMessageQueue.#ctor(System.String,Novell.Directory.Ldap.MessageAgent)">
            <summary> Constructs a response queue using the specified message agent
            
            </summary>
            <param name="agent">The message agent to associate with this conneciton
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapMessageQueue.getResponse">
            <summary> Returns the response from an Ldap request.
            
            The getResponse method blocks until a response is available, or until
            all operations associated with the object have completed or been
            canceled, and then returns the response.
            
            The application is responsible to determine the type of message
            returned.
            
            </summary>
            <returns> The response.
            
            </returns>
            <seealso cref="T:Novell.Directory.Ldap.LdapResponse">
            </seealso>
            <seealso cref="T:Novell.Directory.Ldap.LdapSearchResult">
            </seealso>
            <seealso cref="T:Novell.Directory.Ldap.LdapSearchResultReference">
            
            </seealso>
            <exception> LdapException A general exception which includes an error
            message and an Ldap error code.
            </exception>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapMessageQueue.getResponse(System.Int32)">
            <summary> Returns the response from an Ldap request for a particular message ID.
            
            The getResponse method blocks until a response is available
            for a particular message ID, or until all operations associated
            with the object have completed or been canceled, and
            then returns the response.  If there is no outstanding operation for
            the message ID (or if it is zero or a negative number),
            IllegalArgumentException is thrown.
            
            The application is responsible to determine the type of message
            returned.
            
            </summary>
            <param name="msgid">query for responses for a specific message request
            
            </param>
            <returns> The response from the server.
            
            </returns>
            <seealso cref="T:Novell.Directory.Ldap.LdapResponse">
            </seealso>
            <seealso cref="T:Novell.Directory.Ldap.LdapSearchResult">
            </seealso>
            <seealso cref="T:Novell.Directory.Ldap.LdapSearchResultReference">
            
            </seealso>
            <exception> LdapException A general exception which includes an error
            message and an Ldap error code.
            </exception>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapMessageQueue.getResponse(Integer32)">
            <summary> Private implementation of getResponse.
            Has an Integer object as a parameter so we can distinguish
            the null and the message number case
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapMessageQueue.isResponseReceived">
            <summary> Reports true if any response has been received from the server and not
            yet retrieved with getResponse.  If getResponse has been used to
            retrieve all messages received to this point, then isResponseReceived
            returns false.
            
            </summary>
            <returns> true if a response is available to be retrieved via getResponse,
            otherwise false.
            
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapMessageQueue.isResponseReceived(System.Int32)">
            <summary> Reports true if a response has been received from the server for
            a particular message ID but not yet retrieved with getResponse.  If
            there is no outstanding operation for the message ID (or if it is
            zero or a negative number), IllegalArgumentException is thrown.
            
            </summary>
            <param name="msgid">   A particular message ID to query for available responses.
            
            </param>
            <returns> true if a response is available to be retrieved via getResponse
            for the specified message ID, otherwise false.
            
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapMessageQueue.isComplete(System.Int32)">
            <summary> Reports true if all results have been received for a particular
            message id.
            
            If the search result done has been received from the server for the
            message id, it reports true.  There may still be messages waiting to be
            retrieved by the applcation with getResponse.
            
            @throws IllegalArgumentException if there is no outstanding operation
            for the message ID,
            </summary>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapMessageQueue.DebugName">
            <summary> Returns the name used for debug
            
            </summary>
            <returns> name of object instance used for debug
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapMessageQueue.MessageAgent">
            <summary> Returns the internal client message agent
            
            </summary>
            <returns> The internal client message agent
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapMessageQueue.MessageIDs">
            <summary> Returns the message IDs for all outstanding requests. These are requests
            for which a response has not been received from the server or which
            still have messages to be retrieved with getResponse.
            
            The last ID in the array is the messageID of the last submitted
            request.
            
            </summary>
            <returns> The message IDs for all outstanding requests.
            </returns>
        </member>
        <member name="T:Novell.Directory.Ldap.LdapModification">
            <summary> A single add, delete, or replace operation to an LdapAttribute.
            
            An LdapModification contains information on the type of modification
            being performed, the name of the attribute to be replaced, and the new
            value.  Multiple modifications are expressed as an array of modifications,
            i.e., <code>LdapModification[]</code>.
            
            An LdapModification or an LdapModification array enable you to modify
            an attribute of an Ldap entry. The entire array of modifications must
            be performed by the server as a single atomic operation in the order they
            are listed. No changes are made to the directory unless all the operations
            succeed. If all succeed, a success result is returned to the application.
            It should be noted that if the connection fails during a modification,
            it is indeterminate whether the modification occurred or not.
            
            There are three types of modification operations: Add, Delete,
            and Replace.
            
            <b>Add: </b>Creates the attribute if it doesn't exist, and adds
            the specified values. This operation must contain at least one value, and
            all values of the attribute must be unique.
            
            <b>Delete: </b>Deletes specified values from the attribute. If no
            values are specified, or if all existing values of the attribute are
            specified, the attribute is removed. Mandatory attributes cannot be
            removed.
            
            <b>Replace: </b>Creates the attribute if necessary, and replaces
            all existing values of the attribute with the specified values.
            If you wish to keep any existing values of a multi-valued attribute,
            you must include these values in the replace operation.
            A replace operation with no value will remove the entire attribute if it
            exists, and is ignored if the attribute does not exist.
            
            Additional information on Ldap modifications is available in section 4.6
            of <a href="http://www.ietf.org/rfc/rfc2251.txt">rfc2251.txt</a>
            
            
            </summary>
            <seealso cref="M:Novell.Directory.Ldap.LdapConnection.Modify(System.String,Novell.Directory.Ldap.LdapModification)">
            </seealso>
            <seealso cref="T:Novell.Directory.Ldap.LdapAttribute">
            </seealso>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapModification.ADD">
            <summary> Adds the listed values to the given attribute, creating
            the attribute if it does not already exist.
            
            ADD = 0
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapModification.DELETE">
            <summary> Deletes the listed values from the given attribute,
            removing the entire attribute (1) if no values are listed or
            (2) if all current values of the attribute are listed for
            deletion.
            
            DELETE = 1
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapModification.REPLACE">
            <summary> Replaces all existing values of the given attribute
            with the new values listed, creating the attribute if it
            does not already exist.
            
             A replace with no value deletes the entire attribute if it
            exists, and is ignored if the attribute does not exist. 
            
            REPLACE = 2
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapModification.#ctor(System.Int32,Novell.Directory.Ldap.LdapAttribute)">
            <summary> Specifies a modification to be made to an attribute.
            
            </summary>
            <param name="op">      The type of modification to make, which can be
            one of the following:
            <ul>
            <li>LdapModification.ADD - The value should be added to
            the attribute</li>
            
            <li>LdapModification.DELETE - The value should be removed
            from the attribute </li>
            
            <li>LdapModification.REPLACE - The value should replace all
            existing values of the
            attribute </li>
            </ul>
            </param>
            <param name="attr">    The attribute to modify.
            
            </param>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapModification.Attribute">
            <summary> Returns the attribute to modify, with any existing values.
            
            </summary>
            <returns> The attribute to modify.
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapModification.Op">
            <summary> Returns the type of modification specified by this object.
            
            The type is one of the following:
            <ul>
            <li>LdapModification.ADD</li>
            <li>LdapModification.DELETE</li>
            <li>LdapModification.REPLACE</li>
            </ul>
            
            </summary>
            <returns> The type of modification specified by this object.
            </returns>
        </member>
        <member name="T:Novell.Directory.Ldap.LdapModifyDNRequest">
            <summary> Represents an Ldap ModifyDN request
            
            </summary>
            <seealso cref="M:Novell.Directory.Ldap.LdapConnection.SendRequest(Novell.Directory.Ldap.LdapMessage,Novell.Directory.Ldap.LdapMessageQueue)">
            </seealso> 
        </member>
        <member name="M:Novell.Directory.Ldap.LdapModifyDNRequest.#ctor(System.String,System.String,System.String,System.Boolean,Novell.Directory.Ldap.LdapControl[])">
            <summary> Constructs a ModifyDN (rename) Request.
            
            </summary>
            <param name="dn">            The current distinguished name of the entry.
            
            </param>
            <param name="newRdn">        The new relative distinguished name for the entry.
            
            </param>
            <param name="newParentdn">   The distinguished name of an existing entry which
            is to be the new parent of the entry.
            
            </param>
            <param name="deleteOldRdn">  If true, the old name is not retained as an
            attribute value. If false, the old name is
            retained as an attribute value.
            
            </param>
            <param name="cont">           Any controls that apply to the modifyDN request,
            or null if none.
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapModifyDNRequest.ToString">
            <summary> Return an Asn1 representation of this mod DN request
            
            #return an Asn1 representation of this object
            </summary>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapModifyDNRequest.DN">
            <summary> Returns the dn of the entry to rename or move in the directory
            
            </summary>
            <returns> the dn of the entry to rename or move
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapModifyDNRequest.NewRDN">
            <summary> Returns the newRDN of the entry to rename or move in the directory
            
            </summary>
            <returns> the newRDN of the entry to rename or move
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapModifyDNRequest.DeleteOldRDN">
            <summary> Returns the DeleteOldRDN flag that applies to the entry to rename or
            move in the directory
            
            </summary>
            <returns> the DeleteOldRDN flag for the entry to rename or move
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapModifyDNRequest.ParentDN">
            <summary> Returns the ParentDN for the entry move in the directory
            
            </summary>
            <returns> the ParentDN for the entry to move, or <dd>null</dd>
            if the request is not a move.
            </returns>
        </member>
        <member name="T:Novell.Directory.Ldap.LdapModifyRequest">
            <summary> Modification Request.
            
            </summary>
            <seealso cref="M:Novell.Directory.Ldap.LdapConnection.SendRequest(Novell.Directory.Ldap.LdapMessage,Novell.Directory.Ldap.LdapMessageQueue)">
            </seealso>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapModifyRequest.#ctor(System.String,Novell.Directory.Ldap.LdapModification[],Novell.Directory.Ldap.LdapControl[])">
            <summary> Constructs an Ldap Modify request.
            
            </summary>
            <param name="dn">        The distinguished name of the entry to modify.
            
            </param>
            <param name="mods">      The changes to be made to the entry.
            
            </param>
            <param name="cont">       Any controls that apply to the modify request,
            or null if none.
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapModifyRequest.encodeModifications(Novell.Directory.Ldap.LdapModification[])">
            <summary> Encode an array of LdapModifications to ASN.1.
            
            </summary>
            <param name="mods">an array of LdapModification objects
            
            </param>
            <returns> an Asn1SequenceOf object containing the modifications.
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapModifyRequest.ToString">
            <summary> Return an Asn1 representation of this modify request
            
            #return an Asn1 representation of this object
            </summary>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapModifyRequest.DN">
            <summary> Returns of the dn of the entry to modify in the directory
            
            </summary>
            <returns> the dn of the entry to modify
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapModifyRequest.Modifications">
            <summary> Constructs the modifications associated with this request
            
            </summary>
            <returns> an array of LdapModification objects
            </returns>
        </member>
        <member name="T:Novell.Directory.Ldap.LdapNameFormSchema">
            <summary> A specific a name form in the directory schema.
            
            The LdapNameFormSchema class represents the definition of a Name Form.  It
            is used to discover or modify the allowed naming attributes for a particular
            object class.
            
            </summary>
            <seealso cref="T:Novell.Directory.Ldap.LdapSchemaElement">
            </seealso>
            <seealso cref="T:Novell.Directory.Ldap.LdapSchema">
            </seealso>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapNameFormSchema.#ctor(System.String[],System.String,System.String,System.Boolean,System.String,System.String[],System.String[])">
            <summary> Constructs a name form for adding to or deleting from the schema.
            
            </summary>
            <param name="names">      The name(s) of the name form.
            
            </param>
            <param name="oid">        The unique object identifier of the name form - in
            dotted numerical format.
            
            </param>
            <param name="description">An optional description of the name form.
            
            </param>
            <param name="obsolete">   True if the name form is obsolete.
            
            </param>
            <param name="objectClass">The object to which this name form applies.
            This may be specified by either name or
            numeric oid.
            
            </param>
            <param name="required">   A list of the attributes that must be present
            in the RDN of an entry that this name form
            controls. These attributes may be specified by
            either name or numeric oid.
            
            </param>
            <param name="optional">   A list of the attributes that may be present
            in the RDN of an entry that this name form
            controls. These attributes may be specified by
            either name or numeric oid.
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapNameFormSchema.formatString">
            <summary> Returns a string in a format suitable for directly adding to a
            directory, as a value of the particular schema element class.
            
            </summary>
            <returns> A string representation of the class' definition.
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapNameFormSchema.ObjectClass">
            <summary> Returns the name of the object class which this name form applies to.
            
            </summary>
            <returns> The name of the object class.
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapNameFormSchema.RequiredNamingAttributes">
            <summary> Returns the list of required naming attributes for an entry
            controlled by this name form.
            
            </summary>
            <returns> The list of required naming attributes.
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapNameFormSchema.OptionalNamingAttributes">
            <summary> Returns the list of optional naming attributes for an entry
            controlled by this content rule.
            
            </summary>
            <returns> The list of the optional naming attributes.
            </returns>
        </member>
        <member name="T:Novell.Directory.Ldap.LdapObjectClassSchema">
            <summary>  The schema definition of an object class in a directory server.
            
            The LdapObjectClassSchema class represents the definition of an object
            class.  It is used to query the syntax of an object class.
            
            </summary>
            <seealso cref="T:Novell.Directory.Ldap.LdapSchemaElement">
            </seealso>
            <seealso cref="T:Novell.Directory.Ldap.LdapSchema">
            </seealso>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapObjectClassSchema.ABSTRACT">
            <summary> This class definition defines an abstract schema class.
            
            This is equivalent to setting the Novell eDirectory effective class
            flag to true.
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapObjectClassSchema.STRUCTURAL">
            <summary> This class definition defines a structural schema class.
            
            This is equivalent to setting the Novell eDirectory effective class
            flag to true.
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapObjectClassSchema.AUXILIARY">
            <summary> This class definition defines an auxiliary schema class.</summary>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapObjectClassSchema.#ctor(System.String[],System.String,System.String[],System.String,System.String[],System.String[],System.Int32,System.Boolean)">
            <summary> Constructs an object class definition for adding to or deleting from
            a directory's schema.
            
            </summary>
            <param name="names">    Name(s) of the object class.
            
            </param>
            <param name="oid">      Object Identifer of the object class - in
            dotted-decimal format.
            
            </param>
            <param name="description">   Optional description of the object class.
            
            </param>
            <param name="superiors">     The object classes from which this one derives.
            
            </param>
            <param name="required">      A list of attributes required
            for an entry with this object class.
            
            </param>
            <param name="optional">      A list of attributes acceptable but not required
            for an entry with this object class.
            
            </param>
            <param name="type">          One of ABSTRACT, AUXILIARY, or STRUCTURAL. These
            constants are defined in LdapObjectClassSchema.
            
            </param>
            <param name="obsolete">      true if this object is obsolete
            
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapObjectClassSchema.#ctor(System.String)">
            <summary> Constructs an object class definition from the raw string value
            returned from a directory query for "objectClasses".
            
            </summary>
            <param name="raw">     The raw string value returned from a directory
            query for "objectClasses".
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapObjectClassSchema.formatString">
            <summary> Returns a string in a format suitable for directly adding to a
            directory, as a value of the particular schema element class.
            
            </summary>
            <returns> A string representation of the class' definition.
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapObjectClassSchema.Superiors">
            <summary> Returns the object classes from which this one derives.
            
            </summary>
            <returns> The object classes superior to this class.
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapObjectClassSchema.RequiredAttributes">
            <summary> Returns a list of attributes required for an entry with this object
            class.
            
            </summary>
            <returns> The list of required attributes defined for this class.
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapObjectClassSchema.OptionalAttributes">
            <summary> Returns a list of optional attributes but not required of an entry
            with this object class.
            
            </summary>
            <returns> The list of optional attributes defined for this class.
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapObjectClassSchema.Type">
            <summary> Returns the type of object class.
            
            The getType method returns one of the following constants defined in
            LdapObjectClassSchema:
            <ul>
            <li>ABSTRACT</li>
            <li>AUXILIARY</li>
            <li>STRUCTURAL</li>
            </ul>
            See the LdapSchemaElement.getQualifier method for information on
            obtaining the X-NDS flags.
            
            </summary>
            <returns> The type of object class.
            </returns>
        </member>
        <member name="T:Novell.Directory.Ldap.LdapReferralException">
            <summary>  Thrown when a server returns a referral and when a referral has not
            been followed.  It contains a list of URL strings corresponding
            to the referrals or search continuation references received on an Ldap
            operation.
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapReferralException.#ctor">
            <summary> Constructs a default exception with no specific error information.</summary>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapReferralException.#ctor(System.String)">
            <summary> Constructs a default exception with a specified string as additional
            information.
            
            This form is used for lower-level errors.
            
            </summary>
            <param name="message">The additional error information.
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapReferralException.#ctor(System.String,System.Object[])">
            <summary> Constructs a default exception with a specified string as additional
            information.
            
            This form is used for lower-level errors.
            
            
            </summary>
            <param name="arguments">    The modifying arguments to be included in the
            message string.
            
            </param>
            <param name="message">The additional error information.
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapReferralException.#ctor(System.String,System.Exception)">
            <summary> Constructs a default exception with a specified string as additional
            information and an exception that indicates a failure to follow a
            referral. This excepiton applies only to synchronous operations and
            is thrown only on receipt of a referral when the referral was not
            followed.
            
            </summary>
            <param name="message">The additional error information.
            
            
            </param>
            <param name="rootException">An exception which caused referral following to fail.
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapReferralException.#ctor(System.String,System.Object[],System.Exception)">
            <summary> Constructs a default exception with a specified string as additional
            information and an exception that indicates a failure to follow a
            referral. This excepiton applies only to synchronous operations and
            is thrown only on receipt of a referral when the referral was not
            followed.
            
            </summary>
            <param name="message">The additional error information.
            
            
            </param>
            <param name="arguments">    The modifying arguments to be included in the
            message string.
            
            </param>
            <param name="rootException">An exception which caused referral following to fail.
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapReferralException.#ctor(System.String,System.Int32,System.String)">
            <summary> Constructs an exception with a specified error string, result code, and
            an error message from the server.
            
            </summary>
            <param name="message">       The additional error information.
            
            </param>
            <param name="resultCode">    The result code returned.
            
            </param>
            <param name="serverMessage"> Error message specifying additional information
            from the server.
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapReferralException.#ctor(System.String,System.Object[],System.Int32,System.String)">
            <summary> Constructs an exception with a specified error string, result code, and
            an error message from the server.
            
            </summary>
            <param name="message">       The additional error information.
            
            </param>
            <param name="arguments">     The modifying arguments to be included in the
            message string.
            
            </param>
            <param name="resultCode">    The result code returned.
            
            </param>
            <param name="serverMessage"> Error message specifying additional information
            from the server.
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapReferralException.#ctor(System.String,System.Int32,System.String,System.Exception)">
            <summary> Constructs an exception with a specified error string, result code,
            an error message from the server, and an exception that indicates
            a failure to follow a referral.
            
            </summary>
            <param name="message">       The additional error information.
            
            </param>
            <param name="resultCode">    The result code returned.
            
            </param>
            <param name="serverMessage"> Error message specifying additional information
            from the server.
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapReferralException.#ctor(System.String,System.Object[],System.Int32,System.String,System.Exception)">
            <summary> Constructs an exception with a specified error string, result code,
            an error message from the server, and an exception that indicates
            a failure to follow a referral.
            
            </summary>
            <param name="message">       The additional error information.
            
            </param>
            <param name="arguments">     The modifying arguments to be included in the
            message string.
            
            </param>
            <param name="resultCode">    The result code returned.
            
            </param>
            <param name="serverMessage"> Error message specifying additional information
            from the server.
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapReferralException.getReferrals">
            <summary> Gets the list of referral URLs (Ldap URLs to other servers) returned by
            the Ldap server.
            
            The referral list may include URLs of a type other than ones for an Ldap
            server (for example, a referral URL other than ldap://something).
            
            </summary>
            <returns> The list of URLs that comprise this referral
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapReferralException.setReferrals(System.String[])">
            <summary> Sets the list of referrals
            
            </summary>
            <param name="urls">the list of referrals returned by the Ldap server in a
            single response.
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapReferralException.ToString">
            <summary> returns a string of information about the exception and the
            the nested exceptions, if any.
            </summary>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapReferralException.FailedReferral">
            <summary> Sets a referral that could not be processed
            
            </summary>
            <param name="url">The referral URL that could not be processed.
            </param>
        </member>
        <member name="T:Novell.Directory.Ldap.LdapResponseQueue">
            <summary>  A mechanism for processing asynchronous messages received from a server.
            It represents the message queue associated with a particular asynchronous
            Ldap operation or operations.
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapResponseQueue.#ctor(Novell.Directory.Ldap.MessageAgent)">
            <summary> Constructs a response queue using the specified message agent
            
            </summary>
            <param name="agent">The message agent to associate with this queue
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapResponseQueue.merge(Novell.Directory.Ldap.LdapMessageQueue)">
            <summary> Merges two message queues.  It appends the current and
            future contents from another queue to this one.
            
            After the operation, queue2.getMessageIDs()
            returns an empty array, and its outstanding responses
            have been removed and appended to this queue.
            
            </summary>
            <param name="queue2">   The queue that is merged from.  Following
            the merge, this queue object will no
            longer receive any data, and calls made
            to its methods will fail with a RuntimeException.
            The queue can be reactivated by using it in an 
            Ldap request, after which it will receive responses
            for that request..
            </param>
        </member>
        <member name="T:Novell.Directory.Ldap.LdapSchema">
            <summary> Represents a schema entry that controls one or more entries held by a
            Directory Server.
            
            <code>LdapSchema</code> Contains methods to parse schema attributes into
            individual schema definitions, represented by subclasses of
            {@link LdapSchemaElement}.  Schema may be retrieved from a Directory server
            with the fetchSchema method of LdapConnection or by creating an LdapEntry
            containing schema attributes.  The following sample code demonstrates how to
            retrieve schema elements from LdapSchema
            
            <pre><code>
            .
            .
            .
            LdapSchema schema;
            LdapSchemaElement element;
            
            // connect to the server
            lc.connect( ldapHost, ldapPort );
            lc.bind( ldapVersion, loginDN, password );
            
            // read the schema from the directory
            schema = lc.fetchSchema( lc.getSchemaDN() );
            
            // retrieve the definition of common name
            element = schema.getAttributeSchema( "cn" );
            System.out.println("The attribute cn has an oid of " + element.getID());
            .
            .
            .
            </code></pre>
            
            
            </summary>
            <seealso cref="T:Novell.Directory.Ldap.LdapSchemaElement">
            </seealso>
            <seealso cref="M:Novell.Directory.Ldap.LdapConnection.FetchSchema(System.String)">
            </seealso>
            <seealso cref="M:Novell.Directory.Ldap.LdapConnection.GetSchemaDN">
            </seealso>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapSchema.ATTRIBUTE">
            <summary>An index into the the arrays schemaTypeNames, idTable, and nameTable </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapSchema.OBJECT_CLASS">
            <summary>An index into the the arrays schemaTypeNames, idTable, and nameTable </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapSchema.SYNTAX">
            <summary>An index into the the arrays schemaTypeNames, idTable, and nameTable </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapSchema.NAME_FORM">
            <summary>An index into the the arrays schemaTypeNames, idTable, and nameTable </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapSchema.DITCONTENT">
            <summary>An index into the the arrays schemaTypeNames, idTable, and nameTable </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapSchema.DITSTRUCTURE">
            <summary>An index into the the arrays schemaTypeNames, idTable, and nameTable </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapSchema.MATCHING">
            <summary>An index into the the arrays schemaTypeNames, idTable, and nameTable </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapSchema.MATCHING_USE">
            <summary>An index into the the arrays schemaTypeNames, idTable, and nameTable </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapSchema.idTable">
            <summary>The idTable hash on the oid (or integer ID for DITStructureRule) and
            is used for retrieving enumerations
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapSchema.nameTable">
            <summary>The nameTable will hash on the names (if available). To insure
            case-insensibility, the Keys for this table will be a String cast to
            Uppercase.
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapSchema.schemaTypeNames">
            <summary> The following lists the Ldap names of subschema attributes for
            schema elements (definitions):
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapSchema.#ctor(Novell.Directory.Ldap.LdapEntry)">
            <summary> Constructs an LdapSchema object from attributes of an LdapEntry.
            The object is empty if the entry parameter contains no schema
            attributes.  The recognized schema attributes are the following: 
            <pre><code>
            "attributeTypes", "objectClasses", "ldapSyntaxes",
            "nameForms", "dITContentRules", "dITStructureRules",
            "matchingRules","matchingRuleUse"
            </code></pre>
            </summary>
            <param name="ent">         An LdapEntry containing schema information.
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapSchema.addElement(System.Int32,Novell.Directory.Ldap.LdapSchemaElement)">
            <summary> Adds the schema definition to the idList and nameList HashMaps.
            This method is used by the methods fetchSchema and add.
            
            Note that the nameTable has all keys cast to Upper-case.  This is so we
            can have a case-insensitive HashMap.  The getXXX (String key) methods
            will also cast to uppercase.
            
            </summary>
            <param name="schemaType">   Type of schema definition, use one of the final
            integers defined at the top of this class:
            ATTRIBUTE, OBJECT_CLASS, SYNTAX, NAME_FORM,
            DITCONTENT, DITSTRUCTURE, MATCHING, MATCHING_USE
            
            </param>
            <param name="element">      Schema element definition.
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapSchema.getSchemaElement(System.Int32,System.String)">
            <summary> This function abstracts retrieving LdapSchemaElements from the local
            copy of schema in this LdapSchema class.  This is used by
            <code>getXXX(String name)</code> functions.
            
            Note that the nameTable has all keys cast to Upper-case.  This is so
            we can have a case-insensitive HashMap.  The getXXX (String key)
            methods will also cast to uppercase.
            
            The first character of a NAME string can only be an alpha character
            (see section 4.1 of rfc2252) Thus if the first character is a digit we
            can conclude it is an OID.  Note that this digit is ASCII only.
            
            </summary>
            <param name="schemaType">Specifies which list is to be used in schema
            lookup.
            </param>
            <param name="key">       The key can be either an OID or a name string.
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapSchema.getAttributeSchema(System.String)">
            <summary> Returns a particular attribute definition, or null if not found.
            
            </summary>
            <param name="name">    Name or OID of the attribute for which a definition is
            to be returned.
            
            </param>
            <returns> The attribute definition, or null if not found.
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapSchema.getDITContentRuleSchema(System.String)">
            <summary> Returns a particular DIT content rule definition, or null if not found.
            
            </summary>
            <param name="name">    The name of the DIT content rule use for which a
            definition is to be returned.
            
            </param>
            <returns> The DIT content rule definition, or null if not found.
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapSchema.getDITStructureRuleSchema(System.String)">
            <summary> Returns a particular DIT structure rule definition, or null if not found.
            
            </summary>
            <param name="name">    The name of the DIT structure rule use for which a
            definition is to be returned.
            
            </param>
            <returns> The DIT structure rule definition, or null if not found.
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapSchema.getDITStructureRuleSchema(System.Int32)">
            <summary> Returns a particular DIT structure rule definition, or null if not found.
            
            </summary>
            <param name="ID">    The ID of the DIT structure rule use for which a
            definition is to be returned.
            
            </param>
            <returns> The DIT structure rule definition, or null if not found.
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapSchema.getMatchingRuleSchema(System.String)">
            <summary> Returns a particular matching rule definition, or null if not found.
            
            </summary>
            <param name="name">    The name of the matching rule for which a definition
            is to be returned.
            
            </param>
            <returns> The matching rule definition, or null if not found.
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapSchema.getMatchingRuleUseSchema(System.String)">
            <summary> Returns a particular matching rule use definition, or null if not found.
            
            </summary>
            <param name="name">    The name of the matching rule use for which a definition
            is to be returned.
            
            </param>
            <returns> The matching rule use definition, or null if not found.
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapSchema.getNameFormSchema(System.String)">
            <summary> Returns a particular name form definition, or null if not found.
            
            </summary>
            <param name="name">    The name of the name form for which a definition
            is to be returned.
            
            </param>
            <returns> The name form definition, or null if not found.
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapSchema.getObjectClassSchema(System.String)">
            <summary> Returns a particular object class definition, or null if not found.
            
            </summary>
            <param name="name">   The name or OID of the object class for which a
            definition is to be returned.
            
            </param>
            <returns> The object class definition, or null if not found.
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapSchema.getSyntaxSchema(System.String)">
            <summary> Returns a particular syntax definition, or null if not found.
            
            </summary>
            <param name="oid">    The oid of the syntax for which a definition
            is to be returned.
            
            </param>
            <returns> The syntax definition, or null if not found.
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapSchema.getType(Novell.Directory.Ldap.LdapSchemaElement)">
            <summary> This helper function returns a number that represents the type of schema
            definition the element represents.  The top of this file enumerates
            these types.
            
            </summary>
            <param name="element">  A class extending LdapSchemaElement.
            
            </param>
            <returns>      a Number that identifies the type of schema element and
            will be one of the following:
            ATTRIBUTE, OBJECT_CLASS, SYNTAX, NAME_FORM,
            DITCONTENT, DITSTRUCTURE, MATCHING, MATCHING_USE
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapSchema.AttributeSchemas">
            <summary> Returns an enumeration of attribute definitions.
            
            </summary>
            <returns> An enumeration of attribute definitions.
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapSchema.DITContentRuleSchemas">
            <summary> Returns an enumeration of DIT content rule definitions.
            
            </summary>
            <returns> An enumeration of DIT content rule definitions.
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapSchema.DITStructureRuleSchemas">
            <summary> Returns an enumeration of DIT structure rule definitions.
            
            </summary>
            <returns> An enumeration of DIT structure rule definitions.
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapSchema.MatchingRuleSchemas">
            <summary> Returns an enumeration of matching rule definitions.
            
            </summary>
            <returns> An enumeration of matching rule definitions.
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapSchema.MatchingRuleUseSchemas">
            <summary> Returns an enumeration of matching rule use definitions.
            
            </summary>
            <returns> An enumeration of matching rule use definitions.
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapSchema.NameFormSchemas">
            <summary> Returns an enumeration of name form definitions.
            
            </summary>
            <returns> An enumeration of name form definitions.
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapSchema.ObjectClassSchemas">
            <summary> Returns an enumeration of object class definitions.
            
            </summary>
            <returns> An enumeration of object class definitions.
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapSchema.SyntaxSchemas">
            <summary> Returns an enumeration of syntax definitions.
            
            </summary>
            <returns> An enumeration of syntax definitions.
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapSchema.AttributeNames">
            <summary> Returns an enumeration of attribute names.
            
            </summary>
            <returns> An enumeration of attribute names.
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapSchema.DITContentRuleNames">
            <summary> Returns an enumeration of DIT content rule names.
            
            </summary>
            <returns> An enumeration of DIT content rule names.
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapSchema.DITStructureRuleNames">
            <summary> Returns an enumeration of DIT structure rule names.
            
            </summary>
            <returns> An enumeration of DIT structure rule names.
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapSchema.MatchingRuleNames">
            <summary> Returns an enumeration of matching rule names.
            
            </summary>
            <returns> An enumeration of matching rule names.
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapSchema.MatchingRuleUseNames">
            <summary> Returns an enumeration of matching rule use names.
            
            </summary>
            <returns> An enumeration of matching rule use names.
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapSchema.NameFormNames">
            <summary> Returns an enumeration of name form names.
            
            </summary>
            <returns> An enumeration of name form names.
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapSchema.ObjectClassNames">
            <summary> Returns an enumeration of object class names.
            
            </summary>
            <returns> An enumeration of object class names.
            </returns>
        </member>
        <member name="T:Novell.Directory.Ldap.LdapSearchConstraints">
            <summary> 
            Defines the options controlling search operations.
            
            An LdapSearchConstraints object is always associated with an
            LdapConnection object; its values can be changed with the
            LdapConnection.setConstraints method, or overridden by passing
            an LdapSearchConstraints object to the search operation.
            
            </summary>
            <seealso cref="T:Novell.Directory.Ldap.LdapConstraints">
            </seealso>
            <seealso cref="P:Novell.Directory.Ldap.LdapConnection.Constraints">
            </seealso>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapSearchConstraints.DEREF_NEVER">
            <summary> Indicates that aliases are never dereferenced.
            
             DEREF_NEVER = 0 
            
            </summary>
            <seealso cref="P:Novell.Directory.Ldap.LdapSearchConstraints.Dereference">
            </seealso>
            <seealso cref="P:Novell.Directory.Ldap.LdapSearchConstraints.Dereference">
            </seealso>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapSearchConstraints.DEREF_SEARCHING">
            <summary> Indicates that aliases are are derefrenced when
            searching the entries beneath the starting point of the search,
            but not when finding the starting entry.
            
             DEREF_SEARCHING = 1 
            
            </summary>
            <seealso cref="P:Novell.Directory.Ldap.LdapSearchConstraints.Dereference">
            </seealso>
            <seealso cref="P:Novell.Directory.Ldap.LdapSearchConstraints.Dereference">
            </seealso>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapSearchConstraints.DEREF_FINDING">
            <summary> Indicates that aliases are dereferenced when
            finding the starting point for the search,
            but not when searching under that starting entry.
            
             DEREF_FINDING = 2 
            
            </summary>
            <seealso cref="P:Novell.Directory.Ldap.LdapSearchConstraints.Dereference">
            </seealso>
            <seealso cref="P:Novell.Directory.Ldap.LdapSearchConstraints.Dereference">
            </seealso>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapSearchConstraints.DEREF_ALWAYS">
            <summary> Indicates that aliases are always dereferenced, both when
            finding the starting point for the search, and also when
            searching the entries beneath the starting entry.
            
             DEREF_ALWAYS = 3 
            
            </summary>
            <seealso cref="P:Novell.Directory.Ldap.LdapSearchConstraints.Dereference">
            </seealso>
            <seealso cref="P:Novell.Directory.Ldap.LdapSearchConstraints.Dereference">
            </seealso>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapSearchConstraints.#ctor">
            <summary> Constructs an LdapSearchConstraints object with a default set
            of search constraints.
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapSearchConstraints.#ctor(Novell.Directory.Ldap.LdapConstraints)">
            <summary> Constructs an LdapSearchConstraints object initialized with values
            from an existing constraints object (LdapConstraints
            or LdapSearchConstraints).
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapSearchConstraints.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Int32,Novell.Directory.Ldap.LdapReferralHandler,System.Int32)">
            <summary> Constructs a new LdapSearchConstraints object and allows the
            specification operational constraints in that object.
            
            </summary>
            <param name="msLimit"> The maximum time in milliseconds to wait for results.
            The default is 0, which means that there is no
            maximum time limit. This limit is enforced for an
            operation by the API, not by the server.
            The operation will be abandoned and terminated by the
            API with an LdapException.Ldap_TIMEOUT if the
            operation exceeds the time limit.
            
            </param>
            <param name="serverTimeLimit">The maximum time in seconds that the server
            should spend returning search results. This is a
            server-enforced limit.  The default of 0 means
            no time limit.
            The operation will be terminated by the server with an
            LdapException.TIME_LIMIT_EXCEEDED if the search
            operation exceeds the time limit.
            
            </param>
            <param name="dereference">Specifies when aliases should be dereferenced.
            Must be either DEREF_NEVER, DEREF_FINDING,
            DEREF_SEARCHING, or DEREF_ALWAYS from this class.
            Default: DEREF_NEVER
            
            </param>
            <param name="maxResults">The maximum number of search results to return
            for a search request.
            The search operation will be terminated by the server
            with an LdapException.SIZE_LIMIT_EXCEEDED if the
            number of results exceed the maximum.
            Default: 1000
            
            </param>
            <param name="doReferrals">Determines whether to automatically follow
            referrals or not. Specify true to follow
            referrals automatically, and false to throw
            an LdapException.REFERRAL if the server responds
            with a referral.
            It is ignored for asynchronous operations.
            Default: false
            
            </param>
            <param name="batchSize">The number of results to return in a batch. Specifying
            0 means to block until all results are received.
            Specifying 1 means to return results one result at a
            time.  Default: 1
            
            
            </param>
            <param name="handler">  The custom authentication handler called when
            LdapConnection needs to authenticate, typically on
            following a referral.  A null may be specified to
            indicate default authentication processing, i.e.
            referrals are followed with anonymous authentication.
            ThE object may be an implemention of either the
            the LdapBindHandler or LdapAuthHandler interface.
            It is ignored for asynchronous operations.
            
            </param>
            <param name="hop_limit">The maximum number of referrals to follow in a
            sequence during automatic referral following.
            The default value is 10. A value of 0 means no limit.
            It is ignored for asynchronous operations.
            The operation will be abandoned and terminated by the
            API with an LdapException.REFERRAL_LIMIT_EXCEEDED if the
            number of referrals in a sequence exceeds the limit.
            
            </param>
            <seealso cref="F:Novell.Directory.Ldap.LdapException.Ldap_TIMEOUT">
            </seealso>
            <seealso cref="F:Novell.Directory.Ldap.LdapException.REFERRAL">
            </seealso>
            <seealso cref="F:Novell.Directory.Ldap.LdapException.SIZE_LIMIT_EXCEEDED">
            </seealso>
            <seealso cref="F:Novell.Directory.Ldap.LdapException.TIME_LIMIT_EXCEEDED">
            </seealso>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapSearchConstraints.BatchSize">
            <summary> Returns the number of results to block on during receipt of search
            results.
            
            This should be 0 if intermediate reults are not needed,
            and 1 if results are to be processed as they come in. A value of
            indicates block until all results are received.  Default: 
            
            </summary>
            <returns> The the number of results to block on.
            
            </returns>
            <seealso cref="P:Novell.Directory.Ldap.LdapSearchConstraints.BatchSize">
            </seealso>
            <summary>  Specifies the number of results to return in a batch.
            Specifying 0 means to block until all results are received.
            Specifying 1 means to return results one result at a time.  Default: 1
            
            
            This should be 0 if intermediate results are not needed,
            and 1 if results are to be processed as they come in.  The
            default is 1.
            
            </summary>
            <param name="batchSize">     The number of results to block on.
            
            </param>
            <seealso cref="P:Novell.Directory.Ldap.LdapSearchConstraints.BatchSize">
            </seealso>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapSearchConstraints.Dereference">
            <summary> Specifies when aliases should be dereferenced.
            
            Returns one of the following:
            <ul>
            <li>DEREF_NEVER</li>
            <li>DEREF_FINDING</li>
            <li>DEREF_SEARCHING</li>
            <li>DEREF_ALWAYS</li>
            </ul>
            
            </summary>
            <returns> The setting for dereferencing aliases.
            
            </returns>
            <seealso cref="P:Novell.Directory.Ldap.LdapSearchConstraints.Dereference">
            </seealso>
            <summary> Sets a preference indicating whether or not aliases should be
            dereferenced, and if so, when.
            
            
            </summary>
            <param name="dereference"> Specifies how aliases are dereference and can be set
            to one of the following:
            <ul>
            <li>DEREF_NEVER - do not dereference aliases</li>
            <li>DEREF_FINDING - dereference aliases when finding
            the base object to start the search</li>
            <li>DEREF_SEARCHING - dereference aliases when
            searching but not when finding the base
            object to start the search</li>
            <li>DEREF_ALWAYS - dereference aliases when finding
            the base object and when searching</li>
            </ul>
            
            </param>
            <seealso cref="P:Novell.Directory.Ldap.LdapSearchConstraints.Dereference">
            </seealso>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapSearchConstraints.MaxResults">
            <summary> Returns the maximum number of search results to be returned for
            a search operation. A value of 0 means no limit.  Default: 1000
            The search operation will be terminated with an
            LdapException.SIZE_LIMIT_EXCEEDED if the number of results
            exceed the maximum.
            
            </summary>
            <returns> The value for the maximum number of results to return.
            
            </returns>
            <seealso cref="P:Novell.Directory.Ldap.LdapSearchConstraints.MaxResults">
            </seealso>
            <seealso cref="F:Novell.Directory.Ldap.LdapException.SIZE_LIMIT_EXCEEDED">
            </seealso>
            <summary> Sets the maximum number of search results to be returned from a
            search operation. The value 0 means no limit.  The default is 1000.
            The search operation will be terminated with an
            LdapException.SIZE_LIMIT_EXCEEDED if the number of results
            exceed the maximum.
            
            </summary>
            <param name="maxResults">    Maximum number of search results to return.
            
            </param>
            <seealso cref="P:Novell.Directory.Ldap.LdapSearchConstraints.MaxResults">
            </seealso>
            <seealso cref="F:Novell.Directory.Ldap.LdapException.SIZE_LIMIT_EXCEEDED">
            </seealso>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapSearchConstraints.ServerTimeLimit">
            <summary> Returns the maximum number of seconds that the server waits when
            returning search results.
            The search operation will be terminated with an
            LdapException.TIME_LIMIT_EXCEEDED if the operation exceeds the time
            limit.
            
            </summary>
            <returns> The maximum number of seconds the server waits for search'
            results.
            
            </returns>
            <seealso cref="P:Novell.Directory.Ldap.LdapSearchConstraints.ServerTimeLimit">
            </seealso>
            <seealso cref="F:Novell.Directory.Ldap.LdapException.TIME_LIMIT_EXCEEDED">
            </seealso>
            <summary> Sets the maximum number of seconds that the server is to wait when
            returning search results.
            The search operation will be terminated with an
            LdapException.TIME_LIMIT_EXCEEDED if the operation exceeds the time
            limit.
            
            The parameter is only recognized on search operations. 
            
            </summary>
            <param name="seconds">The number of seconds to wait for search results.
            
            </param>
            <seealso cref="P:Novell.Directory.Ldap.LdapSearchConstraints.ServerTimeLimit">
            </seealso>
            <seealso cref="F:Novell.Directory.Ldap.LdapException.TIME_LIMIT_EXCEEDED">
            </seealso>
        </member>
        <member name="T:Novell.Directory.Ldap.LdapSearchQueue">
            <summary>  A mechanism for queuing asynchronous search results
            received from a server.
            
            </summary>
            <seealso cref="M:Novell.Directory.Ldap.LdapConnection.Search(System.String,System.Int32,System.String,System.String[],System.Boolean)">
            </seealso>
            <seealso cref="T:Novell.Directory.Ldap.LdapResponseQueue">
            </seealso>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapSearchQueue.#ctor(Novell.Directory.Ldap.MessageAgent)">
            <summary> Constructs a response queue using a specific client queue
            
            </summary>
            <param name="agent">The message agent to associate with this queue
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapSearchQueue.merge(Novell.Directory.Ldap.LdapMessageQueue)">
            <summary> Merges two message queues.  It appends the current and
            future contents from another queue to this one.
            
            After the operation, queue2.getMessageIDs()
            returns an empty array, and its outstanding responses
            have been removed and appended to this queue.
            
            </summary>
            <param name="queue2">   The queue that is merged from.  Following
            the merge, this queue object will no
            longer receive any data, and calls made
            to its methods will fail with a RuntimeException.
            The queue can be reactivated by using it in an 
            Ldap request, after which it will receive responses
            for that request..
            </param>
        </member>
        <member name="T:Novell.Directory.Ldap.LdapSearchRequest">
            <summary> Represents an Ldap Search request.
            
            </summary>
            <seealso cref="M:Novell.Directory.Ldap.LdapConnection.SendRequest(Novell.Directory.Ldap.LdapMessage,Novell.Directory.Ldap.LdapMessageQueue)">
            </seealso> 
        </member>
        <member name="F:Novell.Directory.Ldap.LdapSearchRequest.AND">
            <summary> Search Filter Identifier for an AND component.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapSearchRequest.OR">
            <summary> Search Filter Identifier for an OR component.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapSearchRequest.NOT">
            <summary> Search Filter Identifier for a NOT component.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapSearchRequest.EQUALITY_MATCH">
            <summary> Search Filter Identifier for an EQUALITY_MATCH component.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapSearchRequest.SUBSTRINGS">
            <summary> Search Filter Identifier for a SUBSTRINGS component.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapSearchRequest.GREATER_OR_EQUAL">
            <summary> Search Filter Identifier for a GREATER_OR_EQUAL component.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapSearchRequest.LESS_OR_EQUAL">
            <summary> Search Filter Identifier for a LESS_OR_EQUAL component.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapSearchRequest.PRESENT">
            <summary> Search Filter Identifier for a PRESENT component.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapSearchRequest.APPROX_MATCH">
            <summary> Search Filter Identifier for an APPROX_MATCH component.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapSearchRequest.EXTENSIBLE_MATCH">
            <summary> Search Filter Identifier for an EXTENSIBLE_MATCH component.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapSearchRequest.INITIAL">
            <summary> Search Filter Identifier for an INITIAL component of a SUBSTRING.
            Note: An initial SUBSTRING is represented as "value*".
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapSearchRequest.ANY">
            <summary> Search Filter Identifier for an ANY component of a SUBSTRING.
            Note: An ANY SUBSTRING is represented as "*value*".
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.LdapSearchRequest.FINAL">
            <summary> Search Filter Identifier for a FINAL component of a SUBSTRING.
            Note: A FINAL SUBSTRING is represented as "*value".
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapSearchRequest.#ctor(System.String,System.Int32,System.String,System.String[],System.Int32,System.Int32,System.Int32,System.Boolean,Novell.Directory.Ldap.LdapControl[])">
            <summary> Constructs an Ldap Search Request.
            
            </summary>
            <param name="base">          The base distinguished name to search from.
            
            </param>
            <param name="scope">         The scope of the entries to search. The following
            are the valid options:
            <ul>
            <li>SCOPE_BASE - searches only the base DN</li>
            
            <li>SCOPE_ONE - searches only entries under the base DN</li>
            
            <li>SCOPE_SUB - searches the base DN and all entries
            within its subtree</li>
            </ul>
            </param>
            <param name="filter">        The search filter specifying the search criteria.
            
            </param>
            <param name="attrs">         The names of attributes to retrieve.
            operation exceeds the time limit.
            
            </param>
            <param name="dereference">Specifies when aliases should be dereferenced.
            Must be one of the constants defined in
            LdapConstraints, which are DEREF_NEVER,
            DEREF_FINDING, DEREF_SEARCHING, or DEREF_ALWAYS.
            
            </param>
            <param name="maxResults">The maximum number of search results to return
            for a search request.
            The search operation will be terminated by the server
            with an LdapException.SIZE_LIMIT_EXCEEDED if the
            number of results exceed the maximum.
            
            </param>
            <param name="serverTimeLimit">The maximum time in seconds that the server
            should spend returning search results. This is a
            server-enforced limit.  A value of 0 means
            no time limit.
            
            </param>
            <param name="typesOnly">     If true, returns the names but not the values of
            the attributes found.  If false, returns the
            names and values for attributes found.
            
            </param>
            <param name="cont">           Any controls that apply to the search request.
            or null if none.
            
            </param>
            <seealso cref="M:Novell.Directory.Ldap.LdapConnection.Search(System.String,System.Int32,System.String,System.String[],System.Boolean)">
            </seealso>
            <seealso cref="T:Novell.Directory.Ldap.LdapSearchConstraints">
            </seealso>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapSearchRequest.#ctor(System.String,System.Int32,Novell.Directory.Ldap.Rfc2251.RfcFilter,System.String[],System.Int32,System.Int32,System.Int32,System.Boolean,Novell.Directory.Ldap.LdapControl[])">
            <summary> Constructs an Ldap Search Request with a filter in Asn1 format.
            
            </summary>
            <param name="base">          The base distinguished name to search from.
            
            </param>
            <param name="scope">         The scope of the entries to search. The following
            are the valid options:
            <ul>
            <li>SCOPE_BASE - searches only the base DN</li>
            
            <li>SCOPE_ONE - searches only entries under the base DN</li>
            
            <li>SCOPE_SUB - searches the base DN and all entries
            within its subtree</li>
            </ul>
            </param>
            <param name="filter">        The search filter specifying the search criteria.
            
            </param>
            <param name="attrs">         The names of attributes to retrieve.
            operation exceeds the time limit.
            
            </param>
            <param name="dereference">Specifies when aliases should be dereferenced.
            Must be either one of the constants defined in
            LdapConstraints, which are DEREF_NEVER,
            DEREF_FINDING, DEREF_SEARCHING, or DEREF_ALWAYS.
            
            </param>
            <param name="maxResults">The maximum number of search results to return
            for a search request.
            The search operation will be terminated by the server
            with an LdapException.SIZE_LIMIT_EXCEEDED if the
            number of results exceed the maximum.
            
            </param>
            <param name="serverTimeLimit">The maximum time in seconds that the server
            should spend returning search results. This is a
            server-enforced limit.  A value of 0 means
            no time limit.
            
            </param>
            <param name="typesOnly">     If true, returns the names but not the values of
            the attributes found.  If false, returns the
            names and values for attributes found.
            
            </param>
            <param name="cont">           Any controls that apply to the search request.
            or null if none.
            
            </param>
            <seealso cref="M:Novell.Directory.Ldap.LdapConnection.Search(System.String,System.Int32,System.String,System.String[],System.Boolean)">
            </seealso>
            <seealso cref="T:Novell.Directory.Ldap.LdapSearchConstraints">
            </seealso>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapSearchRequest.DN">
            <summary> Retrieves the Base DN for a search request.
            
            </summary>
            <returns> the base DN for a search request
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapSearchRequest.Scope">
            <summary> Retrieves the scope of a search request.</summary>
            <returns> scope of a search request
            
            </returns>
            <seealso cref="F:Novell.Directory.Ldap.LdapConnection.SCOPE_BASE">
            </seealso>
            <seealso cref="F:Novell.Directory.Ldap.LdapConnection.SCOPE_ONE">
            </seealso>
            <seealso cref="F:Novell.Directory.Ldap.LdapConnection.SCOPE_SUB">
            </seealso>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapSearchRequest.Dereference">
            <summary> Retrieves the behaviour of dereferencing aliases on a search request.</summary>
            <returns> integer representing how to dereference aliases
            
            </returns>
            <seealso cref="F:Novell.Directory.Ldap.LdapSearchConstraints.DEREF_ALWAYS">
            </seealso>
            <seealso cref="F:Novell.Directory.Ldap.LdapSearchConstraints.DEREF_FINDING">
            </seealso>
            <seealso cref="F:Novell.Directory.Ldap.LdapSearchConstraints.DEREF_NEVER">
            </seealso>
            <seealso cref="F:Novell.Directory.Ldap.LdapSearchConstraints.DEREF_SEARCHING">
            </seealso>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapSearchRequest.MaxResults">
            <summary> Retrieves the maximum number of entries to be returned on a search.
            
            </summary>
            <returns> Maximum number of search entries.
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapSearchRequest.ServerTimeLimit">
            <summary> Retrieves the server time limit for a search request.
            
            </summary>
            <returns> server time limit in nanoseconds.
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapSearchRequest.TypesOnly">
            <summary> Retrieves whether attribute values or only attribute types(names) should
            be returned in a search request.
            </summary>
            <returns> true if only attribute types (names) are returned, false if
            attributes types and values are to be returned.
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapSearchRequest.Attributes">
            <summary> Retrieves an array of attribute names to request for in a search.</summary>
            <returns> Attribute names to be searched
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapSearchRequest.StringFilter">
            <summary> Creates a string representation of the filter in this search request.</summary>
            <returns> filter string for this search request
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapSearchRequest.RfcFilter">
            <summary> Retrieves an SearchFilter object representing a filter for a search request</summary>
            <returns> filter object for a search request.
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapSearchRequest.SearchFilter">
            <summary> Retrieves an Iterator object representing the parsed filter for
            this search request.
            
            The first object returned from the Iterator is an Integer indicating
            the type of filter component. One or more values follow the component
            type as subsequent items in the Iterator. The pattern of Integer 
            component type followed by values continues until the end of the
            filter.
            
            Values returned as a byte array may represent UTF-8 characters or may
            be binary values. The possible Integer components of a search filter
            and the associated values that follow are:
            <ul>
            <li>AND - followed by an Iterator value</li>
            <li>OR - followed by an Iterator value</li>
            <li>NOT - followed by an Iterator value</li>
            <li>EQUALITY_MATCH - followed by the attribute name represented as a
            String, and by the attribute value represented as a byte array</li>
            <li>GREATER_OR_EQUAL - followed by the attribute name represented as a
            String, and by the attribute value represented as a byte array</li>
            <li>LESS_OR_EQUAL - followed by the attribute name represented as a
            String, and by the attribute value represented as a byte array</li>
            <li>APPROX_MATCH - followed by the attribute name represented as a
            String, and by the attribute value represented as a byte array</li>
            <li>PRESENT - followed by a attribute name respresented as a String</li>
            <li>EXTENSIBLE_MATCH - followed by the name of the matching rule
            represented as a String, by the attribute name represented
            as a String, and by the attribute value represented as a 
            byte array.</li>
            <li>SUBSTRINGS - followed by the attribute name represented as a
            String, by one or more SUBSTRING components (INITIAL, ANY,
            or FINAL) followed by the SUBSTRING value.</li>
            </ul>
            
            </summary>
            <returns> Iterator representing filter components
            </returns>
        </member>
        <member name="T:Novell.Directory.Ldap.LdapSearchResult">
            <summary>  Encapsulates a single search result that is in response to an asynchronous
            search operation.
            </summary>
            <seealso cref="M:Novell.Directory.Ldap.LdapConnection.Search(System.String,System.Int32,System.String,System.String[],System.Boolean)">
            </seealso>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapSearchResult.#ctor(Novell.Directory.Ldap.Rfc2251.RfcLdapMessage)">
            <summary> Constructs an LdapSearchResult object.
            
            </summary>
            <param name="message">The RfcLdapMessage with a search result.
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapSearchResult.#ctor(Novell.Directory.Ldap.LdapEntry,Novell.Directory.Ldap.LdapControl[])">
            <summary> Constructs an LdapSearchResult object from an LdapEntry.
            
            </summary>
            <param name="entry">the LdapEntry represented by this search result.
            
            </param>
            <param name="cont">controls associated with the search result
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapSearchResult.ToString">
            <summary> Return a String representation of this object.
            
            </summary>
            <returns> a String representing this object.
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapSearchResult.Entry">
            <summary> Returns the entry of a server's search response.
            
            </summary>
            <returns> The LdapEntry associated with this LdapSearchResult
            </returns>
        </member>
        <member name="T:Novell.Directory.Ldap.LdapSearchResultReference">
            <summary> 
            Encapsulates a continuation reference from an asynchronous search operation.
            
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapSearchResultReference.#ctor(Novell.Directory.Ldap.Rfc2251.RfcLdapMessage)">
            <summary> Constructs an LdapSearchResultReference object.
            
            </summary>
            <param name="message">The LdapMessage with a search reference.
            </param>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapSearchResultReference.Referrals">
            <summary> Returns any URLs in the object.
            
            </summary>
            <returns> The URLs.
            </returns>
        </member>
        <member name="T:Novell.Directory.Ldap.LdapSearchResults">
            <summary> An LdapSearchResults object is returned from a synchronous search
            operation. It provides access to all results received during the
            operation (entries and exceptions).
            
            </summary>
            <seealso cref="M:Novell.Directory.Ldap.LdapConnection.Search(System.String,System.Int32,System.String,System.String[],System.Boolean)">
            </seealso>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapSearchResults.#ctor(Novell.Directory.Ldap.LdapConnection,Novell.Directory.Ldap.LdapSearchQueue,Novell.Directory.Ldap.LdapSearchConstraints)">
            <summary> Constructs a queue object for search results.
            
            </summary>
            <param name="conn">The LdapConnection which initiated the search
            
            </param>
            <param name="queue">The queue for the search results.
            
            </param>
            <param name="cons">The LdapSearchConstraints associated with this search
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapSearchResults.hasMore">
            <summary> Reports if there are more search results.
            
            </summary>
            <returns> true if there are more search results.
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapSearchResults.next">
            <summary> Returns the next result as an LdapEntry.
            
            If automatic referral following is disabled or if a referral
            was not followed, next() will throw an LdapReferralException
            when the referral is received.
            
            </summary>
            <returns> The next search result as an LdapEntry.
            
            </returns>
            <exception> LdapException A general exception which includes an error
            message and an Ldap error code.
            </exception>
            <exception> LdapReferralException A referral was received and not
            followed.
            </exception>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapSearchResults.Abandon">
            <summary> Cancels the search request and clears the message and enumeration.</summary>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapSearchResults.Count">
            <summary> Returns a count of the items in the search result.
            
            Returns a count of the entries and exceptions remaining in the object.
            If the search was submitted with a batch size greater than zero,
            getCount reports the number of results received so far but not enumerated
            with next().  If batch size equals zero, getCount reports the number of
            items received, since the application thread blocks until all results are
            received.
            
            </summary>
            <returns> The number of items received but not retrieved by the application
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapSearchResults.ResponseControls">
            <summary> Returns the latest server controls returned by the server
            in the context of this search request, or null
            if no server controls were returned.
            
            </summary>
            <returns> The server controls returned with the search request, or null
            if none were returned.
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.LdapSearchResults.BatchOfResults">
            <summary> Collects batchSize elements from an LdapSearchQueue message
            queue and places them in a Vector.
            
            If the last message from the server,
            the result message, contains an error, it will be stored in the Vector
            for nextElement to process. (although it does not increment the search
            result count) All search result entries will be placed in the Vector.
            If a null is returned from getResponse(), it is likely that the search
            was abandoned.
            
            </summary>
            <returns> true if all search results have been placed in the vector.
            </returns>
        </member>
        <member name="T:Novell.Directory.Ldap.LdapSyntaxSchema">
            <summary> Represents a syntax definition in the directory schema.
            
            The LdapSyntaxSchema class represents the definition of a syntax.  It is
            used to discover the known set of syntaxes in effect for the subschema. 
            
            Although this extends LdapSchemaElement, it does not use the name or
            obsolete members. Therefore, calls to the getName method always return
            null and to the isObsolete method always returns false. There is also no
            matching getSyntaxNames method in LdapSchema. Note also that adding and
            removing syntaxes is not typically a supported feature of Ldap servers.
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapSyntaxSchema.#ctor(System.String,System.String)">
            <summary> Constructs a syntax for adding to or deleting from the schema.
            
            Adding and removing syntaxes is not typically a supported
            feature of Ldap servers. Novell eDirectory does not allow syntaxes to
            be added or removed.
            
            </summary>
            <param name="oid">        The unique object identifier of the syntax - in
            dotted numerical format.
            
            </param>
            <param name="description">An optional description of the syntax.
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapSyntaxSchema.#ctor(System.String)">
            <summary> Constructs a syntax from the raw string value returned on a schema
            query for LdapSyntaxes.
            
            </summary>
            <param name="raw">          The raw string value returned from a schema
            query for ldapSyntaxes.
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapSyntaxSchema.formatString">
            <summary> Returns a string in a format suitable for directly adding to a
            directory, as a value of the particular schema element class.
            
            </summary>
            <returns> A string representation of the syntax's definition.
            </returns>
        </member>
        <member name="T:Novell.Directory.Ldap.LdapUnbindRequest">
            <summary> Represents an Ldap Unbind Request.
            
            </summary>
            <seealso cref="M:Novell.Directory.Ldap.LdapConnection.SendRequest(Novell.Directory.Ldap.LdapMessage,Novell.Directory.Ldap.LdapMessageQueue)">
            </seealso> 
        </member>
        <member name="M:Novell.Directory.Ldap.LdapUnbindRequest.#ctor(Novell.Directory.Ldap.LdapControl[])">
            <summary> Constructs an Ldap Unbind Request.
            
            </summary>
            <param name="cont">Any controls that apply to the unbind request
            </param>
        </member>
        <member name="T:Novell.Directory.Ldap.LdapUnsolicitedNotificationListener">
            <summary> 
            An object that implements this interface can be notified when
            unsolicited messages arrive from the server. A client registers the
            object with LdapConnection.AddUnsolicitedNotificationListener. 
            
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.LdapUnsolicitedNotificationListener.messageReceived(Novell.Directory.Ldap.LdapExtendedResponse)">
            <summary> The method is called when an unsolicited message arrives from a
            server, if the object has registered with LdapCo
            LdapConnection.AddUnsolicitedNotificationListener.
            
            </summary>
            <param name="msg">    An unsolicited message received from the server.
            
            </param>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Novell.Directory.Ldap.LdapUrl" -->
        <!-- Badly formed XML comment ignored for member "M:Novell.Directory.Ldap.LdapUrl.#ctor(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:Novell.Directory.Ldap.LdapUrl.#ctor(System.String,System.Int32,System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:Novell.Directory.Ldap.LdapUrl.#ctor(System.String,System.Int32,System.String,System.String[],System.Int32,System.String,System.String[])" -->
        <!-- Badly formed XML comment ignored for member "M:Novell.Directory.Ldap.LdapUrl.#ctor(System.String,System.Int32,System.String,System.String[],System.Int32,System.String,System.String[],System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:Novell.Directory.Ldap.LdapUrl.Clone" -->
        <!-- Badly formed XML comment ignored for member "M:Novell.Directory.Ldap.LdapUrl.decode(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:Novell.Directory.Ldap.LdapUrl.encode(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:Novell.Directory.Ldap.LdapUrl.getDN" -->
        <member name="M:Novell.Directory.Ldap.LdapUrl.setDN(System.String)">
            <summary> Sets the base distinguished name encapsulated in the URL.</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Novell.Directory.Ldap.LdapUrl.ToString" -->
        <!-- Badly formed XML comment ignored for member "P:Novell.Directory.Ldap.LdapUrl.AttributeArray" -->
        <!-- Badly formed XML comment ignored for member "P:Novell.Directory.Ldap.LdapUrl.Attributes" -->
        <!-- Badly formed XML comment ignored for member "P:Novell.Directory.Ldap.LdapUrl.Extensions" -->
        <!-- Badly formed XML comment ignored for member "P:Novell.Directory.Ldap.LdapUrl.Filter" -->
        <!-- Badly formed XML comment ignored for member "P:Novell.Directory.Ldap.LdapUrl.Host" -->
        <!-- Badly formed XML comment ignored for member "P:Novell.Directory.Ldap.LdapUrl.Port" -->
        <!-- Badly formed XML comment ignored for member "P:Novell.Directory.Ldap.LdapUrl.Scope" -->
        <!-- Badly formed XML comment ignored for member "P:Novell.Directory.Ldap.LdapUrl.Secure" -->
        <member name="T:Novell.Directory.Ldap.Message">
            <summary> Encapsulates an Ldap message, its state, and its replies.</summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Message.hasReplies">
            <summary> Returns true if replies are queued
            
            </summary>
            <returns> false if no replies are queued, otherwise true
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.Message.waitForReply">
            <summary> Gets the next reply from the reply queue or waits until one is there
            
            </summary>
            <returns> the next reply message on the reply queue or null
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.Message.acceptsReplies">
            <summary> Returns true if replies are accepted for this request.
            
            </summary>
            <returns> false if replies are no longer accepted for this request
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.Message.stopTimer">
            <summary> stops the timeout timer from running</summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Message.sleepersAwake">
            <summary> Notifies all waiting threads</summary>
        </member>
        <member name="P:Novell.Directory.Ldap.Message.Count">
            <summary> Get number of messages queued.
            Don't count the last message containing result code.
            </summary>
        </member>
        <member name="P:Novell.Directory.Ldap.Message.Agent">
            <summary> sets the agent for this message</summary>
        </member>
        <member name="P:Novell.Directory.Ldap.Message.Complete">
            <summary> gets the operation complete status for this message
            
            </summary>
            <returns> the true if the operation is complete, i.e.
            the LdapResult has been received.
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.Message.Reply">
            <summary> Gets the next reply from the reply queue if one exists
            
            </summary>
            <returns> the next reply message on the reply queue or null if none
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.Message.Request">
            <summary> gets the LdapMessage request associated with this message
            
            </summary>
            <returns> the LdapMessage request associated with this message
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.Message.MessageAgent">
            <summary> gets the MessageAgent associated with this message
            
            </summary>
            <returns> the MessageAgent associated with this message
            </returns>
        </member>
        <member name="T:Novell.Directory.Ldap.Message.Timeout">
            <summary> Timer class to provide timing for messages.  Only called
            if time to wait is non zero.
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Message.Timeout.Run">
            <summary> The timeout thread.  If it wakes from the sleep, future input
            is stopped and the request is timed out.
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.MessageAgent.merge(Novell.Directory.Ldap.MessageAgent)">
            <summary> merges two message agents
            
            </summary>
            <param name="fromAgent">the agent to be merged into this one
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.MessageAgent.sleepersAwake(System.Boolean)">
            <summary> Wakes up any threads waiting for messages in the message agent
            
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.MessageAgent.isResponseReceived">
            <summary> Returns true if any responses are queued for any of the agent's messages
            
            return false if no responses are queued, otherwise true
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.MessageAgent.isResponseReceived(System.Int32)">
            <summary> Returns true if any responses are queued for the specified msgId
            
            return false if no responses are queued, otherwise true
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.MessageAgent.Abandon(System.Int32,Novell.Directory.Ldap.LdapConstraints)">
            <summary> Abandon the request associated with MsgId
            
            </summary>
            <param name="msgId">the message id to abandon
            
            </param>
            <param name="cons">constraints associated with this request
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.MessageAgent.AbandonAll">
            <summary> Abandon all requests on this MessageAgent</summary>
        </member>
        <member name="M:Novell.Directory.Ldap.MessageAgent.isComplete(System.Int32)">
            <summary> Indicates whether a specific operation is complete
            
            </summary>
            <returns> true if a specific operation is complete
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.MessageAgent.getMessage(System.Int32)">
            <summary> Returns the Message object for a given messageID
            
            </summary>
            <param name="msgid">the message ID.
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.MessageAgent.sendMessage(Novell.Directory.Ldap.Connection,Novell.Directory.Ldap.LdapMessage,System.Int32,Novell.Directory.Ldap.LdapMessageQueue,Novell.Directory.Ldap.Utilclass.BindProperties)">
            <summary> Send a request to the server.  A Message class is created
            for the specified request which causes the message to be sent.
            The request is added to the list of messages being managed by
            this agent.
            
            </summary>
            <param name="conn">the connection that identifies the server.
            
            </param>
            <param name="msg">the LdapMessage to send
            
            </param>
            <param name="timeOut">the interval to wait for the message to complete or
            <code>null</code> if infinite.
            </param>
            <param name="queue">the LdapMessageQueue associated with this request.
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.MessageAgent.getLdapMessage(System.Int32)">
            <summary> Returns a response queued, or waits if none queued
            
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.MessageAgent.debugDisplayMessages">
            <summary> Debug code to print messages in message vector</summary>
        </member>
        <member name="P:Novell.Directory.Ldap.MessageAgent.MessageArray">
            <summary> empty and return all messages owned by this agent
            
            
            </summary>
        </member>
        <member name="P:Novell.Directory.Ldap.MessageAgent.MessageIDs">
            <summary> Get a list of message ids controlled by this agent
            
            </summary>
            <returns> an array of integers representing the message ids
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.MessageAgent.AgentName">
            <summary> Get the maessage agent number for debugging
            
            </summary>
            <returns> the agent number
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.MessageAgent.Count">
            <summary> Get a count of all messages queued</summary>
        </member>
        <member name="T:Novell.Directory.Ldap.MessageVector">
            <summary> The <code>MessageVector</code> class implements additional semantics
            to Vector needed for handling messages.
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.MessageVector.findMessageById(System.Int32)">
            <summary> Finds the Message object with the given MsgID, and returns the Message
            object. It finds the object and returns it in an atomic operation.
            
            </summary>
            <param name="msgId">The msgId of the Message object to return
            
            </param>
            <returns> The Message object corresponding to this MsgId.
            
            @throws NoSuchFieldException when no object with the corresponding
            value for the MsgId field can be found.
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.MessageVector.ObjectArray">
            <summary>Returns an array containing all of the elements in this MessageVector.
            The elements returned are in the same order in the array as in the
            Vector.  The contents of the vector are cleared.
            
            </summary>
            <returns> the array containing all of the elements.
            </returns>
        </member>
        <member name="T:Novell.Directory.Ldap.Asn1.Asn1Boolean">
            <summary> This class encapsulates the ASN.1 BOOLEAN type.</summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Asn1.Asn1Object">
            <summary> This is the base class for all other Asn1 types.</summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.Asn1Object.encode(Novell.Directory.Ldap.Asn1.Asn1Encoder,System.IO.Stream)">
            <summary> Abstract method that must be implemented by each child
            class to encode itself ( an Asn1Object) directly intto 
            a output stream.
            
            </summary>
            <param name="out">The output stream onto which the encoded 
            Asn1Object will be placed.
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.Asn1Object.getIdentifier">
            <summary> Returns the identifier for this Asn1Object as an Asn1Identifier. 
            This Asn1Identifier object will include the CLASS, FORM and TAG
            for this Asn1Object.
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.Asn1Object.setIdentifier(Novell.Directory.Ldap.Asn1.Asn1Identifier)">
            <summary> Sets the identifier for this Asn1Object. This is helpful when 
            creating implicit Asn1Tagged types.
            
            </summary>
            <param name="id">An Asn1Identifier object representing the CLASS, 
            FORM and TAG)
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.Asn1Object.getEncoding(Novell.Directory.Ldap.Asn1.Asn1Encoder)">
            <summary> This method returns a byte array representing the encoded
            Asn1Object.  It in turn calls the encode method that is 
            defined in Asn1Object but will usually be implemented
            in the child Asn1 classses.
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.Asn1Object.ToString">
            <summary> Return a String representation of this Asn1Object.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Asn1.Asn1Boolean.TAG">
            <summary> ASN.1 BOOLEAN tag definition.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Asn1.Asn1Boolean.ID">
            <summary> ID is added for Optimization.
            
            ID needs only be one Value for every instance,
            thus we create it only once.
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.Asn1Boolean.#ctor(System.Boolean)">
            <summary> Call this constructor to construct an Asn1Boolean
            object from a boolean value.
            
            </summary>
            <param name="content">The boolean value to be contained in the
            this Asn1Boolean object
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.Asn1Boolean.#ctor(Novell.Directory.Ldap.Asn1.Asn1Decoder,System.IO.Stream,System.Int32)">
            <summary> Constructs an Asn1Boolean object by decoding data from an
            input stream.
            
            </summary>
            <param name="dec">The decoder object to use when decoding the
            input stream.  Sometimes a developer might want to pass
            in his/her own decoder object
            
            </param>
            <param name="in">A byte stream that contains the encoded ASN.1
            
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.Asn1Boolean.encode(Novell.Directory.Ldap.Asn1.Asn1Encoder,System.IO.Stream)">
            <summary> Encode the current instance into the
            specified output stream using the specified encoder object.
            
            </summary>
            <param name="enc">Encoder object to use when encoding self.
            
            </param>
            <param name="out">The output stream onto which the encoded byte
            stream is written.
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.Asn1Boolean.booleanValue">
            <summary> Returns the content of this Asn1Boolean as a boolean.</summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.Asn1Boolean.ToString">
            <summary> Returns a String representation of this Asn1Boolean object.</summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Asn1.Asn1Choice">
            <summary> The Asn1Choice object represents the choice of any Asn1Object. All
            Asn1Object methods are delegated to the object this Asn1Choice contains.
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.Asn1Choice.#ctor(Novell.Directory.Ldap.Asn1.Asn1Object)">
            <summary> Constructs an Asn1Choice object using an Asn1Object value.
            
            </summary>
            <param name="content">The Asn1Object that this Asn1Choice will
            encode.  Since all Asn1 objects are derived from Asn1Object
            any basic type can be passed in.
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.Asn1Choice.#ctor">
            <summary> No arg Constructor. This is used by Filter, who subsequently sets the
            content after parsing the RFC 2254 Search Filter String.
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.Asn1Choice.encode(Novell.Directory.Ldap.Asn1.Asn1Encoder,System.IO.Stream)">
            <summary> Call this method to encode the contents of this Asn1Choice
            instance into the specified output stream using the 
            specified encoder object.
            
            </summary>
            <param name="enc">Encoder object to use when encoding self.
            
            </param>
            <param name="out">The output stream onto which the encoded byte 
            stream is written.
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.Asn1Choice.choiceValue">
            <summary> Returns the CHOICE value stored in this Asn1Choice
            as an Asn1Object. 
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.Asn1Choice.getIdentifier">
            <summary> This method will return the Asn1Identifier of the 
            encoded Asn1Object.We  override the parent method
            as the identifier of an Asn1Choice depends on the 
            type of the object encoded by this Asn1Choice.
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.Asn1Choice.setIdentifier(Novell.Directory.Ldap.Asn1.Asn1Identifier)">
            <summary> Sets the identifier of the contained Asn1Object. We
            override the parent method as the identifier of 
            an Asn1Choice depends on the type of the object 
            encoded by this Asn1Choice.
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.Asn1Choice.ToString">
            <summary> Return a String representation of this Asn1Object.</summary>
        </member>
        <member name="P:Novell.Directory.Ldap.Asn1.Asn1Choice.ChoiceValue">
            <summary> Sets the CHOICE value stored in this Asn1Choice.
            
            </summary>
            <param name="content">The Asn1Object that this Asn1Choice will
            encode.  Since all Asn1 objects are derived from Asn1Object
            any basic type can be passed in.    
            </param>
        </member>
        <member name="T:Novell.Directory.Ldap.Asn1.Asn1Decoder">
            <summary> This interface defines the methods for decoding each of the ASN.1 types.
            
            Decoders which implement this interface may be used to decode any of the
            Asn1Object data types.
            
            This package also provides the BERDecoder class that can be used to 
            BER decode ASN.1 classes.  However an application might chose to use 
            its own decoder class.
            
            This interface thus allows an application to use this package to
            decode ASN.1 objects using other decoding rules if needed.  
            
            Note that Ldap packets are required to be BER encoded. Since this package
            includes a BER decoder no application provided decoder is needed for 
            building Ldap packets.
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.Asn1Decoder.decode(System.SByte[])">
            <summary> Decode an encoded value into an Asn1Object from a byte array.
            
            </summary>
            <param name="value">A byte array that points to the encoded Asn1 data
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.Asn1Decoder.decode(System.IO.Stream)">
            <summary> Decode an encoded value into an Asn1Object from an InputStream.
            
            </summary>
            <param name="in">An input stream containig the encoded ASN.1 data.
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.Asn1Decoder.decode(System.IO.Stream,System.Int32[])">
            <summary> Decode an encoded value into an Asn1Object from an InputStream.
            
            </summary>
            <param name="length">The decoded components encoded length. This value is
            handy when decoding structured types. It allows you to accumulate 
            the number of bytes decoded, so you know when the structured 
            type has decoded all of its components.
            
            </param>
            <param name="in">An input stream containig the encoded ASN.1 data.
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.Asn1Decoder.decodeBoolean(System.IO.Stream,System.Int32)">
            <summary> Decode a BOOLEAN directly from a stream. Call this method when you
            know that the next ASN.1 encoded element is a BOOLEAN
            
            </summary>
            <param name="in">An input stream containig the encoded ASN.1 data.
            
            </param>
            <param name="len">Length in bytes
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.Asn1Decoder.decodeNumeric(System.IO.Stream,System.Int32)">
            <summary> Decode a Numeric value directly from a stream.  Call this method when you
            know that the next ASN.1 encoded element is a Numeric
            
            Can be used to decodes INTEGER and ENUMERATED types.
            
            </summary>
            <param name="in">An input stream containig the encoded ASN.1 data.
            
            </param>
            <param name="len">Length in bytes    
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.Asn1Decoder.decodeOctetString(System.IO.Stream,System.Int32)">
            <summary> Decode an OCTET_STRING directly from a stream. Call this method when you
            know that the next ASN.1 encoded element is a OCTET_STRING.
            
            </summary>
            <param name="in">An input stream containig the encoded ASN.1 data.
            
            </param>
            <param name="len">Length in bytes    
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.Asn1Decoder.decodeCharacterString(System.IO.Stream,System.Int32)">
            <summary> Decode a CharacterString directly from a stream.
            
            Decodes any of the specialized character strings.
            
            </summary>
            <param name="in">An input stream containig the encoded ASN.1 data.
            
            </param>
            <param name="len">Length in bytes    
            </param>
        </member>
        <member name="T:Novell.Directory.Ldap.Asn1.Asn1Encoder">
            <summary> This interface defines the methods for encoding each of the ASN.1 types.
            
            Encoders which implement this interface may be used to encode any of the
            Asn1Object data types.
            
            This package also provides the BEREncoder class that can be used to 
            BER encode ASN.1 classes.  However an application might chose to use 
            its own encoder class.
            
            This interface thus allows an application to use this package to
            encode ASN.1 objects using other encoding rules if needed.  
            
            Note that Ldap packets are required to be BER encoded. Since this package
            includes a BER encoder no application provided encoder is needed for 
            building Ldap packets.
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.Asn1Encoder.encode(Novell.Directory.Ldap.Asn1.Asn1Boolean,System.IO.Stream)">
            <summary> Encode an Asn1Boolean directly into the provided output stream.
            
            </summary>
            <param name="b">The Asn1Boolean object to encode
            
            </param>
            <param name="out">The output stream onto which the ASN.1 object is 
            to be encoded    
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.Asn1Encoder.encode(Novell.Directory.Ldap.Asn1.Asn1Numeric,System.IO.Stream)">
            <summary> Encode an Asn1Numeric directly to a stream.
            
            Use a two's complement representation in the fewest number of octets
            possible.
            
            Can be used to encode both INTEGER and ENUMERATED values.
            
            </summary>
            <param name="n">The Asn1Numeric object to encode
            
            </param>
            <param name="out">The output stream onto which the ASN.1 object is 
            to be encoded
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.Asn1Encoder.encode(Novell.Directory.Ldap.Asn1.Asn1Null,System.IO.Stream)">
            <summary> Encode an Asn1Null directly to a stream.
            
            </summary>
            <param name="n">The Asn1Null object to encode
            
            </param>
            <param name="out">The output stream onto which the ASN.1 object is 
            to be encoded    
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.Asn1Encoder.encode(Novell.Directory.Ldap.Asn1.Asn1OctetString,System.IO.Stream)">
            <summary> Encode an Asn1OctetString directly to a stream.
            
            </summary>
            <param name="os">The Asn1OctetString object to encode
            
            </param>
            <param name="out">The output stream onto which the ASN.1 object is 
            to be encoded     
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.Asn1Encoder.encode(Novell.Directory.Ldap.Asn1.Asn1Structured,System.IO.Stream)">
            <summary> Encode an Asn1Structured directly to a stream.
            
            </summary>
            <param name="c">The Asn1Structured object to encode
            
            </param>
            <param name="out">The output stream onto which the ASN.1 object is 
            to be encoded  
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.Asn1Encoder.encode(Novell.Directory.Ldap.Asn1.Asn1Tagged,System.IO.Stream)">
            <summary> Encode an Asn1Tagged directly to a stream.
            
            </summary>
            <param name="t">The Asn1Tagged object to encode
            
            </param>
            <param name="out">The output stream onto which the ASN.1 object is 
            to be encoded      
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.Asn1Encoder.encode(Novell.Directory.Ldap.Asn1.Asn1Identifier,System.IO.Stream)">
            <summary> Encode an Asn1Identifier directly to a stream.
            
            </summary>
            <param name="id">The Asn1Identifier object to encode
            
            </param>
            <param name="out">The output stream onto which the ASN.1 object is 
            to be encoded      
            </param>
        </member>
        <member name="T:Novell.Directory.Ldap.Asn1.Asn1Enumerated">
            <summary> This class encapsulates the ASN.1 ENUMERATED type.</summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Asn1.Asn1Numeric">
            <summary> This abstract class is the base class 
            for all Asn1 numeric (integral) types. These include
            Asn1Integer and Asn1Enumerated.
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.Asn1Numeric.intValue">
            <summary> Returns the content of this Asn1Numeric object as an int.</summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.Asn1Numeric.longValue">
            <summary> Returns the content of this Asn1Numeric object as a long.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Asn1.Asn1Enumerated.TAG">
            <summary> ASN.1 tag definition for ENUMERATED</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Asn1.Asn1Enumerated.ID">
            <summary> ID is added for Optimization.
            
            ID needs only be one Value for every instance,
            thus we create it only once.
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.Asn1Enumerated.#ctor(System.Int32)">
            <summary> Call this constructor to construct an Asn1Enumerated
            object from an integer value.
            
            </summary>
            <param name="content">The integer value to be contained in the
            this Asn1Enumerated object
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.Asn1Enumerated.#ctor(System.Int64)">
            <summary> Call this constructor to construct an Asn1Enumerated
            object from a long value.
            
            </summary>
            <param name="content">The long value to be contained in the
            this Asn1Enumerated object
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.Asn1Enumerated.#ctor(Novell.Directory.Ldap.Asn1.Asn1Decoder,System.IO.Stream,System.Int32)">
            <summary> Constructs an Asn1Enumerated object by decoding data from an
            input stream.
            
            </summary>
            <param name="dec">The decoder object to use when decoding the
            input stream.  Sometimes a developer might want to pass
            in his/her own decoder object
            
            </param>
            <param name="in">A byte stream that contains the encoded ASN.1
            
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.Asn1Enumerated.encode(Novell.Directory.Ldap.Asn1.Asn1Encoder,System.IO.Stream)">
            <summary> Call this method to encode the current instance into the
            specified output stream using the specified encoder object.
            
            </summary>
            <param name="enc">Encoder object to use when encoding self.
            
            </param>
            <param name="out">The output stream onto which the encoded byte
            stream is written.
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.Asn1Enumerated.ToString">
            <summary> Return a String representation of this Asn1Enumerated.</summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Asn1.Asn1Identifier">
            <summary> This class is used to encapsulate an ASN.1 Identifier.
            
            An Asn1Identifier is composed of three parts:
            <li> a class type,</li>
            <li> a form, and</li>
            <li> a tag.</li>
            
            The class type is defined as:
            <pre>
            bit 8 7 TAG CLASS
            ------- -----------
            0 0 UNIVERSAL
            0 1 APPLICATION
            1 0 CONTEXT
            1 1 PRIVATE
            </pre>
             The form is defined as:
            <pre>
            bit 6 FORM
            ----- --------
            0 PRIMITIVE
            1 CONSTRUCTED
            </pre>
            
             Note: CONSTRUCTED types are made up of other CONSTRUCTED or PRIMITIVE
            types.
            
             The tag is defined as:
            <pre>
            bit 5 4 3 2 1 TAG
            ------------- ---------------------------------------------
            0 0 0 0 0
            . . . . .
            1 1 1 1 0 (0-30) single octet tag
            
            1 1 1 1 1 (> 30) multiple octet tag, more octets follow
            </pre>
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Asn1.Asn1Identifier.UNIVERSAL">
            <summary> Universal tag class.
            
             UNIVERSAL = 0 
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Asn1.Asn1Identifier.APPLICATION">
            <summary> Application-wide tag class.
            
             APPLICATION = 1 
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Asn1.Asn1Identifier.CONTEXT">
            <summary> Context-specific tag class.
            
             CONTEXT = 2 
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Asn1.Asn1Identifier.PRIVATE">
            <summary> Private-use tag class.
            
             PRIVATE = 3 
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.Asn1Identifier.#ctor(System.Int32,System.Boolean,System.Int32)">
            <summary> Constructs an Asn1Identifier using the classtype, form and tag.
            
            </summary>
            <param name="tagClass">As defined above.
            
            </param>
            <param name="constructed">Set to true if constructed and false if primitive.
            
            </param>
            <param name="tag">The tag of this identifier
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.Asn1Identifier.#ctor(System.IO.Stream)">
            <summary> Decode an Asn1Identifier directly from an InputStream and
            save the encoded length of the Asn1Identifier.
            
            </summary>
            <param name="in">The input stream to decode from.
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.Asn1Identifier.reset(System.IO.Stream)">
            <summary> Decode an Asn1Identifier directly from an InputStream and
            save the encoded length of the Asn1Identifier, but reuse the object.
            
            </summary>
            <param name="in">The input stream to decode from.
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.Asn1Identifier.decodeTagNumber(System.IO.Stream)">
            <summary> In the case that we have a tag number that is greater than 30, we need
            to decode a multiple octet tag number.
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.Asn1Identifier.Clone">
            <summary> Creates a duplicate, not a true clone, of this object and returns
            a reference to the duplicate.
            
            </summary>
        </member>
        <member name="P:Novell.Directory.Ldap.Asn1.Asn1Identifier.Asn1Class">
            <summary> Returns the CLASS of this Asn1Identifier as an int value.
            
            </summary>
            <seealso cref="F:Novell.Directory.Ldap.Asn1.Asn1Identifier.UNIVERSAL">
            </seealso>
            <seealso cref="F:Novell.Directory.Ldap.Asn1.Asn1Identifier.APPLICATION">
            </seealso>
            <seealso cref="F:Novell.Directory.Ldap.Asn1.Asn1Identifier.CONTEXT">
            </seealso>
            <seealso cref="F:Novell.Directory.Ldap.Asn1.Asn1Identifier.PRIVATE">
            </seealso>
        </member>
        <member name="P:Novell.Directory.Ldap.Asn1.Asn1Identifier.Constructed">
            <summary> Return a boolean indicating if the constructed bit is set.
            
            </summary>
            <returns> true if constructed and false if primitive.
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.Asn1.Asn1Identifier.Tag">
            <summary> Returns the TAG of this Asn1Identifier.</summary>
        </member>
        <member name="P:Novell.Directory.Ldap.Asn1.Asn1Identifier.EncodedLength">
            <summary> Returns the encoded length of this Asn1Identifier.</summary>
        </member>
        <member name="P:Novell.Directory.Ldap.Asn1.Asn1Identifier.Universal">
            <summary> Returns a boolean value indicating whether or not this Asn1Identifier
            has a TAG CLASS of UNIVERSAL.
            
            </summary>
            <seealso cref="F:Novell.Directory.Ldap.Asn1.Asn1Identifier.UNIVERSAL">
            </seealso>
        </member>
        <member name="P:Novell.Directory.Ldap.Asn1.Asn1Identifier.Application">
            <summary> Returns a boolean value indicating whether or not this Asn1Identifier
            has a TAG CLASS of APPLICATION.
            
            </summary>
            <seealso cref="F:Novell.Directory.Ldap.Asn1.Asn1Identifier.APPLICATION">
            </seealso>
        </member>
        <member name="P:Novell.Directory.Ldap.Asn1.Asn1Identifier.Context">
            <summary> Returns a boolean value indicating whether or not this Asn1Identifier
            has a TAG CLASS of CONTEXT-SPECIFIC.
            
            </summary>
            <seealso cref="F:Novell.Directory.Ldap.Asn1.Asn1Identifier.CONTEXT">
            </seealso>
        </member>
        <member name="P:Novell.Directory.Ldap.Asn1.Asn1Identifier.Private">
            <summary> Returns a boolean value indicating whether or not this Asn1Identifier
            has a TAG CLASS of PRIVATE.
            
            </summary>
            <seealso cref="F:Novell.Directory.Ldap.Asn1.Asn1Identifier.PRIVATE"></seealso>
        </member>
        <member name="T:Novell.Directory.Ldap.Asn1.Asn1Integer">
            <summary> This class encapsulates the ASN.1 INTEGER type.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Asn1.Asn1Integer.TAG">
            <summary> ASN.1 INTEGER tag definition.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Asn1.Asn1Integer.ID">
            <summary> ID is added for Optimization.</summary>
            <summary> ID needs only be one Value for every instance,
            thus we create it only once.
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.Asn1Integer.#ctor(System.Int32)">
            <summary> Call this constructor to construct an Asn1Integer
            object from an integer value.
            
            </summary>
            <param name="content">The integer value to be contained in the
            this Asn1Integer object
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.Asn1Integer.#ctor(System.Int64)">
            <summary> Call this constructor to construct an Asn1Integer
            object from a long value.
            
            </summary>
            <param name="content">The long value to be contained in the
            this Asn1Integer object
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.Asn1Integer.#ctor(Novell.Directory.Ldap.Asn1.Asn1Decoder,System.IO.Stream,System.Int32)">
            <summary> Constructs an Asn1Integer object by decoding data from an
            input stream.
            
            </summary>
            <param name="dec">The decoder object to use when decoding the
            input stream.  Sometimes a developer might want to pass
            in his/her own decoder object
            
            </param>
            <param name="in">A byte stream that contains the encoded ASN.1
            
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.Asn1Integer.encode(Novell.Directory.Ldap.Asn1.Asn1Encoder,System.IO.Stream)">
            <summary> Call this method to encode the current instance into the
            specified output stream using the specified encoder object.
            
            </summary>
            <param name="enc">Encoder object to use when encoding self.
            
            </param>
            <param name="out">The output stream onto which the encoded byte
            stream is written.
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.Asn1Integer.ToString">
            <summary> Returns a String representation of this Asn1Integer object.</summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Asn1.Asn1Length">
            <summary> This class provides a means to manipulate ASN.1 Length's. It will
            be used by Asn1Encoder's and Asn1Decoder's by composition.
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.Asn1Length.#ctor">
            <summary> Constructs an empty Asn1Length.  Values are added by calling reset</summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.Asn1Length.#ctor(System.Int32)">
            <summary> Constructs an Asn1Length</summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.Asn1Length.#ctor(System.IO.Stream)">
            <summary> Constructs an Asn1Length object by decoding data from an
            input stream.
            
            </summary>
            <param name="in">A byte stream that contains the encoded ASN.1
            
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.Asn1Length.reset(System.IO.Stream)">
            <summary> Resets an Asn1Length object by decoding data from an
            input stream.
            
            Note: this was added for optimization of Asn1.LBERdecoder.decode()
            
            </summary>
            <param name="in">A byte stream that contains the encoded ASN.1
            
            </param>
        </member>
        <member name="P:Novell.Directory.Ldap.Asn1.Asn1Length.Length">
            <summary> Returns the length of this Asn1Length.</summary>
        </member>
        <member name="P:Novell.Directory.Ldap.Asn1.Asn1Length.EncodedLength">
            <summary> Returns the encoded length of this Asn1Length.</summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Asn1.Asn1Null">
            <summary> This class represents the ASN.1 NULL type.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Asn1.Asn1Null.TAG">
            <summary> ASN.1 NULL tag definition.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Asn1.Asn1Null.ID">
            <summary> ID is added for Optimization.</summary>
            <summary> ID needs only be one Value for every instance,
            thus we create it only once.
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.Asn1Null.#ctor">
            <summary> Call this constructor to construct a new Asn1Null
            object.
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.Asn1Null.encode(Novell.Directory.Ldap.Asn1.Asn1Encoder,System.IO.Stream)">
            <summary> Call this method to encode the current instance into the
            specified output stream using the specified encoder object.
            
            </summary>
            <param name="enc">Encoder object to use when encoding self.
            
            </param>
            <param name="out">The output stream onto which the encoded byte
            stream is written.
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.Asn1Null.ToString">
            <summary> Return a String representation of this Asn1Null object.</summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Asn1.Asn1OctetString">
            <summary> This class encapsulates the OCTET STRING type.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Asn1.Asn1OctetString.TAG">
            <summary> ASN.1 OCTET STRING tag definition.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Asn1.Asn1OctetString.ID">
            <summary> ID is added for Optimization.
            Id needs only be one Value for every instance,
            thus we create it only once.
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.Asn1OctetString.#ctor(System.SByte[])">
            <summary> Call this constructor to construct an Asn1OctetString
            object from a byte array.
            
            </summary>
            <param name="content">A byte array representing the string that
            will be contained in the this Asn1OctetString object
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.Asn1OctetString.#ctor(System.String)">
            <summary> Call this constructor to construct an Asn1OctetString
            object from a String object.
            
            </summary>
            <param name="content">A string value that will be contained
            in the this Asn1OctetString object
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.Asn1OctetString.#ctor(Novell.Directory.Ldap.Asn1.Asn1Decoder,System.IO.Stream,System.Int32)">
            <summary> Constructs an Asn1OctetString object by decoding data from an
            input stream.
            
            </summary>
            <param name="dec">The decoder object to use when decoding the
            input stream.  Sometimes a developer might want to pass
            in his/her own decoder object
            
            </param>
            <param name="in">A byte stream that contains the encoded ASN.1
            
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.Asn1OctetString.encode(Novell.Directory.Ldap.Asn1.Asn1Encoder,System.IO.Stream)">
            <summary> Call this method to encode the current instance into the
            specified output stream using the specified encoder object.
            
            </summary>
            <param name="enc">Encoder object to use when encoding self.
            
            </param>
            <param name="out">The output stream onto which the encoded byte
            stream is written.
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.Asn1OctetString.byteValue">
            <summary> Returns the content of this Asn1OctetString as a byte array.</summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.Asn1OctetString.stringValue">
            <summary> Returns the content of this Asn1OctetString as a String.</summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.Asn1OctetString.ToString">
            <summary> Return a String representation of this Asn1Object.</summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Asn1.Asn1Sequence">
            <summary> The Asn1Sequence class can hold an ordered collection of components with
            distinct type.
            
            This class inherits from the Asn1Structured class which
            provides functionality to hold multiple Asn1 components.
            </summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Asn1.Asn1Structured">
            <summary> This class serves as the base type for all ASN.1
            structured types.
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.Asn1Structured.encode(Novell.Directory.Ldap.Asn1.Asn1Encoder,System.IO.Stream)">
            <summary> Encodes the contents of this Asn1Structured directly to an output
            stream.
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.Asn1Structured.decodeStructured(Novell.Directory.Ldap.Asn1.Asn1Decoder,System.IO.Stream,System.Int32)">
            <summary> Decode an Asn1Structured type from an InputStream.</summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.Asn1Structured.toArray">
            <summary> Returns an array containing the individual ASN.1 elements
            of this Asn1Structed object.
            
            </summary>
            <returns> an array of Asn1Objects
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.Asn1Structured.add(Novell.Directory.Ldap.Asn1.Asn1Object)">
            <summary> Adds a new Asn1Object to the end of this Asn1Structured
            object.
            
            </summary>
            <param name="value">The Asn1Object to add to this Asn1Structured
            object.
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.Asn1Structured.set_Renamed(System.Int32,Novell.Directory.Ldap.Asn1.Asn1Object)">
            <summary> Replaces the Asn1Object in the specified index position of
            this Asn1Structured object.
            
            </summary>
            <param name="index">The index into the Asn1Structured object where
            this new ANS1Object will be placed.
            
            </param>
            <param name="value">The Asn1Object to set in this Asn1Structured
            object.
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.Asn1Structured.get_Renamed(System.Int32)">
            <summary> Gets a specific Asn1Object in this structred object.
            
            </summary>
            <param name="index">The index of the Asn1Object to get from
            this Asn1Structured object.
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.Asn1Structured.size">
            <summary> Returns the number of Asn1Obejcts that have been encoded
            into this Asn1Structured class.
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.Asn1Structured.toString(System.String)">
            <summary> Creates a String representation of this Asn1Structured.
            object.
            
            </summary>
            <param name="type">the Type to put in the String representing this structured object
            
            </param>
            <returns> the String representation of this object.
            </returns>
        </member>
        <member name="F:Novell.Directory.Ldap.Asn1.Asn1Sequence.TAG">
            <summary> ASN.1 SEQUENCE tag definition.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Asn1.Asn1Sequence.ID">
            <summary> ID is added for Optimization.
            
            id needs only be one Value for every instance Thus we create it only once.
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.Asn1Sequence.#ctor">
            <summary> Constructs an Asn1Sequence object with no actual Asn1Objects in it.
            
            Assumes a default size of 10 elements.
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.Asn1Sequence.#ctor(System.Int32)">
            <summary> Constructs an Asn1Sequence object with the specified
            number of placeholders for Asn1Objects.
            
            It should be noted there are no actual Asn1Objects in this
            SequenceOf object.
            
            </summary>
            <param name="size">Specifies the initial size of the collection.
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.Asn1Sequence.#ctor(Novell.Directory.Ldap.Asn1.Asn1Object[],System.Int32)">
            <summary> Constructs an Asn1Sequence object with an array representing an
            Asn1 sequence.
            
            </summary>
            <param name="newContent">the array containing the Asn1 data for the sequence
            
            </param>
            <param name="size">Specifies the number of items in the array
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.Asn1Sequence.#ctor(Novell.Directory.Ldap.Asn1.Asn1Decoder,System.IO.Stream,System.Int32)">
            <summary> Constructs an Asn1Sequence object by decoding data from an
            input stream.
            
            </summary>
            <param name="dec">The decoder object to use when decoding the
            input stream.  Sometimes a developer might want to pass
            in his/her own decoder object
            
            </param>
            <param name="in">A byte stream that contains the encoded ASN.1
            
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.Asn1Sequence.ToString">
            <summary> Return a String representation of this Asn1Sequence.</summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Asn1.Asn1SequenceOf">
            <summary> The Asn1SequenceOf class is used to hold an ordered collection
            of components with identical type.  This class inherits
            from the Asn1Structured class which already provides
            functionality to hold multiple Asn1 components.
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Asn1.Asn1SequenceOf.TAG">
            <summary> ASN.1 SEQUENCE OF tag definition.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Asn1.Asn1SequenceOf.ID">
            <summary> ID is added for Optimization.
            
            ID needs only be one Value for every instance,
            thus we create it only once.
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.Asn1SequenceOf.#ctor">
            <summary> Constructs an Asn1SequenceOf object with no actual
            Asn1Objects in it. Assumes a default size of 5 elements.
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.Asn1SequenceOf.#ctor(System.Int32)">
            <summary> Constructs an Asn1SequenceOf object with the specified
            number of placeholders for Asn1Objects. However there
            are no actual Asn1Objects in this SequenceOf object.
            
            </summary>
            <param name="size">Specifies the initial size of the collection.
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.Asn1SequenceOf.#ctor(Novell.Directory.Ldap.Asn1.Asn1Sequence)">
            <summary> A copy constructor which creates an Asn1SequenceOf from an
            instance of Asn1Sequence.
            
            Since SEQUENCE and SEQUENCE_OF have the same identifier, the decoder
            will always return a SEQUENCE object when it detects that identifier.
            In order to take advantage of the Asn1SequenceOf type, we need to be
            able to construct this object when knowingly receiving an
            Asn1Sequence.
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.Asn1SequenceOf.#ctor(Novell.Directory.Ldap.Asn1.Asn1Decoder,System.IO.Stream,System.Int32)">
            <summary> Constructs an Asn1SequenceOf object by decoding data from an
            input stream.
            
            </summary>
            <param name="dec">The decoder object to use when decoding the
            input stream.  Sometimes a developer might want to pass
            in his/her own decoder object
            
            </param>
            <param name="in">A byte stream that contains the encoded ASN.1
            
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.Asn1SequenceOf.ToString">
            <summary> Returns a String representation of this Asn1SequenceOf object</summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Asn1.Asn1Set">
            <summary> The Asn1Set class can hold an unordered collection of components with
            distinct type. This class inherits from the Asn1Structured class
            which already provides functionality to hold multiple Asn1 components.
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Asn1.Asn1Set.TAG">
            <summary> ASN.1 SET tag definition.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Asn1.Asn1Set.ID">
            <summary> ID is added for Optimization.</summary>
            <summary> ID needs only be one Value for every instance,
            thus we create it only once.
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.Asn1Set.#ctor">
            <summary> Constructs an Asn1Set object with no actual
            Asn1Objects in it. Assumes a default size of 5 elements.
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.Asn1Set.#ctor(System.Int32)">
            <summary> Constructs an Asn1Set object with the specified
            number of placeholders for Asn1Objects. However there
            are no actual Asn1Objects in this SequenceOf object.
            
            </summary>
            <param name="size">Specifies the initial size of the collection.
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.Asn1Set.#ctor(Novell.Directory.Ldap.Asn1.Asn1Decoder,System.IO.Stream,System.Int32)">
            <summary> Constructs an Asn1Set object by decoding data from an
            input stream.
            
            </summary>
            <param name="dec">The decoder object to use when decoding the
            input stream.  Sometimes a developer might want to pass
            in his/her own decoder object
            
            </param>
            <param name="in">A byte stream that contains the encoded ASN.1
            
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.Asn1Set.ToString">
            <summary> Returns a String representation of this Asn1Set.</summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Asn1.Asn1SetOf">
            <summary> The Asn1Set class can hold an unordered collection of components with
            identical type. This class inherits from the Asn1Structured class
            which already provides functionality to hold multiple Asn1 components.
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Asn1.Asn1SetOf.TAG">
            <summary> ASN.1 SET OF tag definition.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Asn1.Asn1SetOf.ID">
            <summary> ID is added for Optimization.
            
            Id needs only be one Value for every instance,
            thus we create it only once.
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.Asn1SetOf.#ctor">
            <summary> Constructs an Asn1SetOf object with no actual
            Asn1Objects in it. Assumes a default size of 5 elements.
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.Asn1SetOf.#ctor(System.Int32)">
            <summary> Constructs an Asn1SetOf object with the specified
            number of placeholders for Asn1Objects. However there
            are no actual Asn1Objects in this SequenceOf object.
            
            </summary>
            <param name="size">Specifies the initial size of the collection.
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.Asn1SetOf.#ctor(Novell.Directory.Ldap.Asn1.Asn1Set)">
            <summary> A copy constructor that creates an Asn1SetOf from an instance of Asn1Set.
            
            Since SET and SET_OF have the same identifier, the decoder
            will always return a SET object when it detects that identifier.
            In order to take advantage of the Asn1SetOf type, we need to be
            able to construct this object when knowingly receiving an
            Asn1Set.
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.Asn1SetOf.ToString">
            <summary> Return a String representation of this Asn1SetOf.</summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Asn1.Asn1Tagged">
            <summary> The Asn1Tagged class can hold a base Asn1Object with a distinctive tag
            describing the type of that base object. It also maintains a boolean value
            indicating whether the value should be encoded by EXPLICIT or IMPLICIT
            means. (Explicit is true by default.)
            
            If the type is encoded IMPLICITLY, the base types form, length and content
            will be encoded as usual along with the class type and tag specified in
            the constructor of this Asn1Tagged class.
            
            If the type is to be encoded EXPLICITLY, the base type will be encoded as
            usual after the Asn1Tagged identifier has been encoded.
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.Asn1Tagged.#ctor(Novell.Directory.Ldap.Asn1.Asn1Identifier,Novell.Directory.Ldap.Asn1.Asn1Object)">
            <summary> Constructs an Asn1Tagged object using the provided 
            AN1Identifier and the Asn1Object.
            
            The explicit flag defaults to true as per the spec.
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.Asn1Tagged.#ctor(Novell.Directory.Ldap.Asn1.Asn1Identifier,Novell.Directory.Ldap.Asn1.Asn1Object,System.Boolean)">
            <summary> Constructs an Asn1Tagged object.</summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.Asn1Tagged.#ctor(Novell.Directory.Ldap.Asn1.Asn1Decoder,System.IO.Stream,System.Int32,Novell.Directory.Ldap.Asn1.Asn1Identifier)">
            <summary> Constructs an Asn1Tagged object by decoding data from an 
            input stream.
            
            </summary>
            <param name="dec">The decoder object to use when decoding the
            input stream.  Sometimes a developer might want to pass
            in his/her own decoder object
            
            </param>
            <param name="in">A byte stream that contains the encoded ASN.1
            
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.Asn1Tagged.encode(Novell.Directory.Ldap.Asn1.Asn1Encoder,System.IO.Stream)">
            <summary> Call this method to encode the current instance into the 
            specified output stream using the specified encoder object.
            
            </summary>
            <param name="enc">Encoder object to use when encoding self.
            
            </param>
            <param name="out">The output stream onto which the encoded byte 
            stream is written.
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.Asn1Tagged.taggedValue">
            <summary> Returns the Asn1Object stored in this Asn1Tagged object</summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.Asn1Tagged.ToString">
            <summary> Return a String representation of this Asn1Object.</summary>
        </member>
        <member name="P:Novell.Directory.Ldap.Asn1.Asn1Tagged.TaggedValue">
            <summary> Sets the Asn1Object tagged value</summary>
        </member>
        <member name="P:Novell.Directory.Ldap.Asn1.Asn1Tagged.Explicit">
            <summary> Returns a boolean value indicating if this object uses
            EXPLICIT tagging.
            </summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Asn1.LBERDecoder">
            <summary> This class provides LBER decoding routines for ASN.1 Types. LBER is a
            subset of BER as described in the following taken from 5.1 of RFC 2251:
            
            5.1. Mapping Onto BER-based Transport Services
            
            The protocol elements of Ldap are encoded for exchange using the
            Basic Encoding Rules (BER) [11] of ASN.1 [3]. However, due to the
            high overhead involved in using certain elements of the BER, the
            following additional restrictions are placed on BER-encodings of Ldap
            protocol elements:
            
            <li>(1) Only the definite form of length encoding will be used.</li>
            
            <li>(2) OCTET STRING values will be encoded in the primitive form only.</li>
            
            <li>(3) If the value of a BOOLEAN type is true, the encoding MUST have
            its contents octets set to hex "FF".</li>
            
            <li>(4) If a value of a type is its default value, it MUST be absent.
            Only some BOOLEAN and INTEGER types have default values in this
            protocol definition.
            
            These restrictions do not apply to ASN.1 types encapsulated inside of
            OCTET STRING values, such as attribute values, unless otherwise
            noted.</li>
            
            [3] ITU-T Rec. X.680, "Abstract Syntax Notation One (ASN.1) -
            Specification of Basic Notation", 1994.
            
            [11] ITU-T Rec. X.690, "Specification of ASN.1 encoding rules: Basic,
            Canonical, and Distinguished Encoding Rules", 1994.
            
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.LBERDecoder.decode(System.SByte[])">
            <summary> Decode an LBER encoded value into an Asn1Type from a byte array.</summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.LBERDecoder.decode(System.IO.Stream)">
            <summary> Decode an LBER encoded value into an Asn1Type from an InputStream.</summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.LBERDecoder.decode(System.IO.Stream,System.Int32[])">
            <summary> Decode an LBER encoded value into an Asn1Object from an InputStream.
            
             This method also returns the total length of this encoded
            Asn1Object (length of type + length of length + length of content)
            in the parameter len. This information is helpful when decoding
            structured types.
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.LBERDecoder.decodeBoolean(System.IO.Stream,System.Int32)">
            <summary> Decode a boolean directly from a stream.</summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.LBERDecoder.decodeNumeric(System.IO.Stream,System.Int32)">
            <summary> Decode a Numeric type directly from a stream. Decodes INTEGER
            and ENUMERATED types.
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.LBERDecoder.decodeOctetString(System.IO.Stream,System.Int32)">
            <summary> Decode an OctetString directly from a stream.</summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.LBERDecoder.decodeCharacterString(System.IO.Stream,System.Int32)">
            <summary> Decode a CharacterString directly from a stream.</summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Asn1.LBEREncoder">
            <summary> This class provides LBER encoding routines for ASN.1 Types. LBER is a
            subset of BER as described in the following taken from 5.1 of RFC 2251:
            
            5.1. Mapping Onto BER-based Transport Services
            
            The protocol elements of Ldap are encoded for exchange using the
            Basic Encoding Rules (BER) [11] of ASN.1 [3]. However, due to the
            high overhead involved in using certain elements of the BER, the
            following additional restrictions are placed on BER-encodings of Ldap
            protocol elements:
            
            <li>(1) Only the definite form of length encoding will be used.</li>
            
            <li>(2) OCTET STRING values will be encoded in the primitive form only.</li>
            
            <li>(3) If the value of a BOOLEAN type is true, the encoding MUST have
            its contents octets set to hex "FF".</li>
            
            <li>(4) If a value of a type is its default value, it MUST be absent.
            Only some BOOLEAN and INTEGER types have default values in this
            protocol definition.
            
            These restrictions do not apply to ASN.1 types encapsulated inside of
            OCTET STRING values, such as attribute values, unless otherwise
            noted.</li>
            
            [3] ITU-T Rec. X.680, "Abstract Syntax Notation One (ASN.1) -
            Specification of Basic Notation", 1994.
            
            [11] ITU-T Rec. X.690, "Specification of ASN.1 encoding rules: Basic,
            Canonical, and Distinguished Encoding Rules", 1994.
            
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.LBEREncoder.encode(Novell.Directory.Ldap.Asn1.Asn1Boolean,System.IO.Stream)">
            <summary> BER Encode an Asn1Boolean directly into the specified output stream.</summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.LBEREncoder.encode(Novell.Directory.Ldap.Asn1.Asn1Numeric,System.IO.Stream)">
            <summary> Encode an Asn1Numeric directly into the specified outputstream.
            
            Use a two's complement representation in the fewest number of octets
            possible.
            
            Can be used to encode INTEGER and ENUMERATED values.
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.LBEREncoder.encode(Novell.Directory.Ldap.Asn1.Asn1Null,System.IO.Stream)">
            <summary> Encode an Asn1Null directly into the specified outputstream.</summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.LBEREncoder.encode(Novell.Directory.Ldap.Asn1.Asn1OctetString,System.IO.Stream)">
            <summary> Encode an Asn1OctetString directly into the specified outputstream.</summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.LBEREncoder.encode(Novell.Directory.Ldap.Asn1.Asn1Structured,System.IO.Stream)">
            <summary> Encode an Asn1Structured into the specified outputstream.  This method
            can be used to encode SET, SET_OF, SEQUENCE, SEQUENCE_OF
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.LBEREncoder.encode(Novell.Directory.Ldap.Asn1.Asn1Tagged,System.IO.Stream)">
            <summary> Encode an Asn1Tagged directly into the specified outputstream.</summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.LBEREncoder.encode(Novell.Directory.Ldap.Asn1.Asn1Identifier,System.IO.Stream)">
            <summary> Encode an Asn1Identifier directly into the specified outputstream.</summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Asn1.LBEREncoder.encodeTagInteger(System.Int32,System.IO.Stream)">
            <summary> Encodes the provided tag into the outputstream.</summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Controls.LdapEntryChangeControl">
            <summary>  LdapEntryChangeControl is a Server Control returned at the request
            of the client in response to a persistent search request. It
            contains additional information about a change such as what type of
            change occurred.
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Controls.LdapEntryChangeControl.#ctor(System.String,System.Boolean,System.SByte[])">
            <summary>  This constructor is called by the SDK to create an
            LdapEntryChangeControl. This constructor should NOT be called by
            application developers. It must be public since it resides in a
            different package than the classes that call it.
            The Entry Change Control is defined as follows:
            EntryChangeNotification ::= SEQUENCE {
            changeType ENUMERATED {
            add             (1),
            delete          (2),
            modify          (4),
            modDN           (8)
            },
            previousDN   LdapDN OPTIONAL,     -- modifyDN ops. only
            changeNumber INTEGER OPTIONAL     -- if supported
            }
            
            </summary>
            <param name="oid">    The OID of the control, as a dotted string.
            
            </param>
            <param name="critical">  True if the Ldap operation should be discarded if
            the control is not supported. False if
            the operation can be processed without the control.
            
            </param>
            <param name="value">    The control-specific data.
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.Controls.LdapEntryChangeControl.ToString">
            <summary>  Returns a string representation of the control for debugging.</summary>
        </member>
        <member name="P:Novell.Directory.Ldap.Controls.LdapEntryChangeControl.HasChangeNumber">
            <summary>  returns the record number of the change in the servers change log.
            
            </summary>
            <returns>  the record number of the change in the server's change log.
            The server may not return a change number. In this case the return
            value is -1
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.Controls.LdapEntryChangeControl.ChangeNumber">
            <summary>  returns the record number of the change in the servers change log.
            
            </summary>
            <returns>  the record number of the change in the server's change log.
            The server may not return a change number. In this case the return
            value is -1
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.Controls.LdapEntryChangeControl.ChangeType">
            <summary>  Returns the type of change that occured
            
            </summary>
            <returns>  returns one of the following values indicating the type of
            change that occurred:
            LdapPersistSearchControl.ADD
            LdapPersistSearchControl.DELETE
            LdapPersistSearchControl.MODIFY
            LdapPersistSearchControl.MODDN.
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.Controls.LdapEntryChangeControl.PreviousDN">
            <summary>  Returns the previous DN of the entry, if it was renamed.
            
            </summary>
            <returns>  the previous DN of the entry if the entry was renamed (ie. if the
            change type is LdapersistSearchControl.MODDN.
            </returns>
        </member>
        <member name="T:Novell.Directory.Ldap.Controls.LdapPersistSearchControl">
            <summary>  LdapPersistSearchControl is a Server Control that allows a client
            to receive notifications from the server of changes to entries within
            the searches result set. The client can be notified when an entry is
            added to the result set, when an entry is deleted from the result set,
            when a DN has been changed or when and attribute value has been changed.
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Controls.LdapPersistSearchControl.ADD">
            <summary>  Change type specifying that you want to track additions of new entries
            to the directory.
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Controls.LdapPersistSearchControl.DELETE">
            <summary>  Change type specifying that you want to track removals of entries from
            the directory.
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Controls.LdapPersistSearchControl.MODIFY">
            <summary>  Change type specifying that you want to track modifications of entries
            in the directory.
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Controls.LdapPersistSearchControl.MODDN">
            <summary>  Change type specifying that you want to track modifications of the DNs
            of entries in the directory.
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Controls.LdapPersistSearchControl.requestOID">
            <summary> The requestOID of the persistent search control</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Controls.LdapPersistSearchControl.responseOID">
            <summary> The responseOID of the psersistent search - entry change control</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Controls.LdapPersistSearchControl.ANY">
            <summary>  Change type specifying that you want to track any of the above
            modifications.
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Controls.LdapPersistSearchControl.#ctor">
            <summary>  The default constructor. A control with changes equal to ANY,
            isCritical equal to true, changesOnly equal to true, and
            returnControls equal to true
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Controls.LdapPersistSearchControl.#ctor(System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>  Constructs an LdapPersistSearchControl object according to the
            supplied parameters. The resulting control is used to specify a
            persistent search.
            
            </summary>
            <param name="changeTypes"> the change types to monitor. The bitwise OR of any
            of the following values:
            <li>                           LdapPersistSearchControl.ADD</li>
            <li>                           LdapPersistSearchControl.DELETE</li>
            <li>                           LdapPersistSearchControl.MODIFY</li>
            <li>                           LdapPersistSearchControl.MODDN</li>
            To track all changes the value can be set to:
            <li>                           LdapPersistSearchControl.ANY</li>
            
            </param>
            <param name="changesOnly"> true if you do not want the server to return
            all existing entries in the directory that match the search
            criteria. (Use this if you just want the changed entries to be
            returned.)
            
            </param>
            <param name="returnControls"> true if you want the server to return entry
            change controls with each entry in the search results. You need to
            return entry change controls to discover what type of change
            and other additional information about the change.
            
            </param>
            <param name="isCritical"> true if this control is critical to the search
            operation. If true and the server does not support this control,
            the server will not perform the search at all.
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.Controls.LdapPersistSearchControl.setValue">
            <summary>  Sets the encoded value of the LdapControlClass</summary>
        </member>
        <member name="P:Novell.Directory.Ldap.Controls.LdapPersistSearchControl.ChangeTypes">
            <summary>  Returns the change types to be monitored as a logical OR of any or
            all of these values: ADD, DELETE, MODIFY, and/or MODDN.
            
            </summary>
            <returns>  the change types to be monitored. The logical or of any of
            the following values: ADD, DELETE, MODIFY, and/or MODDN.
            </returns>
            <summary>  Sets the change types to be monitored.
            
            types  The change types to be monitored as a logical OR of any or all
            of these types: ADD, DELETE, MODIFY, and/or MODDN. Can also be set
            to the value ANY which is defined as the logical OR of all of the
            preceding values.
            </summary>
        </member>
        <member name="P:Novell.Directory.Ldap.Controls.LdapPersistSearchControl.ReturnControls">
            <summary>  Returns true if entry change controls are to be returned with the
            search results.
            
            </summary>
            <returns>  true if entry change controls are to be returned with the
            search results. Otherwise, false is returned
            </returns>
            <summary>  When set to true, requests that entry change controls be returned with
            the search results.
            
            </summary>
            <param name="returnControls">  true to return entry change controls.
            </param>
        </member>
        <member name="P:Novell.Directory.Ldap.Controls.LdapPersistSearchControl.ChangesOnly">
            <summary>  getChangesOnly returns true if only changes are to be returned.
            Results from the initial search are not returned.
            
            </summary>
            <returns>  true of only changes are to be returned
            </returns>
            <summary>  When set to true, requests that only changes be returned, results from
            the initial search are not returned.
            </summary>
            <param name="changesOnly"> true to skip results for the initial search
            </param>
        </member>
        <member name="T:Novell.Directory.Ldap.Controls.LdapSortControl">
            <summary>  LdapSortControl is a Server Control to specify how search results are
            to be sorted by the server. If a server does not support
            sorting in general or for a particular query, the results will be
            returned unsorted, along with a control indicating why they were not
            sorted (or that sort controls are not supported). If the control was
            marked "critical", the whole search operation will fail if the sort
            control is not supported.
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Controls.LdapSortControl.requestOID">
            <summary> The requestOID of the sort control</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Controls.LdapSortControl.responseOID">
            <summary> The responseOID of the sort control</summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Controls.LdapSortControl.#ctor(Novell.Directory.Ldap.Controls.LdapSortKey,System.Boolean)">
            <summary> Constructs a sort control with a single key.
            
            </summary>
            <param name="key">    A sort key object, which specifies attribute,
            order, and optional matching rule.
            
            </param>
            <param name="critical	True">if the search operation is to fail if the
            server does not support this control.
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.Controls.LdapSortControl.#ctor(Novell.Directory.Ldap.Controls.LdapSortKey[],System.Boolean)">
            <summary> Constructs a sort control with multiple sort keys.
            
            </summary>
            <param name="keys		An">array of sort key objects, to be processed in
            order.
            
            </param>
            <param name="critical	True">if the search operation is to fail if the
            server does not support this control.
            </param>
        </member>
        <member name="T:Novell.Directory.Ldap.Controls.LdapSortKey">
            <summary> Encapsulates parameters for sorting search results.
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Controls.LdapSortKey.#ctor(System.String)">
            <summary> Constructs a new LdapSortKey object using an attribute as the sort key.
            
            </summary>
            <param name="keyDescription">The single attribute to use for sorting. If the
            name is preceded by a minus sign (-), the sorting
            is done in reverse (descending) order. 
            An OID for a matching rule may be appended
            following a ":".
            
            Examples:
            <ul>
            <li> "cn" (sorts in ascending order by the cn attribute)</li>
            <li> "-cn" (sorts in descending order by the cn attribute) </li>
            <li> "cn:1.2.3.4.5" (sorts in ascending order by the cn attribute
            using the matching rule 1.2.3.4.5) </li>
            </ul>
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.Controls.LdapSortKey.#ctor(System.String,System.Boolean)">
            <summary> Constructs a new LdapSortKey object with the specified attribute name
            and sort order.
            
            </summary>
            <param name="key">    The single attribute to use for sorting.
            
            </param>
            <param name="reverse">If true, sorting is done in descending order. If false,
            sorting is done in ascending order.
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.Controls.LdapSortKey.#ctor(System.String,System.Boolean,System.String)">
            <summary> Constructs a new LdapSortKey object with the specified attribute name,
            sort order, and a matching rule.
            
            </summary>
            <param name="key">    The attribute name (for example, "cn") to use for sorting.
            
            </param>
            <param name="reverse">  If true, sorting is done in descending order. If false,
            sorting is done in ascending order.
            
            </param>
            <param name="matchRule">  The object ID (OID) of a matching rule used for
            collation. If the object will be used to request
            server-side sorting of search results, it should
            be the OID of a matching rule known to be
            supported by that server.
            </param>
        </member>
        <member name="P:Novell.Directory.Ldap.Controls.LdapSortKey.Key">
            <summary> Returns the attribute to used for sorting.
            
            </summary>
            <returns> The name of the attribute used for sorting.
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.Controls.LdapSortKey.Reverse">
            <summary> Returns the sorting order, ascending or descending.
            
            </summary>
            <returns> True if the sorting is done is descending order; false, if the
            sorting is done is ascending order.
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.Controls.LdapSortKey.MatchRule">
            <summary> Returns the OID to be used as a matching rule.
            
            </summary>
            <returns> The OID to be used as matching rule, or null if none is to be
            used.
            </returns>
        </member>
        <member name="T:Novell.Directory.Ldap.Controls.LdapSortResponse">
            <summary>  LdapSortResponse - will be added in newer version of Ldap
            Controls draft
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Controls.LdapSortResponse.#ctor(System.String,System.Boolean,System.SByte[])">
            <summary> This constructor is usually called by the SDK to instantiate an
            a LdapControl corresponding to the Server response to a Ldap
            Sort Control request.  Application programmers should not have
            any reason to call the constructor.  This constructor besides
            constructing a LdapControl object parses the contents of the response
            control.
            
            RFC 2891 defines this response control as follows:
            
            The controlValue is an OCTET STRING, whose
            value is the BER encoding of a value of the following SEQUENCE:
            SortResult ::= SEQUENCE {
            sortResult  ENUMERATED {
            success                   (0), -- results are sorted
            operationsError           (1), -- server internal failure
            timeLimitExceeded         (3), -- timelimit reached before
            -- sorting was completed
            strongAuthRequired        (8), -- refused to return sorted
            -- results via insecure
            -- protocol
            adminLimitExceeded       (11), -- too many matching entries
            -- for the server to sort
            noSuchAttribute          (16), -- unrecognized attribute
            -- type in sort key
            inappropriateMatching    (18), -- unrecognized or
            -- inappropriate matching
            -- rule in sort key
            insufficientAccessRights (50), -- refused to return sorted
            -- results to this client
            busy                     (51), -- too busy to process
            unwillingToPerform       (53), -- unable to sort
            other                    (80)
            },
            attributeType [0] AttributeDescription OPTIONAL }
            
            
            </summary>
            <param name="oid">    The OID of the control, as a dotted string.
            
            </param>
            <param name="critical">  True if the Ldap operation should be discarded if
            the control is not supported. False if
            the operation can be processed without the control.
            
            </param>
            <param name="values">    The control-specific data.
            </param>
        </member>
        <member name="P:Novell.Directory.Ldap.Controls.LdapSortResponse.FailedAttribute">
            <summary>  If not null, this returns the attribute that caused the sort
            operation to fail.
            </summary>
        </member>
        <member name="P:Novell.Directory.Ldap.Controls.LdapSortResponse.ResultCode">
            <summary> Returns the result code from the sort</summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Controls.LdapVirtualListControl">
            <summary> LdapVirtualListControl is a Server Control used to specify
            that results from a search are to be returned in pages - which are
            subsets of the entire virtual result set.
            
            On success, an updated LdapVirtualListResponse object is
            returned as a response Control, containing information on the virtual
            list size and the actual first index. This object can then be used
            by the client with a new requested position or length and sent to the
            server to obtain a different segment of the virtual list.
            
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Controls.LdapVirtualListControl.requestOID">
            <summary> The Request OID for a VLV Request</summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Controls.LdapVirtualListControl.#ctor(System.String,System.Int32,System.Int32)">
            <summary> Constructs a virtual list control using the specified filter
            expression.
            
            The expression specifies the first entry to be used for the
            virtual search results. The other two paramers are the number of
            entries before and after a located index to be returned.
            
            </summary>
            <param name="jumpTo">           A search expression that defines the first
            element to be returned in the virtual search results. The filter
            expression in the search operation itself may be, for example,
            "objectclass=person" and the jumpTo expression in the virtual
            list control may be "cn=m*", to retrieve a subset of entries
            starting at or centered around those with a common name beginning
            with the letter "M". 
            
            </param>
            <param name="beforeCount">   The number of entries before startIndex (the
            reference entry) to be returned. 
            
            </param>
            <param name="afterCount">       The number of entries after startIndex to be
            returned. 
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.Controls.LdapVirtualListControl.#ctor(System.String,System.Int32,System.Int32,System.String)">
            <summary> Constructs a virtual list control using the specified filter
            expression along with an optional server context.
            
            The expression specifies the first entry to be used for the
            virtual search results. The other two paramers are the number of
            entries before and after a located index to be returned.
            
            </summary>
            <param name="jumpTo">   A search expression that defines the first
            element to be returned in the virtual search results. The filter
            expression in the search operation itself may be, for example,
            "objectclass=person" and the jumpTo expression in the virtual
            list control may be "cn=m*", to retrieve a subset of entries
            starting at or centered around those with a common name beginning
            with the letter "M".
            
            </param>
            <param name="beforeCount">The number of entries before startIndex (the
            reference entry) to be returned. 
            
            </param>
            <param name="afterCount">The number of entries after startIndex to be
            returned. 
            
            </param>
            <param name="context">Used by some implementations to process requests
            more efficiently. The context should be null on the first search,
            and thereafter it should be whatever was returned by the server in the
            virtual list response control.
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.Controls.LdapVirtualListControl.BuildTypedVLVRequest">
            <summary>Private method used to construct the ber encoded control
            Used only when using the typed mode of VLV Control.
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Controls.LdapVirtualListControl.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary> Use this constructor to fetch a subset when the size of the
            virtual list is known,
            
            
            </summary>
            <param name="beforeCount">The number of entries before startIndex (the
            reference entry) to be returned. 
            
            </param>
            <param name="afterCount">   The number of entries after startIndex to be
            returned.
            
            </param>
            <param name="startIndex">The index of the reference entry to be returned.
            
            </param>
            <param name="contentCount">The total number of entries assumed to be in the
            list. This is a number returned on a previous search, in the
            LdapVirtualListResponse. The server may use this number to adjust
            the returned subset offset.
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.Controls.LdapVirtualListControl.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary> Use this constructor to fetch a subset when the size of the
            virtual list is known,
            
            
            </summary>
            <param name="beforeCount">   The number of entries before startIndex (the
            reference entry) to be returned.
            
            </param>
            <param name="afterCount">       The number of entries after startIndex to be
            returned.
            
            </param>
            <param name="startIndex">    The index of the reference entry to be
            returned.
            
            </param>
            <param name="contentCount">   The total number of entries assumed to be in the
            list. This is a number returned on a previous search, in the
            LdapVirtualListResponse. The server may use this number to adjust
            the returned subset offset.
            
            </param>
            <param name="context">       Used by some implementations to process requests
            more efficiently. The context should be null on the first search,
            and thereafter it should be whatever was returned by the server in the
            virtual list response control.
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.Controls.LdapVirtualListControl.BuildIndexedVLVRequest">
            <summary>Private method used to construct the ber encoded control
            Used only when using the Indexed mode of VLV Control
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Controls.LdapVirtualListControl.setRange(System.Int32,System.Int32,System.Int32)">
            <summary> Sets the center or starting list index to return, and the number of
            results before and after.
            
            
            </summary>
            <param name="listIndex">       The center or starting list index to be
            returned. 
            
            </param>
            <param name="beforeCount">       The number of entries before "listIndex" to be
            returned. 
            
            </param>
            <param name="afterCount">       The number of entries after "listIndex" to be
            returned. 
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.Controls.LdapVirtualListControl.setRange(System.String,System.Int32,System.Int32)">
            <summary> Sets the center or starting list index to return, and the number of
            results before and after.
            
            
            </summary>
            <param name="jumpTo">A search expression that defines the first
            element to be returned in the virtual search results. The filter
            expression in the search operation itself may be, for example,
            "objectclass=person" and the jumpTo expression in the virtual
            list control may be "cn=m*", to retrieve a subset of entries
            starting at or centered around those with a common name
            beginning with the letter "M".
            
            </param>
            <param name="beforeCount">   The number of entries before "listIndex" to be
            returned.
            
            </param>
            <param name="afterCount">The number of entries after "listIndex" to be
            returned.
            </param>
        </member>
        <member name="P:Novell.Directory.Ldap.Controls.LdapVirtualListControl.AfterCount">
            <summary>    Returns the number of entries after the top/center one to return per
            page of results.
            </summary>
        </member>
        <member name="P:Novell.Directory.Ldap.Controls.LdapVirtualListControl.BeforeCount">
            <summary>    Returns the number of entries before the top/center one to return per
            page of results.
            </summary>
        </member>
        <member name="P:Novell.Directory.Ldap.Controls.LdapVirtualListControl.ListSize">
            <summary>    Returns the size of the virtual search results list. For a newly
            constructed control - one which is not the result of parseResponse on
            a control returned by a server - the method returns -1.
            </summary>
            <summary>    Sets the assumed size of the virtual search results list. This will
            typically be a number returned on a previous virtual list request in
            an LdapVirtualListResponse.
            </summary>
        </member>
        <member name="P:Novell.Directory.Ldap.Controls.LdapVirtualListControl.Context">
            <summary>   Returns the cookie used by some servers to optimize the processing of
            virtual list requests.
            </summary>
            <summary>    Sets the cookie used by some servers to optimize the processing of
            virtual list requests. It should be the context field returned in a
            virtual list response control for the same search.
            </summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Controls.LdapVirtualListResponse">
            <summary> 
            LdapVirtualListResponse is a Server Control returned by the server in
            response to a virtual list search request.
            </summary>
            <summary> 
            In response to a VLV Search request the server returns an error code
            and if the search was successful returns the following information:
            <li> an index into the search results from where the returned list begins</li>
            <li> an estimate of the total number of elements in the search result</li>
            <li> an optional context field to be returned to the server with
            subsequent VLV request.</li>
            
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Controls.LdapVirtualListResponse.#ctor(System.String,System.Boolean,System.SByte[])">
            <summary> This constructor is usually called by the SDK to instantiate an
            a LdapControl corresponding to the Server response to a Ldap
            VLV Control request.  Application programmers should not have
            any reason to call the constructor.  This constructor besides
            constructing a LdapVirtualListResponse control object also
            parses the contents of the response into local variables.
            
            RFC 2891 defines this response control as follows:
            
            The controlValue is an OCTET STRING, whose value is the BER
            encoding of a value of the following ASN.1:
            
            VirtualListViewResponse ::= SEQUENCE {
            targetPosition    INTEGER (0 .. maxInt),
            contentCount     INTEGER (0 .. maxInt),
            virtualListViewResult ENUMERATED {
            success (0),
            operationsError (1),
            unwillingToPerform (53),
            insufficientAccessRights (50),
            busy (51),
            timeLimitExceeded (3),
            adminLimitExceeded (11),
            sortControlMissing (60),
            offsetRangeError (61),
            other (80) },
            contextID     OCTET STRING OPTIONAL }
            
            
            </summary>
            <param name="oid">    The OID of the control, as a dotted string.
            
            </param>
            <param name="critical">  True if the Ldap operation should be discarded if
            the control is not supported. False if
            the operation can be processed without the control.
            
            </param>
            <param name="values">    The control-specific data.
            </param>
        </member>
        <member name="P:Novell.Directory.Ldap.Controls.LdapVirtualListResponse.ContentCount">
            <summary> Returns the size of the virtual search results list.  This integer as
            the servers current estimate of what the search result size.
            </summary>
        </member>
        <member name="P:Novell.Directory.Ldap.Controls.LdapVirtualListResponse.FirstPosition">
            <summary> Returns the index of the first entry in the returned list.  The server uses
            the clients request information in conjunction with its current search result
            list to estimate what list of entries the client is requesting.  This integer
            is the index into the search results that is returned to the client.
            </summary>
        </member>
        <member name="P:Novell.Directory.Ldap.Controls.LdapVirtualListResponse.ResultCode">
            <summary> Returns the result code for the virtual list search request.</summary>
        </member>
        <member name="P:Novell.Directory.Ldap.Controls.LdapVirtualListResponse.Context">
            <summary> Returns the cookie used by some servers to optimize the processing of
            virtual list requests. Subsequent VLV requests to the same server
            should return this String to the server.
            </summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Events.Edir.EventData.BaseEdirEventData">
            <summary> 
            This is the base class for all types of data classes associated
            with an event.
            </summary>
        </member>
        <member name="P:Novell.Directory.Ldap.Events.Edir.EventData.BaseEdirEventData.EventDataType">
            <summary> 
            The value for this attribute allows the caller to identify the
            type of the data object.
            </summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Events.Edir.EventData.BinderyObjectEventData">
            <summary> 
            This class represents the data for Bindery Events.
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Events.Edir.EventData.BinderyObjectEventData.ToString">
            <summary> 
            Returns a string representation of the object.
            </summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Events.Edir.EventData.ChangeAddressEventData">
            <summary> 
            This class represents the data for Change Address.
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Events.Edir.EventData.ChangeAddressEventData.ToString">
            <summary> 
            Returns a string representation of the object.
            </summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Events.Edir.EventData.ConnectionStateEventData">
            <summary> 
            This class represents the data for Connection State Events.
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Events.Edir.EventData.ConnectionStateEventData.ToString">
            <summary> 
            Returns a string representation of the object.
            </summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Events.Edir.EventData.DebugEventData">
            <summary> 
            This class represents the data for Debug Events.
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Events.Edir.EventData.DebugEventData.ToString">
            <summary> 
            Returns a string representation of the object.
            </summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Events.Edir.EventData.DebugParameter">
            <summary> 
            This class represents the Debug Paramenter that is part of
            the DebugEventData.
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Events.Edir.EventData.DebugParameter.ToString">
            <summary> 
            Returns a string representation of the object.
            </summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Events.Edir.DSETimeStamp">
            <summary> 
            The class represents the Timestamp datastructure for Edir events
            Notification.
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Events.Edir.DSETimeStamp.ToString">
            <summary> 
            Returns a string representation of the object.
            </summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Events.Edir.EventData.EntryEventData">
            <summary> 
            The class represents the data for Entry Events.
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Events.Edir.EventData.EntryEventData.ToString">
            <summary> 
            Returns a string representation of the object.
            </summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Events.Edir.EventData.GeneralDSEventData">
            <summary> 
            The class represents the data for General DS Events.
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Events.Edir.EventData.GeneralDSEventData.ToString">
            <summary> 
            Returns a string representation of the object.
            </summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Events.Edir.EventData.ModuleStateEventData">
            <summary> 
            This class represents the data for Module State Events.
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Events.Edir.EventData.ModuleStateEventData.ToString">
            <summary> 
            Returns a string representation of the object.
            </summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Events.Edir.EventData.NetworkAddressEventData">
            <summary> 
            This class represents the data for Network Address Events.
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Events.Edir.EventData.NetworkAddressEventData.ToString">
            <summary> 
            Returns a string representation of the object.
            </summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Events.Edir.EventData.ReferralAddress">
            <summary> 
            This class represents the data for Address(IP/IPX/IPV6 etc) datastructure for
            Edir Events Notification.
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Events.Edir.EventData.ReferralAddress.#ctor(Novell.Directory.Ldap.Asn1.Asn1Sequence)">
            <summary> 
            Returns a string representation of the object.
            </summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Events.Edir.EventData.SecurityEquivalenceEventData">
            <summary> 
            This class represents the data for Security Equivalence Events.
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Events.Edir.EventData.SecurityEquivalenceEventData.ToString">
            <summary> 
            Returns a string representation of the object.
            </summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Events.Edir.EventData.ValueEventData">
            <summary> 
            This class represents the data for Value Events.
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Events.Edir.EventData.ValueEventData.ToString">
            <summary> 
            Returns a string representation of the object.
            </summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Events.Edir.EdirEventArgs">
            <summary> 
            This class represents the EventArgs for Edir events in general.
            </summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Events.DirectoryEventArgs">
            <summary> 
            This is the base class for other EventArgs corresponding to 
            Ldap and Edir events.
            </summary>
            <seealso cref="T:Novell.Directory.Ldap.Events.LdapEventArgs"/>
            <seealso cref="T:Novell.Directory.Ldap.Events.Edir.EdirEventArgs"/>
        </member>
        <member name="T:Novell.Directory.Ldap.Events.BaseEventArgs">
            <summary> 
            This is the base class for other EventArgs representing exception 
            and normal events.
            </summary>
            <seealso cref="T:Novell.Directory.Ldap.Events.DirectoryExceptionEventArgs"/>
            <seealso cref="T:Novell.Directory.Ldap.Events.DirectoryEventArgs"/>
        </member>
        <member name="P:Novell.Directory.Ldap.Events.Edir.EdirEventArgs.IntermediateResponse">
            <summary> 
            This property gives the contained event information in the form
            of an IntermediateResponse if the contained information is of correct
            type. In case the type of contained information is incorrect, null is returned.
            </summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Events.Edir.EdirEventDataType">
            <summary>
            Enumeration for types of Edir event data
            </summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Events.Edir.EdirEventResultType">
            <summary>
            Enumeration for types of Edir event results
            </summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Events.Edir.EdirEventType">
            <summary>
            Enumeration for types of Edir events
            </summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Events.Edir.DebugParameterType">
            <summary>
            Enumeration for types of Edir event Debug parameters
            </summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Events.Edir.GeneralEventField">
            <summary>
            Enumeration for fields of Edir General event
            </summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Events.Edir.EdirEventIntermediateResponse">
            <summary>
            This class represents the intermediate response corresponding to edir events.
            </summary>
        </member>
        <member name="P:Novell.Directory.Ldap.Events.Edir.EdirEventIntermediateResponse.EventType">
            <summary>
            Type of Edir event.
            </summary>
        </member>
        <member name="P:Novell.Directory.Ldap.Events.Edir.EdirEventIntermediateResponse.EventResultType">
            <summary>
            Type of Edir event result.
            </summary>
        </member>
        <member name="P:Novell.Directory.Ldap.Events.Edir.EdirEventIntermediateResponse.EventResponseDataObject">
            <summary>
            The response data object associated with Edir event.
            </summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Events.Edir.EdirEventSource">
            <summary> 
            This is the source class for Edir events.
            </summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Events.LdapEventSource">
            <summary> 
            This is the base class for any EventSource.
            </summary>
            <seealso cref="T:Novell.Directory.Ldap.Events.PSearchEventSource"/>
            <seealso cref="T:Novell.Directory.Ldap.Events.Edir.EdirEventSource"/>
        </member>
        <member name="P:Novell.Directory.Ldap.Events.LdapEventSource.SleepInterval">
            <summary> 
            SleepInterval controls the duration after which event polling is repeated.
            </summary>
        </member>
        <member name="E:Novell.Directory.Ldap.Events.LdapEventSource.DirectoryEvent">
            <summary> 
            DirectoryEvent represents a generic Directory event.
            If any event is not recognized by the actual
            event sources, an object of corresponding DirectoryEventArgs 
            class is passed as part of the notification.
            </summary>
        </member>
        <member name="E:Novell.Directory.Ldap.Events.LdapEventSource.DirectoryExceptionEvent">
            <summary> 
            DirectoryEvent represents a generic Directory exception event.
            </summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Events.LdapEventSource.DirectoryEventHandler">
            <summary> 
            DirectoryEventHandler is the delegate definition for DirectoryEvent.
            The client (listener) has to register using this delegate in order to
            get events that may not be recognized by the actual event source.
            </summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Events.LdapEventSource.DirectoryExceptionEventHandler">
            <summary> 
            DirectoryEventHandler is the delegate definition for DirectoryExceptionEvent.
            </summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Events.LdapEventSource.EventsGenerator">
             <summary> This is a nested class that is supposed to monitor 
             LdapMessageQueue for events generated by the LDAP Server.
            
             </summary>
        </member>
        <member name="P:Novell.Directory.Ldap.Events.LdapEventSource.EventsGenerator.SleepTime">
            <summary> 
            SleepTime controls the duration after which event polling is repeated.
            </summary>
        </member>
        <member name="E:Novell.Directory.Ldap.Events.Edir.EdirEventSource.EdirEvent">
            <summary>
            Caller has to register with this event in order to be notified of
            corresponding Edir events.
            </summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Events.Edir.EdirEventSource.EdirEventHandler">
            <summary> 
            EdirEventHandler is the delegate definition for EdirEvent.
            The client (listener) has to register using this delegate in order to
            get corresponding Edir events.
            </summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Events.Edir.EdirEventSpecifier">
            <summary>
            This class denotes the mechanism to specify the event of interest.
            </summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Events.Edir.MonitorEventRequest">
            <summary>
            This class denotes the mechanism to specify the event of interest.
            </summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Events.Edir.MonitorEventResponse">
            <summary> 
            This object represents the ExtendedResponse returned when Event
            Registeration fails. This Extended Response structure is generated for
            requests send as MonitorEventRequest.
            </summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Events.DirectoryExceptionEventArgs">
            <summary> 
            This class gives the EventArgs for Directory exceptions.
            </summary>
            <seealso cref="T:Novell.Directory.Ldap.Events.LdapEventArgs"/>
            <seealso cref="T:Novell.Directory.Ldap.Events.Edir.EdirEventArgs"/>
        </member>
        <member name="T:Novell.Directory.Ldap.Events.LdapEventArgs">
            <summary> 
            This class represents the EventArgs for Ldap events in general.
            This is also the base class for more specific Ldap events.
            </summary>
            <seealso cref="T:Novell.Directory.Ldap.Events.SearchResultEventArgs"/>
            <seealso cref="T:Novell.Directory.Ldap.Events.SearchReferralEventArgs"/>
        </member>
        <member name="T:Novell.Directory.Ldap.Events.EventClassifiers">
            <summary>
            Event Classifiers
            </summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Events.LdapEventType">
            <summary>
            Types of Ldap Events
            </summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Events.PSearchEventSource">
            <summary> 
            This is the source class for Ldap events.
            </summary>
        </member>
        <member name="E:Novell.Directory.Ldap.Events.PSearchEventSource.SearchResultEvent">
            <summary> 
            Caller has to register with this event in order to be notified of
            corresponding Ldap search result event.
            </summary>
        </member>
        <member name="E:Novell.Directory.Ldap.Events.PSearchEventSource.SearchReferralEvent">
            <summary>
            Caller has to register with this event in order to be notified of
            corresponding Ldap search reference event.
            </summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Events.PSearchEventSource.SearchResultEventHandler">
            <summary> 
            SearchResultEventHandler is the delegate definition for SearchResultEvent.
            The client (listener) has to register using this delegate in order to
            get corresponding Ldap events.
            </summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Events.PSearchEventSource.SearchReferralEventHandler">
            <summary> 
            SearchReferralEventHandler is the delegate definition for SearchReferralEvent.
            The client (listener) has to register using this delegate in order to
            get corresponding Ldap events.
            </summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Events.SearchReferralEventArgs">
            <summary> 
            This class represents the EventArgs corresponding to 
            LdapSearchResultReference notification sent by Ldap Server.
            </summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Events.SearchResultEventArgs">
            <summary> 
            This class represents the EventArgs corresponding to 
            LdapSearchResult notification sent by Ldap Server.
            </summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Extensions.AbortPartitionOperationRequest">
            <summary> 
            Aborts the last partition operation that was requested on the 
            specified partition if the operation is still pending.
            
            The AbortPartitionRequest extension uses the following OID:
            2.16.840.1.113719.1.27.100.29
            
            The requestValue has the following format:
            
            requestValue ::= 
              flags       INTEGER
              partitionDN LdapDN 
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Extensions.AbortPartitionOperationRequest.#ctor(System.String,System.Int32)">
            <summary> Constructs an extended operation object for aborting a partition operation.
            
            </summary>
            <param name="partitionDN">The distinguished name of the replica's
            partition root.
            
            </param>
            <param name="flags">Determines whether all servers in the replica ring must
            be up before proceeding. When set to zero, the status of the
            servers is not checked. When set to Ldap_ENSURE_SERVERS_UP,
            all servers must be up for the operation to proceed.
            
            </param>
            <exception> LdapException A general exception which includes an error message
            and an Ldap error code.
            </exception>
        </member>
        <member name="T:Novell.Directory.Ldap.Extensions.AddReplicaRequest">
            <summary> 
            Adds a replica to the specified directory server.
            
            To add a replica to a particular server, you must create an instance of
            this class and then call the extendedOperation method with this
            object as the required LdapExtendedOperation parameter.
            
            The addReplicaRequest extension uses the following OID:
            2.16.840.1.113719.1.27.100.7
            
            The requestValue has the following format:
            
            requestValue ::=
             flags       INTEGER
             replicaType INTEGER
             serverName  LdapDN
             dn          LdapDN
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Extensions.AddReplicaRequest.#ctor(System.String,System.String,System.Int32,System.Int32)">
            <summary> 
            Constructs a new extended operation object for adding a replica to the
            specified server.
            
            </summary>
            <param name="dn">The distinguished name of the replica's partition root.
            
            </param>
            <param name="serverDN">The server on which the new replica will be added.
            
            </param>
            <param name="replicaType">The type of replica to add. The replica
            types are defined in the ReplicationConstants class.
            
            </param>
            <param name="flags">Specifies whether all servers in the replica ring must be up
            before proceeding. When set to zero, the status of the servers is not
            checked. When set to Ldap_ENSURE_SERVERS_UP, all servers must be up for the
            operation to proceed.
            
            </param>
            <exception> LdapException A general exception which includes an error message
            and an Ldap error code.
            
            </exception>
            <seealso cref="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.Ldap_RT_MASTER">
            </seealso>
            <seealso cref="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.Ldap_RT_SECONDARY">
            </seealso>
            <seealso cref="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.Ldap_RT_READONLY">
            </seealso>
            <seealso cref="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.Ldap_RT_SUBREF">
            </seealso>
            <seealso cref="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.Ldap_RT_SPARSE_WRITE">
            </seealso>
            <seealso cref="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.Ldap_RT_SPARSE_READ">
            </seealso>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.BackupRestoreConstants.NLDAP_LDAP_BACKUP_REQUEST">
            A constant for eDirectory LDAP Based Backup Request OID. 
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.BackupRestoreConstants.NLDAP_LDAP_BACKUP_RESPONSE">
            A constant for eDirectory LDAP Based Backup Response OID. 
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.BackupRestoreConstants.NLDAP_LDAP_RESTORE_REQUEST">
            A constant for eDirectory LDAP Based Restore Request OID. 
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.BackupRestoreConstants.NLDAP_LDAP_RESTORE_RESPONSE">
            A constant for eDirectory LDAP Based Restore Response OID. 
        </member>
        <member name="M:Novell.Directory.Ldap.Extensions.BackupRestoreConstants.#ctor">
            Default constructor
        </member>
        <member name="T:Novell.Directory.Ldap.Extensions.ChangeReplicaTypeRequest">
            <summary> 
            Changes the type of the replica that resides
            on the specified directory server.
            
            To change a replica's type, you must create an instance of this class and
            then call the extendedOperation method with this object as the required
            LdapExtendedOperation parameter.
            
            The changeReplicaTypeRequest extension uses the following OID:
            2.16.840.1.113719.1.27.100.15
            
            The requestValue has the following format:
            
            requestValue ::=
             flags        INTEGER
             replicaType  INTEGER
             serverName   LdapDN
             dn           LdapDN
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Extensions.ChangeReplicaTypeRequest.#ctor(System.String,System.String,System.Int32,System.Int32)">
            <summary> 
            Constructs a new extended operation object for changing a replica's type.
            
            </summary>
            <param name="dn">         The distinguished name of the replica's
            partition root.
            
            </param>
            <param name="serverDN">   The server on which the replica resides.
            
            
            </param>
            <param name="replicaType">   The new replica type. The replica types are defined
            in the ReplicationConstants class.
            
            </param>
            <param name="flags">  Specifies whether all servers in the replica ring must be up
            before proceeding. When set to zero, the status of the servers is
            not checked. When set to Ldap_ENSURE_SERVERS_UP, all servers must be
            up for the operation to proceed.
            
            </param>
            <exception> LdapException A general exception which includes an error message
            and an Ldap error code.
            
            </exception>
            <seealso cref="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.Ldap_RT_MASTER">
            </seealso>
            <seealso cref="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.Ldap_RT_SECONDARY">
            </seealso>
            <seealso cref="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.Ldap_RT_READONLY">
            </seealso>
            <seealso cref="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.Ldap_RT_SUBREF">
            </seealso>
            <seealso cref="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.Ldap_RT_SPARSE_WRITE">
            </seealso>
            <seealso cref="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.Ldap_RT_SPARSE_READ">
            </seealso>
        </member>
        <member name="T:Novell.Directory.Ldap.Extensions.GetBindDNRequest">
            <summary>  Returns the distingusihed name of the object your are logged in as.
            
            To use this class, you must create an instance of the
            class and then call the extendedOperation method with this
            object as the required LdapExtendedOperation parameter.
            
            The returned LdapExtendedResponse object can then be converted to
            a GetBindDNResponse object with the ExtendedREsponseFactory
            class. This object contains  methods for retrieving the distinguished
            name.
            
            The GetBindDNRequest extension uses the following OID:
            2.16.840.1.113719.1.27.100.31
            
            The request value has a value of null.
            
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Extensions.GetBindDNRequest.#ctor">
            <summary>   Constructs an extended operation object for retrieving the bind dn.
            
            </summary>
            <exception> LdapException A general exception which includes an error 
            message and an Ldap error code.    
            </exception>
        </member>
        <member name="T:Novell.Directory.Ldap.Extensions.GetBindDNResponse">
            <summary>  Retrieves the identity from an GetBindDNResponse object.
            
            An object in this class is generated from an LdapExtendedResponse object
            using the ExtendedResponseFactory class.
            
            The GetBindDNResponse extension uses the following OID:
            2.16.840.1.113719.1.27.100.32 
            
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Extensions.GetBindDNResponse.#ctor(Novell.Directory.Ldap.Rfc2251.RfcLdapMessage)">
            <summary> Constructs an object from the responseValue which contains the bind dn.
            
            The constructor parses the responseValue which has the following
            format:
            responseValue ::=
            identity   OCTET STRING
            
            </summary>
            <exception> IOException The return value could not be decoded.
            </exception>
        </member>
        <member name="P:Novell.Directory.Ldap.Extensions.GetBindDNResponse.Identity">
            <summary> Returns the identity of the object.
            
            </summary>
            <returns> A string value specifying the bind dn returned by the server.
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.Extensions.GetEffectivePrivilegesListRequest.#cctor">
            <summary> 
            Returns the effective rights of one object to a list of attributes of another object.
            
            To use this class, you must instantiate an object of this class and then
            call the extendedOperation method with this object as the required
            LdapExtendedOperation parameter.
            
            The returned LdapExtendedResponse object can then be converted to
            a GetEffectivePrivilegesListResponse object with the ExtendedResponseFactory class.
            The GetEffectivePrivilegesListResponse class  contains methods for
            retrieving the list of effective rights.
            
            The getEffectivePrivilegesRequest extension uses the following OID:
            2.16.840.1.113719.1.27.100.103
            
            The requestValue has the following format:
            
            requestValue ::=
              dn         LdapDN
              trusteeDN  LdapDN
              SEQUENCE of attrNames   LdapDN 
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Novell.Directory.Ldap.Extensions.GetEffectivePrivilegesListRequest.#ctor(System.String,System.String,System.String[])" -->
        <member name="F:Novell.Directory.Ldap.Extensions.GetEffectivePrivilegesListResponse.privileges">
            <summary>  Retrieves the effective rights from an GetEffectivePrivilegesListResponse object.
            
            An object in this class is generated from an ExtendedResponse object
            using the ExtendedResponseFactory class.
            
            The getEffectivePrivilegesListResponse extension uses the following OID:
            2.16.840.1.113719.1.27.100.104
            
            </summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Extensions.GetEffectivePrivilegesRequest">
            <summary> 
            Returns the effective rights of one object to an attribute of another object.
            
            To use this class, you must instantiate an object of this class and then
            call the extendedOperation method with this object as the required
            LdapExtendedOperation parameter.
            
            The returned LdapExtendedResponse object can then be converted to
            a GetEffectivePrivilegesResponse object with the ExtendedResponseFactory class.
            The GetEffectivePrivilegesResponse class  contains methods for
            retrieving the effective rights.
            
            The getEffectivePrivilegesRequest extension uses the following OID:
            2.16.840.1.113719.1.27.100.33
            
            The requestValue has the following format:
            
            requestValue ::=
              dn         LdapDN
              trusteeDN  LdapDN
              attrName   LdapDN 
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Extensions.GetEffectivePrivilegesRequest.#ctor(System.String,System.String,System.String)">
            <summary> Constructs an extended operation object for checking effective rights.
            
            </summary>
            <param name="dn">       The distinguished name of the entry whose attribute is
            being checked.
            
            </param>
            <param name="trusteeDN">The distinguished name of the entry whose trustee rights
            are being returned
            
            </param>
            <param name="attrName"> The Ldap attribute name.
            
            </param>
            <exception> LdapException A general exception which includes an error
            message and an Ldap error code.
            </exception>
        </member>
        <member name="T:Novell.Directory.Ldap.Extensions.GetEffectivePrivilegesResponse">
            <summary>  Retrieves the effective rights from an GetEffectivePrivilegesResponse object.
            
            An object in this class is generated from an ExtendedResponse object
            using the ExtendedResponseFactory class.
            
            The getEffectivePrivilegesResponse extension uses the following OID:
            2.16.840.1.113719.1.27.100.34
            
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Extensions.GetEffectivePrivilegesResponse.#ctor(Novell.Directory.Ldap.Rfc2251.RfcLdapMessage)">
            <summary> Constructs an object from the responseValue which contains the effective
            privileges.
            
            The constructor parses the responseValue which has the following
            format:
            responseValue ::=
              privileges  INTEGER
            
            </summary>
            <exception> IOException The responseValue could not be decoded.
            </exception>
        </member>
        <member name="P:Novell.Directory.Ldap.Extensions.GetEffectivePrivilegesResponse.Privileges">
            <summary> Returns the effective privileges.
            
            See the ReplicationConstants class for the privilege flags.
            
            </summary>
            <returns> A flag which is a combination of zero or more privilege flags as
            returned by the server.
            
            </returns>
        </member>
        <member name="T:Novell.Directory.Ldap.Extensions.GetReplicaInfoRequest">
            <summary> 
            Reads information about a replica.
            
            The information available includes such items as  replicas state, last
            modification time, and replica type. 
            
            To read other information about a replica, you must
            create an instance of this class and then call the
            extendedOperation method with this object as the required
            LdapExtendedOperation parameter.
            
            The getReplicaInfoRequest extension uses the following OID:
            2.16.840.1.113719.1.27.100.17
            
            The requestValue has the following format:
            
            requestValue ::=
             serverDN     LdapDN
             partitionDN  LdapDN
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Extensions.GetReplicaInfoRequest.#ctor(System.String,System.String)">
            <summary> 
            Constructs an extended operations object for reading replica information.
            
            </summary>
            <param name="serverDN">The server on which the replica resides.
            
            </param>
            <param name="partitionDN">The distinguished name of the replica to be read.
            
            </param>
            <exception> LdapException A general exception which includes an error
            message and an Ldap error code.
            </exception>
        </member>
        <member name="T:Novell.Directory.Ldap.Extensions.GetReplicaInfoResponse">
            <summary> Retrieves the replica information from a GetReplicaInfoResponse object.
            
            An object in this class is generated from an ExtendedResponse using the
            ExtendedResponseFactory class.
            
            The getReplicaInfoResponse extension uses the following OID:
            2.16.840.1.113719.1.27.100.18
            
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Extensions.GetReplicaInfoResponse.#ctor(Novell.Directory.Ldap.Rfc2251.RfcLdapMessage)">
            <summary> Constructs an object from the responseValue which contains the
            replica information.
            
            The constructor parses the responseValue which has the following
            format:
            responseValue ::=
             partitionID         INTEGER
             replicaState        INTEGER
             modificationTime    INTEGER
             purgeTime           INTEGER
             localPartitionID    INTEGER
             partitionDN       OCTET STRING
             replicaType         INTEGER
             flags               INTEGER
            
            </summary>
            <exception> IOException The response value could not be decoded.
            </exception>
        </member>
        <member name="M:Novell.Directory.Ldap.Extensions.GetReplicaInfoResponse.getpartitionID">
            <summary> Returns the numeric identifier for the partition.
            
            </summary>
            <returns> Integer value specifying the partition ID.
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.Extensions.GetReplicaInfoResponse.getreplicaState">
            <summary> Returns the current state of the replica.
            
            </summary>
            <returns> Integer value specifying the current state of the replica. See
            ReplicationConstants class for possible values for this field.
            
            </returns>
            <seealso cref="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.Ldap_RS_BEGIN_ADD">
            </seealso>
            <seealso cref="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.Ldap_RS_DEAD_REPLICA">
            </seealso>
            <seealso cref="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.Ldap_RS_DYING_REPLICA">
            </seealso>
            <seealso cref="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.Ldap_RS_JS_0">
            </seealso>
            <seealso cref="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.Ldap_RS_JS_1">
            </seealso>
            <seealso cref="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.Ldap_RS_JS_2">
            </seealso>
            <seealso cref="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.Ldap_RS_LOCKED">
            </seealso>
            <seealso cref="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.Ldap_RS_MASTER_DONE">
            </seealso>
            <seealso cref="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.Ldap_RS_MASTER_START">
            </seealso>
            <seealso cref="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.Ldap_RS_SS_0">
            </seealso>
            <seealso cref="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.Ldap_RS_TRANSITION_ON">
            </seealso>
        </member>
        <member name="M:Novell.Directory.Ldap.Extensions.GetReplicaInfoResponse.getmodificationTime">
            <summary> Returns the time of the most recent modification.
            
            </summary>
            <returns> Integer value specifying the last modification time.
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.Extensions.GetReplicaInfoResponse.getpurgeTime">
            <summary> Returns the most recent time in which all data has been synchronized.
            
            </summary>
            <returns> Integer value specifying the last purge time.
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.Extensions.GetReplicaInfoResponse.getlocalPartitionID">
            <summary> Returns the local numeric identifier for the replica.
            
            </summary>
            <returns> Integer value specifying the local ID of the partition.
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.Extensions.GetReplicaInfoResponse.getpartitionDN">
            <summary> Returns the distinguished name of the partition.
            
            </summary>
            <returns> String value specifying the name of the partition read.
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.Extensions.GetReplicaInfoResponse.getreplicaType">
            <summary>  Returns the replica type.
            
            See the ReplicationConstants class for possible values for
            this field.
            
            </summary>
            <returns> Integer identifying the type of the replica.
            
            </returns>
            <seealso cref="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.Ldap_RT_MASTER">
            </seealso>
            <seealso cref="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.Ldap_RT_SECONDARY">
            </seealso>
            <seealso cref="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.Ldap_RT_READONLY">
            </seealso>
            <seealso cref="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.Ldap_RT_SUBREF">
            </seealso>
            <seealso cref="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.Ldap_RT_SPARSE_WRITE">
            </seealso>
            <seealso cref="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.Ldap_RT_SPARSE_READ">
            </seealso>
        </member>
        <member name="M:Novell.Directory.Ldap.Extensions.GetReplicaInfoResponse.getflags">
            <summary> Returns flags that specify whether the replica is busy or is a boundary.
            
            See the ReplicationConstants class for possible values for
            this field.
            
            </summary>
            <returns> Integer value specifying the flags for the replica.
            
            </returns>
            <seealso cref="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.Ldap_DS_FLAG_BUSY">
            </seealso>
            <seealso cref="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.Ldap_DS_FLAG_BOUNDARY">
            </seealso>
        </member>
        <member name="T:Novell.Directory.Ldap.Extensions.GetReplicationFilterRequest">
            <summary> 
            Gets the Replication filter for all replicas on the server.
            
            The filter is returned as an array of classnames-attribute names pairs. 
            
            To get the filter for all replicas on a specific server, you must
            create an instance of this class and then call the
            extendedOperation method with this object as the required
            LdapExtendedOperation parameter.
            
            The GetReplicationFilterRequest extension uses the following OID:
            2.16.840.1.113719.1.27.100.37
            
            The requestValue has the following format:
            
            requestValue ::=
             serverName  LdapDN
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Extensions.GetReplicationFilterRequest.#ctor(System.String)">
            <summary> 
            Constructs an extended operations object which contains the ber encoded
            replication filter.
            
            </summary>
            <param name="serverDN">The server whose replication filter needs to be read
            
            </param>
            <exception> LdapException A general exception which includes an error
            message and an Ldap error code.
            </exception>
        </member>
        <member name="T:Novell.Directory.Ldap.Extensions.GetReplicationFilterResponse">
            <summary>  This object represent the filter returned fom a GetReplicationFilterRequest.
            
            An object in this class is generated from an ExtendedResponse object
            using the ExtendedResponseFactory class.
            
            The GetReplicationFilterResponse extension uses the following OID:
            2.16.840.1.113719.1.27.100.38
            
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Extensions.GetReplicationFilterResponse.#ctor(Novell.Directory.Ldap.Rfc2251.RfcLdapMessage)">
            <summary> Constructs an object from the responseValue which contains the replication
            filter.
            
            The constructor parses the responseValue which has the following
            format:
            responseValue ::=
             SEQUENCE of SEQUENCE {
             classname  OCTET STRING
             SEQUENCE of ATTRIBUTES
            }
            where
            ATTRIBUTES:: OCTET STRING
            
            </summary>
            <exception> IOException The responseValue could not be decoded.
            </exception>
        </member>
        <member name="P:Novell.Directory.Ldap.Extensions.GetReplicationFilterResponse.ReplicationFilter">
            <summary> Returns the replicationFilter as an array of classname-attribute name pairs
            
            </summary>
            <returns> String array contining a two dimensional array of strings.  The first
            element of each array is the class name the others are the attribute names
            </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Novell.Directory.Ldap.Extensions.LdapBackupRequest.#ctor(System.String,System.Byte[],System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:Novell.Directory.Ldap.Extensions.LdapBackupResponse.#ctor(Novell.Directory.Ldap.Rfc2251.RfcLdapMessage)" -->
        <member name="M:Novell.Directory.Ldap.Extensions.LdapBackupResponse.getBufferLength">
             Returns the data buffer length
            
             @return bufferLength as integer.
        </member>
        <!-- Badly formed XML comment ignored for member "M:Novell.Directory.Ldap.Extensions.LdapBackupResponse.getStatusInfo" -->
        <!-- Badly formed XML comment ignored for member "M:Novell.Directory.Ldap.Extensions.LdapBackupResponse.getChunkSizesString" -->
        <member name="M:Novell.Directory.Ldap.Extensions.LdapBackupResponse.getReturnedBuffer">
             Returns the data buffer as byte[]
            
             @return returnedBuffer as byte[].
        </member>
        <!-- Badly formed XML comment ignored for member "M:Novell.Directory.Ldap.Extensions.LdapRestoreRequest.#ctor(System.String,System.Byte[],System.Int32,System.String,System.Byte[])" -->
        <member name="T:Novell.Directory.Ldap.Extensions.ListReplicasRequest">
            <summary> 
            Lists all the replicas that reside on the the specified directory server.
            
            To list replicas, you must create an instance
            of this class and then call the extendedOperation method with this
            object as the required LdapExtendedOperation parameter.
            
            The listReplicaRequest extension uses the following OID:
            2.16.840.1.113719.1.27.100.19
            
            The requestValue has the following format:
            
            requestValue ::=
              serverName  LdapDN
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Extensions.ListReplicasRequest.#ctor(System.String)">
            <summary>  Constructs an extended operation object for listing replicas.
            
            </summary>
            <param name="serverName">The server which contains replicas.
            
            </param>
            <exception> LdapException A general exception which includes an error
            message and an Ldap error code.
            </exception>
        </member>
        <member name="T:Novell.Directory.Ldap.Extensions.ListReplicasResponse">
            <summary> Retrieves the list of replicas from the specified server.
            
            An object in this class is generated from an ExtendedResponse object
            using the ExtendedResponseFactory class.
            
            The listReplicaResponse extension uses the following OID:
            2.16.840.1.113719.1.27.20
            
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Extensions.ListReplicasResponse.#ctor(Novell.Directory.Ldap.Rfc2251.RfcLdapMessage)">
            <summary> Constructs an object from the responseValue which contains the list
            of replicas.
            
            The constructor parses the responseValue which has the following
            format:
            responseValue ::=
              replicaList
            SEQUENCE OF OCTET STRINGS
            
            </summary>
            <exception> IOException  The responseValue could not be decoded.
            </exception>
        </member>
        <member name="P:Novell.Directory.Ldap.Extensions.ListReplicasResponse.ReplicaList">
            <summary> Returns a list of distinguished names for the replicas on the server.
            
            </summary>
            <returns> String value specifying the identity returned by the server
            </returns>
        </member>
        <member name="T:Novell.Directory.Ldap.Extensions.MergePartitionsRequest">
            <summary> 
            Merges a child partition with its parent partition.
            
            To merge a child partition with its parent, you must create an
            instance of this class and then call the extendedOperation method
            with this object as the required LdapExtendedOperation parameter.
            
            The mergePartitionsRequest extension uses the following OID:
            2.16.840.1.113719.1.27.100.5
            
            The requestValue has the following format:
            
            requestValue ::=
                flags   INTEGER
                dn      LdapDN
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Extensions.MergePartitionsRequest.#ctor(System.String,System.Int32)">
            <summary> Constructs an extended operation object for merging partitions.
            
            </summary>
            <param name="dn">       The distinguished name of the child partition's root.
            
            </param>
            <param name="flags">    Determines whether all servers in the replica ring must
            be up before proceeding. When set to zero, the status of
            the servers is not checked. When set to
            Ldap_ENSURE_SERVERS_UP, all servers must be up for the
            operation to proceed.
            
            </param>
            <exception> LdapException A general exception which includes an error
            message and an Ldap error code.
            </exception>
        </member>
        <member name="T:Novell.Directory.Ldap.Extensions.NamingContextConstants">
            <summary> Contains a collection of constants used by the Novell Ldap extensions.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.NamingContextConstants.CREATE_NAMING_CONTEXT_REQ">
            <summary> A constant for the createNamingContextRequest OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.NamingContextConstants.CREATE_NAMING_CONTEXT_RES">
            <summary> A constant for the createNamingContextResponse OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.NamingContextConstants.MERGE_NAMING_CONTEXT_REQ">
            <summary> A constant for the mergeNamingContextRequest OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.NamingContextConstants.MERGE_NAMING_CONTEXT_RES">
            <summary> A constant for the mergeNamingContextResponse OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.NamingContextConstants.ADD_REPLICA_REQ">
            <summary> A constant for the addReplicaRequest OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.NamingContextConstants.ADD_REPLICA_RES">
            <summary> A constant for the addReplicaResponse OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.NamingContextConstants.REFRESH_SERVER_REQ">
            <summary> A constant for the refreshServerRequest OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.NamingContextConstants.REFRESH_SERVER_RES">
            <summary> A constant for the refreshServerResponse OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.NamingContextConstants.DELETE_REPLICA_REQ">
            <summary> A constant for the removeReplicaRequest OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.NamingContextConstants.DELETE_REPLICA_RES">
            <summary> A constant for the removeReplicaResponse OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.NamingContextConstants.NAMING_CONTEXT_COUNT_REQ">
            <summary> A constant for the namingContextEntryCountRequest OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.NamingContextConstants.NAMING_CONTEXT_COUNT_RES">
            <summary> A constant for the namingContextEntryCountResponse OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.NamingContextConstants.CHANGE_REPLICA_TYPE_REQ">
            <summary> A constant for the changeReplicaTypeRequest OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.NamingContextConstants.CHANGE_REPLICA_TYPE_RES">
            <summary> A constant for the changeReplicaTypeResponse OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.NamingContextConstants.GET_REPLICA_INFO_REQ">
            <summary> A constant for the getReplicaInfoRequest OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.NamingContextConstants.GET_REPLICA_INFO_RES">
            <summary> A constant for the getReplicaInfoResponse OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.NamingContextConstants.LIST_REPLICAS_REQ">
            <summary> A constant for the listReplicaRequest OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.NamingContextConstants.LIST_REPLICAS_RES">
            <summary> A constant for the listReplicaResponse OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.NamingContextConstants.RECEIVE_ALL_UPDATES_REQ">
            <summary> A constant for the receiveAllUpdatesRequest OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.NamingContextConstants.RECEIVE_ALL_UPDATES_RES">
            <summary> A constant for the receiveAllUpdatesResponse OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.NamingContextConstants.SEND_ALL_UPDATES_REQ">
            <summary> A constant for the sendAllUpdatesRequest OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.NamingContextConstants.SEND_ALL_UPDATES_RES">
            <summary> A constant for the sendAllUpdatesResponse OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.NamingContextConstants.NAMING_CONTEXT_SYNC_REQ">
            <summary> A constant for the requestNamingContextSyncRequest OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.NamingContextConstants.NAMING_CONTEXT_SYNC_RES">
            <summary> A constant for the requestNamingContextSyncResponse OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.NamingContextConstants.SCHEMA_SYNC_REQ">
            <summary> A constant for the requestSchemaSyncRequest OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.NamingContextConstants.SCHEMA_SYNC_RES">
            <summary> A constant for the requestSchemaSyncResponse OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.NamingContextConstants.ABORT_NAMING_CONTEXT_OP_REQ">
            <summary> A constant for the abortNamingContextOperationRequest OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.NamingContextConstants.ABORT_NAMING_CONTEXT_OP_RES">
            <summary> A constant for the abortNamingContextOperationResponse OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.NamingContextConstants.GET_IDENTITY_NAME_REQ">
            <summary> A constant for the getContextIdentityNameRequest OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.NamingContextConstants.GET_IDENTITY_NAME_RES">
            <summary> A constant for the getContextIdentityNameResponse OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.NamingContextConstants.GET_EFFECTIVE_PRIVILEGES_REQ">
            <summary> A constant for the getEffectivePrivilegesRequest OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.NamingContextConstants.GET_EFFECTIVE_PRIVILEGES_RES">
            <summary> A constant for the getEffectivePrivilegesResponse OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.NamingContextConstants.SET_REPLICATION_FILTER_REQ">
            <summary> A constant for the setReplicationFilterRequest OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.NamingContextConstants.SET_REPLICATION_FILTER_RES">
            <summary> A constant for the setReplicationFilterResponse OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.NamingContextConstants.GET_REPLICATION_FILTER_REQ">
            <summary> A constant for the getReplicationFilterRequest OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.NamingContextConstants.GET_REPLICATION_FILTER_RES">
            <summary> A constant for the getReplicationFilterResponse OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.NamingContextConstants.CREATE_ORPHAN_NAMING_CONTEXT_REQ">
            <summary> A constant for the createOrphanNamingContextRequest OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.NamingContextConstants.CREATE_ORPHAN_NAMING_CONTEXT_RES">
            <summary> A constant for the createOrphanNamingContextResponse OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.NamingContextConstants.REMOVE_ORPHAN_NAMING_CONTEXT_REQ">
            <summary> A constant for the removeOrphanNamingContextRequest OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.NamingContextConstants.REMOVE_ORPHAN_NAMING_CONTEXT_RES">
            <summary> A constant for the removeOrphanNamingContextResponse OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.NamingContextConstants.TRIGGER_BKLINKER_REQ">
            <summary> A constant for the triggerBackLinkerRequest OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.NamingContextConstants.TRIGGER_BKLINKER_RES">
            <summary> A constant for the triggerBackLinkerResponse OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.NamingContextConstants.TRIGGER_JANITOR_REQ">
            <summary> A constant for the triggerJanitorRequest OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.NamingContextConstants.TRIGGER_JANITOR_RES">
            <summary> A constant for the triggerJanitorResponse OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.NamingContextConstants.TRIGGER_LIMBER_REQ">
            <summary> A constant for the triggerLimberRequest OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.NamingContextConstants.TRIGGER_LIMBER_RES">
            <summary> A constant for the triggerLimberResponse OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.NamingContextConstants.TRIGGER_SKULKER_REQ">
            <summary> A constant for the triggerSkulkerRequest OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.NamingContextConstants.TRIGGER_SKULKER_RES">
            <summary> A constant for the triggerSkulkerResponse OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.NamingContextConstants.TRIGGER_SCHEMA_SYNC_REQ">
            <summary> A constant for the triggerSchemaSyncRequest OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.NamingContextConstants.TRIGGER_SCHEMA_SYNC_RES">
            <summary> A constant for the triggerSchemaSyncResponse OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.NamingContextConstants.TRIGGER_PART_PURGE_REQ">
            <summary> A constant for the triggerPartitionPurgeRequest OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.NamingContextConstants.TRIGGER_PART_PURGE_RES">
            <summary> A constant for the triggerPartitionPurgeResponse OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.NamingContextConstants.Ldap_ENSURE_SERVERS_UP">
            <summary> A constant that specifies that all servers in a replica ring must be
            running for a naming context operation to proceed.
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.NamingContextConstants.Ldap_RT_MASTER">
            <summary> Identifies this replica as the master replica of the naming context.
            
            On this type of replica, entries can be modified, and naming context
            operations can be performed.
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.NamingContextConstants.Ldap_RT_SECONDARY">
            <summary> Identifies this replica as a secondary replica of the naming context.
            
            On this type of replica, read and write operations can be performed,
            and entries can be modified.
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.NamingContextConstants.Ldap_RT_READONLY">
            <summary> Identifies this replica as a read-only replica of the naming context.
            
            Only Novell eDirectory synchronization processes can modifie
            entries on this replica.
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.NamingContextConstants.Ldap_RT_SUBREF">
            <summary> Identifies this replica as a subordinate reference replica of the
            naming context.
            
            Novell eDirectory automatically adds these replicas to a server
            when the server does not contain replicas of all child naming contexts.
            Only eDirectory can modify information on these types of replicas. 
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.NamingContextConstants.Ldap_RT_SPARSE_WRITE">
            <summary> Identifies this replica as a read/write replica of the naming context,
            but the replica contains sparse data.
            
            The replica has been configured to contain only specified object types
            and attributes. On this type of replica, only the attributes and objects
            contained in the sparse data can be modified.
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.NamingContextConstants.Ldap_RT_SPARSE_READ">
            <summary> Identifies this replica as a read-only replica of the naming context,
            but the replica contains sparse data.
            
            The replica has been configured to contain only specified object types
            and attributes. On this type of replica, only Novell eDirectory
            synchronization processes can modify the sparse data.
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.NamingContextConstants.Ldap_RS_ON">
            <summary> Indicates that the replica is fully functioning and capable of responding
            to requests.
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.NamingContextConstants.Ldap_RS_NEW_REPLICA">
            <summary> Indicates that a new replica has been added but has not received a full
            download of information from the replica ring.
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.NamingContextConstants.Ldap_RS_DYING_REPLICA">
            <summary> Indicates that the replica is being deleted and that the request has
            been received.
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.NamingContextConstants.Ldap_RS_LOCKED">
            <summary> Indicates that the replica is locked. The move operation uses this state
            to lock the parent naming context of the child naming context that is moving.
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.NamingContextConstants.Ldap_RS_TRANSITION_ON">
            <summary> Indicates that a new replica has finished receiving its download from the
            master replica and is now receiving synchronization updates from other
            replicas.
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.NamingContextConstants.Ldap_RS_DEAD_REPLICA">
            <summary> Indicates that the dying replica needs to synchronize with another replica
            before being converted either to an external reference, if a root replica,
            or to a subordinate reference, if a non-root replica.
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.NamingContextConstants.Ldap_RS_BEGIN_ADD">
            <summary> Indicates that the subordinate references of the new replica are being
            added.
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.NamingContextConstants.Ldap_RS_MASTER_START">
            <summary> Indicates that a naming context is receiving a new master replica.
            
            The replica that will be the new master replica is set to this state.
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.NamingContextConstants.Ldap_RS_MASTER_DONE">
            <summary> Indicates that a naming context has a new master replica.
            
            When the new master is set to this state, Novell eDirectory knows
            that the replica is now the master and changes its replica type to
            master and the old master to read/write.
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.NamingContextConstants.Ldap_RS_SS_0">
            <summary> Indicates that the naming context is going to split into two naming contexts.
            
            In this state, other replicas of the naming context are informed of the
            pending split.
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.NamingContextConstants.Ldap_RS_SS_1">
            <summary> Indicates that that the split naming context operation has started.
            
            When the split is finished, the state will change to RS_ON.
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.NamingContextConstants.Ldap_RS_JS_0">
            <summary> Indicates that that two naming contexts are in the process of joining
            into one naming context.
            
            In this state, the replicas that are affected are informed of the join
            operation. The master replica of the parent and child naming contexts are
            first set to this state and then all the replicas of the parent and child.
            New replicas are added where needed.
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.NamingContextConstants.Ldap_RS_JS_1">
            <summary> Indicates that that two naming contexts are in the process of joining
            into one naming context.
            
            This state indicates that the join operation is waiting for the new
            replicas to synchronize and move to the RS_ON state.
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.NamingContextConstants.Ldap_RS_JS_2">
            <summary> Indicates that that two naming contexts are in the process of joining
            into one naming context.
            
            This state indicates that all the new replicas are in the RS_ON state
            and that the rest of the work can be completed.
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.NamingContextConstants.Ldap_DS_FLAG_BUSY">
            <summary> Indicates that the replica is involved with a partition operation,
            for example, merging a tree or moving a subtree.
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.NamingContextConstants.Ldap_DS_FLAG_BOUNDARY">
            <summary> Indicates that this naming context is on the DNS federation boundary.
            This flag is only set on DNS trees.
            </summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Extensions.PartitionEntryCountRequest">
            <summary>  Returns a count of the number of entries (objects) in the
            specified partition.
            
            To obtain the count of entries, you must create an instance of this
            class and then call the extendedOperation method with this
            object as the required LdapExtendedOperation parameter.
            
            The returned LdapExtendedResponse object can then be converted to
            a PartitionEntryCountResponse object. This class contains
            methods for retrieving the returned count.
            
            The PartitionEntryCountRequest extension uses the following
            OID:
            2.16.840.1.113719.1.27.100.13
            
            The requestValue has the following format:
            
            requestValue ::=
                dn      LdapDN
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Extensions.PartitionEntryCountRequest.#ctor(System.String)">
            <summary>  Constructs an extended operation object for counting entries
            in a naming context.
            
            </summary>
            <param name="dn"> The distinguished name of the partition.
            
            </param>
            <exception> LdapException A general exception which includes an
            error message and an Ldap error code.
            </exception>
        </member>
        <member name="T:Novell.Directory.Ldap.Extensions.PartitionEntryCountResponse">
            <summary> Returns the number of entries in the partition.
            
            An object in this class is generated from an ExtendedResponse object
            using the ExtendedResponseFactory class.
            
            The PartitionEntryCountResponse extension uses the following
            OID:
            2.16.840.1.113719.1.27.100.14
            
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Extensions.PartitionEntryCountResponse.#ctor(Novell.Directory.Ldap.Rfc2251.RfcLdapMessage)">
            <summary> Constructs an object from the responseValue which contains the
            entry count.
            
            The constructor parses the responseValue which has the following
            format:
            responseValue ::=
              count  INTEGER
            
            </summary>
            <exception> IOException  The response value could not be decoded.
            </exception>
        </member>
        <member name="P:Novell.Directory.Ldap.Extensions.PartitionEntryCountResponse.Count">
            <summary> Returns the number of entries in the naming context.
            
            </summary>
            <returns> The count of the number of objects returned.
            </returns>
        </member>
        <member name="T:Novell.Directory.Ldap.Extensions.PartitionSyncRequest">
            <summary> 
            Synchronizes all replicas of a naming context.
            
            The PartitionSyncRequest extension uses the following OID:
            2.16.840.1.113719.1.27.100.25
            
            The requestValue has the following format:
            
            requestValue ::=
             serverName      LdapDN
             partitionRoot   LdapDN
             delay           INTEGER
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Extensions.PartitionSyncRequest.#ctor(System.String,System.String,System.Int32)">
            <summary> 
            Constructs an extended operation object for synchronizing the replicas
            of a partition.
            
            </summary>
            <param name="serverName">    The distinquished name of server containing the
            naming context.
            
            </param>
            <param name="partitionRoot"> The distinguished name of the naming context
            to synchronize.
            
            </param>
            <param name="delay">         The time, in seconds, to delay before the synchronization
            should start.
            
            </param>
            <exception> LdapException A general exception which includes an error message
            and an Ldap error code.
            </exception>
        </member>
        <member name="T:Novell.Directory.Ldap.Extensions.ReceiveAllUpdatesRequest">
            <summary>  Schedules a specified directory server to receive updates from another
            directory server for a specific replica.
            
            The receiveAllUpdatesRequest extension uses the following OID:
            2.16.840.1.113719.1.27.100.21
            
            The requestValue has the following format:
            
            requestValue ::=
               partitionRoot    LdapDN
               toServerDN       LdapDN
               fromServerDN     LdapDN
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Extensions.ReceiveAllUpdatesRequest.#ctor(System.String,System.String,System.String)">
            <summary> 
            Constructs an extended operation object for receiving all updates from
            another directory server for a specific replica.
            
            </summary>
            <param name="partitionRoot">  The distinguished name of the replica
            that will be updated.
            
            </param>
            <param name="toServerDN">     The distinguished name of the server holding the
            replica to be updated.
            
            </param>
            <param name="fromServerDN">   The distinguished name of the server from which
            updates are sent.
            
            </param>
            <exception> LdapException A general exception which includes an error message
            and an Ldap error code.
            </exception>
        </member>
        <member name="T:Novell.Directory.Ldap.Extensions.RefreshLdapServerRequest">
            <summary> 
            Reloads the Ldap server.
            
            The refreshLdapServerRequest extension uses the following OID:
            2.16.840.1.113719.1.27.100.9
            
            The requestValue is set to null.
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Extensions.RefreshLdapServerRequest.#ctor">
            <summary> 
            Constructs an extended operation object for reloading the Ldap server.
            
            The constructor sets the OID.
            
            </summary>
            <exception> LdapException A general exception which includes an error
            message and an Ldap error code.
            </exception>
        </member>
        <member name="T:Novell.Directory.Ldap.Extensions.RemoveOrphanPartitionRequest">
            <summary>  Deletes an orphan partition.
            
            To delete an orphan partition, you must create an instance of this
            class and then call the extendedOperation method with this
            object as the required LdapExtendedOperation parameter.
            
            The RemoveOrphanPartitionRequest extension uses the following OID:
            2.16.840.1.113719.1.27.100.41
            
            The requestValue has the following format:
            
            requestValue ::=
                  serverDN     LdapDN
                  contextName  LdapDN
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Extensions.RemoveOrphanPartitionRequest.#ctor(System.String,System.String)">
            <summary> Constructs an extended operation object for deleting an orphan partition.
            
            </summary>
            <param name="serverDN">  The distinguished name of the server
            on which the orphan partition resides.
            
            </param>
            <param name="contextName"> The distinguished name of the orphan
            partition to delete.
            
            </param>
            <exception> LdapException A general exception which includes an error message
            and an Ldap error code.
            </exception>
        </member>
        <member name="T:Novell.Directory.Ldap.Extensions.RemoveReplicaRequest">
            <summary> 
            Removes a replica from the specified directory server.
            
            To remove a replica from a particular server, you must create an instance
            of this class and then call the extendedOperation method with this
            object as the required LdapExtendedOperation parameter.
            
            The removeReplicaRequest extension uses the following OID:
            2.16.840.1.113719.1.27.100.11
            
            The requestValue has the following format:
            
            requestValue ::=
                    flags        INTEGER
                    serverName   LdapDN
                    dn           LdapDN
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Extensions.RemoveReplicaRequest.#ctor(System.String,System.String,System.Int32)">
            <summary> Constructs an extended operation object for removing a replica.
            
            </summary>
            <param name="dn">         The distinguished name of the replica's
            partition root.
            
            </param>
            <param name="serverDN">   The distinguished name of server from which the replica
            will be removed.
            
            </param>
            <param name="flags">  Determines whether all servers in the replica ring must
            be up before proceeding. When set to zero, the status of the
            servers is not checked. When set to Ldap_ENSURE_SERVERS_UP,
            all servers must be up for the operation to proceed.
            
            </param>
            <exception> LdapException A general exception which includes an error message
            and an Ldap error code.
            </exception>
        </member>
        <member name="T:Novell.Directory.Ldap.Extensions.ReplicationConstants">
            <summary> Contains a collection of constants used by the replication management 
            in Novell Ldap extensions.
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.CREATE_NAMING_CONTEXT_REQ">
            <summary> A constant for the SplitPartitionRequest OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.CREATE_NAMING_CONTEXT_RES">
            <summary> A constant for the SplitPartitionResponse OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.MERGE_NAMING_CONTEXT_REQ">
            <summary> A constant for the mergePartitionRequest OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.MERGE_NAMING_CONTEXT_RES">
            <summary> A constant for the mergePartitionResponse OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.ADD_REPLICA_REQ">
            <summary> A constant for the addReplicaRequest OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.ADD_REPLICA_RES">
            <summary> A constant for the addReplicaResponse OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.REFRESH_SERVER_REQ">
            <summary> A constant for the refreshServerRequest OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.REFRESH_SERVER_RES">
            <summary> A constant for the refreshServerResponse OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.DELETE_REPLICA_REQ">
            <summary> A constant for the removeReplicaRequest OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.DELETE_REPLICA_RES">
            <summary> A constant for the removeReplicaResponse OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.NAMING_CONTEXT_COUNT_REQ">
            <summary> A constant for the partitionEntryCountRequest OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.NAMING_CONTEXT_COUNT_RES">
            <summary> A constant for the partitionEntryCountResponse OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.CHANGE_REPLICA_TYPE_REQ">
            <summary> A constant for the changeReplicaTypeRequest OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.CHANGE_REPLICA_TYPE_RES">
            <summary> A constant for the changeReplicaTypeResponse OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.GET_REPLICA_INFO_REQ">
            <summary> A constant for the getReplicaInfoRequest OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.GET_REPLICA_INFO_RES">
            <summary> A constant for the getReplicaInfoResponse OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.LIST_REPLICAS_REQ">
            <summary> A constant for the listReplicaRequest OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.LIST_REPLICAS_RES">
            <summary> A constant for the listReplicaResponse OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.RECEIVE_ALL_UPDATES_REQ">
            <summary> A constant for the receiveAllUpdatesRequest OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.RECEIVE_ALL_UPDATES_RES">
            <summary> A constant for the receiveAllUpdatesResponse OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.SEND_ALL_UPDATES_REQ">
            <summary> A constant for the sendAllUpdatesRequest OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.SEND_ALL_UPDATES_RES">
            <summary> A constant for the sendAllUpdatesResponse OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.NAMING_CONTEXT_SYNC_REQ">
            <summary> A constant for the requestPartitionSyncRequest OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.NAMING_CONTEXT_SYNC_RES">
            <summary> A constant for the requestPartitionSyncResponse OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.SCHEMA_SYNC_REQ">
            <summary> A constant for the requestSchemaSyncRequest OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.SCHEMA_SYNC_RES">
            <summary> A constant for the requestSchemaSyncResponse OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.ABORT_NAMING_CONTEXT_OP_REQ">
            <summary> A constant for the abortPartitionOperationRequest OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.ABORT_NAMING_CONTEXT_OP_RES">
            <summary> A constant for the abortPartitionOperationResponse OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.GET_IDENTITY_NAME_REQ">
            <summary> A constant for the getContextIdentityNameRequest OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.GET_IDENTITY_NAME_RES">
            <summary> A constant for the getContextIdentityNameResponse OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.GET_EFFECTIVE_PRIVILEGES_REQ">
            <summary> A constant for the getEffectivePrivilegesRequest OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.GET_EFFECTIVE_PRIVILEGES_RES">
            <summary> A constant for the getEffectivePrivilegesResponse OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.GET_EFFECTIVE_LIST_PRIVILEGES_REQ">
            <summary> A constant for the getEffectiveLISTPrivilegesRequest OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.GET_EFFECTIVE_LIST_PRIVILEGES_RES">
            <summary> A constant for the getEffectiveLISTPrivilegesResponse OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.SET_REPLICATION_FILTER_REQ">
            <summary> A constant for the setReplicationFilterRequest OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.SET_REPLICATION_FILTER_RES">
            <summary> A constant for the setReplicationFilterResponse OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.GET_REPLICATION_FILTER_REQ">
            <summary> A constant for the getReplicationFilterRequest OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.GET_REPLICATION_FILTER_RES">
            <summary> A constant for the getReplicationFilterResponse OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.CREATE_ORPHAN_NAMING_CONTEXT_REQ">
            <summary> A constant for the splitOrphanPartitionRequest OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.CREATE_ORPHAN_NAMING_CONTEXT_RES">
            <summary> A constant for the splitOrphanPartitionResponse OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.REMOVE_ORPHAN_NAMING_CONTEXT_REQ">
            <summary> A constant for the removeOrphanPartitionRequest OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.REMOVE_ORPHAN_NAMING_CONTEXT_RES">
            <summary> A constant for the removeOrphanPartitionResponse OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.TRIGGER_BKLINKER_REQ">
            <summary> A constant for the triggerBackLinkerRequest OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.TRIGGER_BKLINKER_RES">
            <summary> A constant for the triggerBackLinkerResponse OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.TRIGGER_JANITOR_REQ">
            <summary> A constant for the triggerJanitorRequest OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.TRIGGER_JANITOR_RES">
            <summary> A constant for the triggerJanitorResponse OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.TRIGGER_LIMBER_REQ">
            <summary> A constant for the triggerLimberRequest OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.TRIGGER_LIMBER_RES">
            <summary> A constant for the triggerLimberResponse OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.TRIGGER_SKULKER_REQ">
            <summary> A constant for the triggerSkulkerRequest OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.TRIGGER_SKULKER_RES">
            <summary> A constant for the triggerSkulkerResponse OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.TRIGGER_SCHEMA_SYNC_REQ">
            <summary> A constant for the triggerSchemaSyncRequest OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.TRIGGER_SCHEMA_SYNC_RES">
            <summary> A constant for the triggerSchemaSyncResponse OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.TRIGGER_PART_PURGE_REQ">
            <summary> A constant for the triggerPartitionPurgeRequest OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.TRIGGER_PART_PURGE_RES">
            <summary> A constant for the triggerPartitionPurgeResponse OID.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.Ldap_ENSURE_SERVERS_UP">
            <summary> A constant that specifies that all servers in a replica ring must be
            running for a partition operation to proceed.
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.Ldap_RT_MASTER">
            <summary> Identifies this replica as the master replica of the partition.
            
            On this type of replica, entries can be modified, and partition
            operations can be performed.
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.Ldap_RT_SECONDARY">
            <summary> Identifies this replica as a secondary replica of the partition.
            
            On this type of replica, read and write operations can be performed,
            and entries can be modified.
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.Ldap_RT_READONLY">
            <summary> Identifies this replica as a read-only replica of the partition.
            
            Only Novell eDirectory synchronization processes can modified
            entries on this replica.
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.Ldap_RT_SUBREF">
            <summary> Identifies this replica as a subordinate reference replica of the
            partition.
            
            NOvell eDirectory automatically adds these replicas to a server
            when the server does not contain replicas of all child partitions.
            Only eDirectory can modify information on these types of replicas.
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.Ldap_RT_SPARSE_WRITE">
            <summary> Identifies this replica as a read/write replica of the partition,
            but the replica contains sparse data.
            
            The replica has been configured to contain only specified object types
            and attributes. On this type of replica, only the attributes and objects
            contained in the sparse data can be modified.
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.Ldap_RT_SPARSE_READ">
            <summary> Identifies this replica as a read-only replica of the partition,
            but the replica contains sparse data.
            
            The replica has been configured to contain only specified object types
            and attributes. On this type of replica, only Novell eDirectory
            synchronization processes can modify the sparse data.
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.Ldap_RS_ON">
            <summary> Indicates that the replica is fully functioning and capable of responding
            to requests.
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.Ldap_RS_NEW_REPLICA">
            <summary> Indicates that a new replica has been added but has not received a full
            download of information from the replica ring.
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.Ldap_RS_DYING_REPLICA">
            <summary> Indicates that the replica is being deleted and that the request has
            been received.
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.Ldap_RS_LOCKED">
            <summary> Indicates that the replica is locked. The move operation uses this state
            to lock the parent partition of the child partition that is moving.
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.Ldap_RS_TRANSITION_ON">
            <summary> Indicates that a new replica has finished receiving its download from the
            master replica and is now receiving synchronization updates from other
            replicas.
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.Ldap_RS_DEAD_REPLICA">
            <summary> Indicates that the dying replica needs to synchronize with another replica
            before being converted either to an external reference, if a root replica,
            or to a subordinate reference, if a non-root replica.
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.Ldap_RS_BEGIN_ADD">
            <summary> Indicates that the subordinate references of the new replica are being
            added.
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.Ldap_RS_MASTER_START">
            <summary> Indicates that a partition is receiving a new master replica.
            
            The replica that will be the new master replica is set to this state.
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.Ldap_RS_MASTER_DONE">
            <summary> Indicates that a partition has a new master replica.
            
            When the new master is set to this state, Novell eDirectory knows
            that the replica is now the master and changes its replica type to
            master and the old master to read/write.
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.Ldap_RS_SS_0">
            <summary> Indicates that the partition is going to split into two partitions.
            
            In this state, other replicas of the partition are informed of the
            pending split.
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.Ldap_RS_SS_1">
            <summary> Indicates that that the split partition operation has started.
            
            When the split is finished, the state will change to RS_ON.
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.Ldap_RS_JS_0">
            <summary> Indicates that that two partitions are in the process of joining
            into one partition.
            
            In this state, the replicas that are affected are informed of the join
            operation. The master replica of the parent and child partitions are
            first set to this state and then all the replicas of the parent and child.
            New replicas are added where needed.
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.Ldap_RS_JS_1">
            <summary> Indicates that that two partitions are in the process of joining
            into one partition.
            
            This state indicates that the join operation is waiting for the new
            replicas to synchronize and move to the RS_ON state.
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.Ldap_RS_JS_2">
            <summary> Indicates that that two partitions are in the process of joining
            into one partition.
            
            This state indicates that all the new replicas are in the RS_ON state
            and that the rest of the work can be completed.
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.Ldap_DS_FLAG_BUSY">
            <summary> Indicates that the replica is involved with a partition operation,
            for example, merging a tree or moving a subtree.
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.ReplicationConstants.Ldap_DS_FLAG_BOUNDARY">
            <summary> Indicates that this partition is on the DNS federation boundary.
            This flag is only set on DNS trees.
            </summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Extensions.SchemaSyncRequest">
            <summary> 
            Synchronizes the schema.
            
            The requestSchemaSyncRequest extension uses the following OID: 
            2.16.840.1.113719.1.27.100.27
            
            The requestValue has the following format:
            
            requestValue ::=
                 serverName       LdapDN
                 delay            INTEGER
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Extensions.SchemaSyncRequest.#ctor(System.String,System.Int32)">
            <summary>  Constructs an extended operation object for synchronizing the schema.
            
            </summary>
            <param name="serverName">    The distinguished name of the server which will start
            the synchronization.
            
            </param>
            <param name="delay">         The time, in seconds, to delay before the synchronization
            should start.
            
            </param>
            <exception> LdapException A general exception which includes an error message
            and an Ldap error code.
            </exception>
        </member>
        <member name="T:Novell.Directory.Ldap.Extensions.SendAllUpdatesRequest">
            <summary> 
            Schedules an updated request to be sent to all directory servers in a
            replica ring.
            
            The sendAllUpdatesRequest extension uses the following OID:
            2.16.840.1.113719.1.27.100.23
            
            The requestValue has the following format:
            
            requestValue ::=
                partitionRoot   LdapDN
                origServerDN    LdapDN
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Extensions.SendAllUpdatesRequest.#ctor(System.String,System.String)">
            <summary> 
            Constructs an extended operation object for sending updates to a replica ring.
            
            </summary>
            <param name="partitionRoot">The distinguished name of the replica
            that will be updated.
            
            </param>
            <param name="origServerDN"> The distinguished name of the server that sends the
            updates to the replica ring.
            
            </param>
            <exception> LdapException A general exception which includes an error message
            and an Ldap error code.
            </exception>
        </member>
        <member name="T:Novell.Directory.Ldap.Extensions.SetReplicationFilterRequest">
            <summary> 
            Sets the Replication filter for all replicas on the server.
            
            The filter specified is a an array of classnames-attribute names pairs. 
            
            To set the filter for all replicas on the connected server, you must
            create an instance of this class and then call the
            extendedOperation method with this object as the required
            LdapExtendedOperation parameter.
            
            The SetReplicationFilterRequest extension uses the following OID:
            2.16.840.1.113719.1.27.100.35
            
            The requestValue has the following format:
            
            requestValue ::=
             serverName  LdapDN
             SEQUENCE of SEQUENCE {
             classname  OCTET STRING
             SEQUENCE of ATTRIBUTES
            }
            where
            ATTRIBUTES:: OCTET STRING
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Extensions.SetReplicationFilterRequest.#ctor(System.String,System.String[][])">
            <summary> 
            Constructs an extended operations object which contains the ber encoded
            replication filter.
            
            </summary>
            <param name="serverDN">The server on which the replication filter needs to be set
            
            </param>
            <param name="replicationFilter">An array of String Arrays. Each array starting with
            a class name followed by the attribute names for that class that should comprise
            the replication filter.
            
            </param>
            <exception> LdapException A general exception which includes an error
            message and an Ldap error code.
            </exception>
        </member>
        <member name="T:Novell.Directory.Ldap.Extensions.SplitOrphanPartitionRequest">
            <summary> Splits a new orphan partitiont.
            
            To split a new orphan partition, you must create an instance of
            this class and then call the extendedOperation method with this object
            as the required LdapExtendedOperation parameter.
            
            The SplitOrphanPartitionRequest extension uses the following OID:
            2.16.840.1.113719.1.27.100.39
            
            The requestValue has the following format:
            
            requestValue ::=
              serverDN     LdapDN
              contextName  LdapDN
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Extensions.SplitOrphanPartitionRequest.#ctor(System.String,System.String)">
            <summary> 
            Constructs an extended operation object for creating an orphan partition.
            
            
            </summary>
            <param name="serverDN">   The distinguished name of the server on which
            the new orphan partition will reside.
            
            </param>
            <param name="contextName">The distinguished name of the
            new orphan partition.
            
            </param>
            <exception> LdapException A general exception which includes an error message
            and an Ldap error code.
            </exception>
        </member>
        <member name="T:Novell.Directory.Ldap.Extensions.SplitPartitionRequest">
            <summary>  Creates a new partition.
            
            To split a new partition, you must create an instance of this
            class and then call the extendedOperation method with this
            object as the required LdapExtendedOperation parameter.
            
            The SplitPartitionRequest extension uses the following OID:
            2.16.840.1.113719.1.27.100.3
            
            The requestValue has the following format:
            
            requestValue ::=
             flags  INTEGER
             dn     LdapDN
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Extensions.SplitPartitionRequest.#ctor(System.String,System.Int32)">
            <summary> 
            Constructs an extended operation object for splitting partition.
            
            </summary>
            <param name="dn">     The distinguished name of the container where the new 
            partition  root should be located.
            
            </param>
            <param name="flags">Specifies whether all servers in the replica ring must be up before
            proceeding. When set to zero, the status of the servers is not
            checked. When set to Ldap_ENSURE_SERVERS_UP, all servers must be up
            for the operation to proceed.
            
            </param>
            <exception> LdapException A general exception which includes an error message
            and an Ldap error code.
            </exception>
        </member>
        <member name="T:Novell.Directory.Ldap.Extensions.TriggerBackgroundProcessRequest">
            <summary> This API is used to trigger the specified background process on the
            Novell eDirectory server.
            
            The TriggerBackgroundProcessRequest uses tone of the following OID's
            depending on the process being triggered:
            2.16.840.1.113719.1.27.100.43
            2.16.840.1.113719.1.27.100.47
            2.16.840.1.113719.1.27.100.49
            2.16.840.1.113719.1.27.100.51
            2.16.840.1.113719.1.27.100.53
            2.16.840.1.113719.1.27.100.55
            
            The requestValue has the following format:
            
            requestValue ::=
               NULL
            
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Extensions.TriggerBackgroundProcessRequest.Ldap_BK_PROCESS_BKLINKER">
            <summary> Constants used to refer to different Novell eDirectory
            background processes
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Extensions.TriggerBackgroundProcessRequest.#ctor(System.Int32)">
            <summary> 
            Based on the process ID specified this constructer cosntructs an
            LdapExtendedOperation object with the apppropriate OID.
            
            </summary>
            <param name="processID">  This id identifies the background process to be triggerd.
            
            </param>
            <exception> LdapException A general exception which includes an error message
            and an Ldap error code.
            </exception>
        </member>
        <member name="T:Novell.Directory.Ldap.Rfc2251.RfcAbandonRequest">
            <summary> Represents the Ldap Abandon Request.
            
            <pre>
            AbandonRequest ::= [APPLICATION 16] MessageID
            </pre>
            </summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Rfc2251.RfcMessageID">
            <summary> Represents an Ldap Message ID.
            
            <pre>
            MessageID ::= INTEGER (0 .. maxInt)
            
            maxInt INTEGER ::= 2147483647 -- (2^^31 - 1) --
            
            Note: The creation of a MessageID should be hidden within the creation of
            an RfcLdapMessage. The MessageID needs to be in sequence, and has an
            upper and lower limit. There is never a case when a user should be
            able to specify the MessageID for an RfcLdapMessage. The MessageID()
            class should be package protected. (So the MessageID value isn't
            arbitrarily run up.)
            </pre>
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcMessageID.#ctor">
            <summary> Creates a MessageID with an auto incremented Asn1Integer value.
            
            Bounds: (0 .. 2,147,483,647) (2^^31 - 1 or Integer.MAX_VALUE)
            
            MessageID zero is never used in this implementation.  Always
            start the messages with one.
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcMessageID.#ctor(System.Int32)">
            <summary> Creates a MessageID with a specified int value.</summary>
        </member>
        <member name="P:Novell.Directory.Ldap.Rfc2251.RfcMessageID.MessageID">
            <summary> Increments the message number atomically
            
            </summary>
            <returns> the new message number
            </returns>
        </member>
        <member name="T:Novell.Directory.Ldap.Rfc2251.RfcRequest">
            <summary> This interface represents Protocol Operations that are requests from a
            client.
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcRequest.dupRequest(System.String,System.String,System.Boolean)">
            <summary> Builds a new request using the data from the this object.</summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcRequest.getRequestDN">
            <summary> Builds a new request using the data from the this object.</summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcAbandonRequest.#ctor(System.Int32)">
            <summary> Constructs an RfcAbandonRequest</summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcAbandonRequest.getIdentifier">
            <summary> Override getIdentifier to return an application-wide id.
            <pre>
            ID = CLASS: APPLICATION, FORM: CONSTRUCTED, TAG: 16. (0x50)
            </pre>
            </summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Rfc2251.RfcAddRequest">
            <summary> Represents the Ldap Add Request.
            
            <pre>
            AddRequest ::= [APPLICATION 8] SEQUENCE {
            entry           LdapDN,
            attributes      AttributeList }
            </pre>
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcAddRequest.#ctor(Novell.Directory.Ldap.Rfc2251.RfcLdapDN,Novell.Directory.Ldap.Rfc2251.RfcAttributeList)">
            <summary> Constructs an RFCAddRequest
            
            </summary>
            <param name="entry">the entry
            
            </param>
            <param name="attributes">the Attributes making up the Entry
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcAddRequest.#ctor(Novell.Directory.Ldap.Asn1.Asn1Object[],System.String)">
            <summary> Constructs a new Add Request using data from an existing request.
            
            </summary>
            <param name="origRequest">the original request data
            
            </param>
            <param name="base">if not null, replaces the dn of the original request
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcAddRequest.getIdentifier">
            <summary> Override getIdentifier to return an application-wide id.
            <pre>
            ID = CLASS: APPLICATION, FORM: CONSTRUCTED, TAG: 8. (0x68)
            </pre>
            </summary>
        </member>
        <member name="P:Novell.Directory.Ldap.Rfc2251.RfcAddRequest.Attributes">
            <summary> Gets the attributes of the entry</summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Rfc2251.RfcAddResponse">
            <summary> Represents the Ldap Add Response.
            
            <pre>
            AddResponse ::= [APPLICATION 9] LdapResult
            </pre>
            </summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Rfc2251.RfcLdapResult">
            <summary> Represents an LdapResult.
            
            <pre>
            LdapResult ::= SEQUENCE {
            resultCode      ENUMERATED {
            success                      (0),
            operationsError              (1),
            protocolError                (2),
            timeLimitExceeded            (3),
            sizeLimitExceeded            (4),
            compareFalse                 (5),
            compareTrue                  (6),
            authMethodNotSupported       (7),
            strongAuthRequired           (8),
            -- 9 reserved --
            referral                     (10),  -- new
            adminLimitExceeded           (11),  -- new
            unavailableCriticalExtension (12),  -- new
            confidentialityRequired      (13),  -- new
            saslBindInProgress           (14),  -- new
            noSuchAttribute              (16),
            undefinedAttributeType       (17),
            inappropriateMatching        (18),
            constraintViolation          (19),
            attributeOrValueExists       (20),
            invalidAttributeSyntax       (21),
            -- 22-31 unused --
            noSuchObject                 (32),
            aliasProblem                 (33),
            invalidDNSyntax              (34),
            -- 35 reserved for undefined isLeaf --
            aliasDereferencingProblem    (36),
            -- 37-47 unused --
            inappropriateAuthentication  (48),
            
            invalidCredentials           (49),
            insufficientAccessRights     (50),
            busy                         (51),
            unavailable                  (52),
            unwillingToPerform           (53),
            loopDetect                   (54),
            -- 55-63 unused --
            namingViolation              (64),
            objectClassViolation         (65),
            notAllowedOnNonLeaf          (66),
            notAllowedOnRDN              (67),
            entryAlreadyExists           (68),
            objectClassModsProhibited    (69),
            -- 70 reserved for CLdap --
            affectsMultipleDSAs          (71), -- new
            -- 72-79 unused --
            other                        (80) },
            -- 81-90 reserved for APIs --
            matchedDN       LdapDN,
            errorMessage    LdapString,
            referral        [3] Referral OPTIONAL }
            </pre>
            
            </summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Rfc2251.RfcResponse">
            <summary> This interface represents RfcLdapMessages that contain a response from a
            server.
            
            If the protocol operation of the RfcLdapMessage is of this type,
            it contains at least an RfcLdapResult.
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcResponse.getResultCode">
            <summary> </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcResponse.getMatchedDN">
            <summary> </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcResponse.getErrorMessage">
            <summary> </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcResponse.getReferral">
            <summary> </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Rfc2251.RfcLdapResult.REFERRAL">
            <summary> Context-specific TAG for optional Referral.</summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcLdapResult.#ctor(Novell.Directory.Ldap.Asn1.Asn1Enumerated,Novell.Directory.Ldap.Rfc2251.RfcLdapDN,Novell.Directory.Ldap.Rfc2251.RfcLdapString)">
            <summary> Constructs an RfcLdapResult from parameters
            
            </summary>
            <param name="resultCode">the result code of the operation
            
            </param>
            <param name="matchedDN">the matched DN returned from the server
            
            </param>
            <param name="errorMessage">the diagnostic message returned from the server
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcLdapResult.#ctor(Novell.Directory.Ldap.Asn1.Asn1Enumerated,Novell.Directory.Ldap.Rfc2251.RfcLdapDN,Novell.Directory.Ldap.Rfc2251.RfcLdapString,Novell.Directory.Ldap.Rfc2251.RfcReferral)">
            <summary> Constructs an RfcLdapResult from parameters
            
            </summary>
            <param name="resultCode">the result code of the operation
            
            </param>
            <param name="matchedDN">the matched DN returned from the server
            
            </param>
            <param name="errorMessage">the diagnostic message returned from the server
            
            </param>
            <param name="referral">the referral(s) returned by the server
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcLdapResult.#ctor(Novell.Directory.Ldap.Asn1.Asn1Decoder,System.IO.Stream,System.Int32)">
            <summary> Constructs an RfcLdapResult from the inputstream</summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcLdapResult.getResultCode">
            <summary> Returns the result code from the server
            
            </summary>
            <returns> the result code
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcLdapResult.getMatchedDN">
            <summary> Returns the matched DN from the server
            
            </summary>
            <returns> the matched DN
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcLdapResult.getErrorMessage">
            <summary> Returns the error message from the server
            
            </summary>
            <returns> the server error message
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcLdapResult.getReferral">
            <summary> Returns the referral(s) from the server
            
            </summary>
            <returns> the referral(s)
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcAddResponse.#ctor(Novell.Directory.Ldap.Asn1.Asn1Decoder,System.IO.Stream,System.Int32)">
            <summary> The only time a client will create a AddResponse is when it is
            decoding it from an InputStream
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcAddResponse.#ctor(Novell.Directory.Ldap.Asn1.Asn1Enumerated,Novell.Directory.Ldap.Rfc2251.RfcLdapDN,Novell.Directory.Ldap.Rfc2251.RfcLdapString,Novell.Directory.Ldap.Rfc2251.RfcReferral)">
            <summary> Constructs an RfcAddResponse from parameters.
            
            </summary>
            <param name="resultCode">the result code of the operation
            
            </param>
            <param name="matchedDN">the matched DN returned from the server
            
            </param>
            <param name="errorMessage">the diagnostic message returned from the server
            
            </param>
            <param name="referral">the referral(s) returned by the server
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcAddResponse.getIdentifier">
            <summary> Override getIdentifier to return an application-wide id.</summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Rfc2251.RfcAssertionValue">
            <summary> Represents the Ldap Assertion Value.
            
            <pre>
            AssertionValue ::= OCTET STRING
            </pre>
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcAssertionValue.#ctor(System.SByte[])">
            <summary> </summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Rfc2251.RfcLdapString">
            <summary> Represnts an Ldap String.</summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcLdapString.#ctor(System.String)">
            <summary> </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcLdapString.#ctor(System.SByte[])">
            <summary> </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcLdapString.#ctor(Novell.Directory.Ldap.Asn1.Asn1Decoder,System.IO.Stream,System.Int32)">
            <summary> </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcAttributeDescription.#ctor(System.String)">
            <summary> </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcAttributeDescription.#ctor(Novell.Directory.Ldap.Asn1.Asn1Decoder,System.IO.Stream,System.Int32)">
            <summary> </summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Rfc2251.RfcAttributeDescriptionList">
            <summary>
            The AttributeDescriptionList is used to list attributes to be returned in
            a search request.
            
            <pre>
            AttributeDescriptionList ::= SEQUENCE OF
            AttributeDescription
            </pre>
            
            </summary>
            <seealso cref="T:Novell.Directory.Ldap.Rfc2251.RfcAttributeDescription">
            </seealso>
            <seealso cref="T:Novell.Directory.Ldap.Asn1.Asn1SequenceOf">
            </seealso>
            <seealso cref="T:Novell.Directory.Ldap.Rfc2251.RfcSearchRequest">
            </seealso>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcAttributeDescriptionList.#ctor(System.Int32)">
            <summary> </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcAttributeDescriptionList.#ctor(System.String[])">
            <summary> Convenience constructor. This constructor will construct an
            AttributeDescriptionList using the supplied array of Strings.
            </summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Rfc2251.RfcAttributeList">
            <summary> Represents an Ldap Attribute List.
            
            <pre>
            AttributeList ::= SEQUENCE OF SEQUENCE {
            type    AttributeDescription,
            vals    SET OF AttributeValue }
            </pre>
            </summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Rfc2251.RfcAttributeTypeAndValues">
            <summary> Represents and Ldap Attribute Type and Values.
            
            <pre>
            AttributeTypeAndValues ::= SEQUENCE {
            type    AttributeDescription,
            vals    SET OF AttributeValue }
            </pre>
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcAttributeTypeAndValues.#ctor(Novell.Directory.Ldap.Rfc2251.RfcAttributeDescription,Novell.Directory.Ldap.Asn1.Asn1SetOf)">
            <summary> </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcAttributeValue.#ctor(System.String)">
            <summary> </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcAttributeValue.#ctor(System.SByte[])">
            <summary> </summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Rfc2251.RfcAttributeValueAssertion">
            <summary> Represents an Ldap Attribute Value Assertion.
            
            <pre>
            AttributeValueAssertion ::= SEQUENCE {
            attributeDesc   AttributeDescription,
            assertionValue  AssertionValue }
            </pre>
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcAttributeValueAssertion.#ctor(Novell.Directory.Ldap.Rfc2251.RfcAttributeDescription,Novell.Directory.Ldap.Rfc2251.RfcAssertionValue)">
            <summary> Creates an Attribute Value Assertion.
            
            </summary>
            <param name="ad">The assertion description
            
            </param>
            <param name="av">The assertion value
            </param>
        </member>
        <member name="P:Novell.Directory.Ldap.Rfc2251.RfcAttributeValueAssertion.AttributeDescription">
            <summary> Returns the attribute description.
            
            </summary>
            <returns> the attribute description
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.Rfc2251.RfcAttributeValueAssertion.AssertionValue">
            <summary> Returns the assertion value.
            
            </summary>
            <returns> the assertion value.
            </returns>
        </member>
        <member name="T:Novell.Directory.Ldap.Rfc2251.RfcAuthenticationChoice">
            <summary> Represents an Ldap Authentication Choice.
            
            <pre>
            AuthenticationChoice ::= CHOICE {
            simple                  [0] OCTET STRING,
            -- 1 and 2 reserved
            sasl                    [3] SaslCredentials }
            </pre>
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcAuthenticationChoice.#ctor(Novell.Directory.Ldap.Asn1.Asn1Tagged)">
            <summary> </summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Rfc2251.RfcBindRequest">
            <summary> Represents and Ldap Bind Request.
            <pre>
            BindRequest ::= [APPLICATION 0] SEQUENCE {
            version                 INTEGER (1 .. 127),
            name                    LdapDN,
            authentication          AuthenticationChoice }
            </pre>
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Rfc2251.RfcBindRequest.ID">
            <summary> ID is added for Optimization.
            
            ID needs only be one Value for every instance,
            thus we create it only once.
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcBindRequest.#ctor(Novell.Directory.Ldap.Asn1.Asn1Integer,Novell.Directory.Ldap.Rfc2251.RfcLdapDN,Novell.Directory.Ldap.Rfc2251.RfcAuthenticationChoice)">
            <summary> </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcBindRequest.#ctor(Novell.Directory.Ldap.Asn1.Asn1Object[],System.String)">
            <summary> Constructs a new Bind Request copying the original data from
            an existing request.
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcBindRequest.getIdentifier">
            <summary> Override getIdentifier to return an application-wide id.
            
            <pre>
            ID = CLASS: APPLICATION, FORM: CONSTRUCTED, TAG: 0. (0x60)
            </pre>
            </summary>
        </member>
        <member name="P:Novell.Directory.Ldap.Rfc2251.RfcBindRequest.Version">
            <summary> </summary>
            <summary> Sets the protocol version</summary>
        </member>
        <member name="P:Novell.Directory.Ldap.Rfc2251.RfcBindRequest.Name">
            <summary> </summary>
            <summary> </summary>
        </member>
        <member name="P:Novell.Directory.Ldap.Rfc2251.RfcBindRequest.AuthenticationChoice">
            <summary> </summary>
            <summary> </summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Rfc2251.RfcBindResponse">
            <summary> Represents and Ldap Bind Response.
            
            <pre>
            BindResponse ::= [APPLICATION 1] SEQUENCE {
            
            COMPONENTS OF LdapResult,
            serverSaslCreds    [7] OCTET STRING OPTIONAL }
            </pre>
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcBindResponse.#ctor(Novell.Directory.Ldap.Asn1.Asn1Decoder,System.IO.Stream,System.Int32)">
            <summary> The only time a client will create a BindResponse is when it is
            decoding it from an InputStream
            
            Note: If serverSaslCreds is included in the BindResponse, it does not
            need to be decoded since it is already an OCTET STRING.
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcBindResponse.getResultCode">
            <summary> </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcBindResponse.getMatchedDN">
            <summary> </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcBindResponse.getErrorMessage">
            <summary> </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcBindResponse.getReferral">
            <summary> </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcBindResponse.getIdentifier">
            <summary> Override getIdentifier to return an application-wide id.</summary>
        </member>
        <member name="P:Novell.Directory.Ldap.Rfc2251.RfcBindResponse.ServerSaslCreds">
            <summary> Returns the OPTIONAL serverSaslCreds of a BindResponse if it exists
            otherwise null.
            </summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Rfc2251.RfcCompareRequest">
            <summary> Represents and Ldap Compare Request.
            
            <pre>
            CompareRequest ::= [APPLICATION 14] SEQUENCE {
            entry           LdapDN,
            ava             AttributeValueAssertion }
            </pre>
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcCompareRequest.#ctor(Novell.Directory.Ldap.Rfc2251.RfcLdapDN,Novell.Directory.Ldap.Rfc2251.RfcAttributeValueAssertion)">
            <summary> </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcCompareRequest.#ctor(Novell.Directory.Ldap.Asn1.Asn1Object[],System.String)">
            <summary> Constructs a new Compare Request copying from the data of
            an existing request.
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcCompareRequest.getIdentifier">
            <summary> Override getIdentifier to return an application-wide id.</summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Rfc2251.RfcCompareResponse">
            <summary> Represents and Ldap Compare Response.
            
            <pre>
            CompareResponse ::= [APPLICATION 15] LdapResult
            </pre>
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcCompareResponse.#ctor(Novell.Directory.Ldap.Asn1.Asn1Decoder,System.IO.Stream,System.Int32)">
            <summary> The only time a client will create a CompareResponse is when it is
            decoding it from an InputStream
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcCompareResponse.#ctor(Novell.Directory.Ldap.Asn1.Asn1Enumerated,Novell.Directory.Ldap.Rfc2251.RfcLdapDN,Novell.Directory.Ldap.Rfc2251.RfcLdapString,Novell.Directory.Ldap.Rfc2251.RfcReferral)">
            <summary> Constructs an RfcCompareResponse from parameters.
            
            </summary>
            <param name="resultCode">the result code of the operation
            
            </param>
            <param name="matchedDN">the matched DN returned from the server
            
            </param>
            <param name="errorMessage">the diagnostic message returned from the server
            
            </param>
            <param name="referral">the referral(s) returned by the server
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcCompareResponse.getIdentifier">
            <summary> Override getIdentifier to return an application-wide id.</summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Rfc2251.RfcControl">
            <summary> Represents an Ldap Control.
            
            <pre>
            Control ::= SEQUENCE {
            controlType             LdapOID,
            criticality             BOOLEAN DEFAULT FALSE,
            controlValue            OCTET STRING OPTIONAL }
            </pre>
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcControl.#ctor(Novell.Directory.Ldap.Rfc2251.RfcLdapOID)">
            <summary> </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcControl.#ctor(Novell.Directory.Ldap.Rfc2251.RfcLdapOID,Novell.Directory.Ldap.Asn1.Asn1Boolean)">
            <summary> </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcControl.#ctor(Novell.Directory.Ldap.Rfc2251.RfcLdapOID,Novell.Directory.Ldap.Asn1.Asn1Boolean,Novell.Directory.Ldap.Asn1.Asn1OctetString)">
            <summary> 
            Note: criticality is only added if true, as per RFC 2251 sec 5.1 part
            (4): If a value of a type is its default value, it MUST be
            absent.
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcControl.#ctor(Novell.Directory.Ldap.Asn1.Asn1Decoder,System.IO.Stream,System.Int32)">
            <summary> Constructs a Control object by decoding it from an InputStream.</summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcControl.#ctor(Novell.Directory.Ldap.Asn1.Asn1Sequence)">
            <summary> Constructs a Control object by decoding from an Asn1Sequence</summary>
        </member>
        <member name="P:Novell.Directory.Ldap.Rfc2251.RfcControl.ControlType">
            <summary> </summary>
        </member>
        <member name="P:Novell.Directory.Ldap.Rfc2251.RfcControl.Criticality">
            <summary> Returns criticality.
            
            If no value present, return the default value of FALSE.
            </summary>
        </member>
        <member name="P:Novell.Directory.Ldap.Rfc2251.RfcControl.ControlValue">
            <summary> Since controlValue is an OPTIONAL component, we need to check
            to see if one is available. Remember that if criticality is of default
            value, it will not be present.
            </summary>
            <summary> Called to set/replace the ControlValue.  Will normally be called by
            the child classes after the parent has been instantiated.
            </summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Rfc2251.RfcControls">
            <summary> Represents Ldap Contreols.
            
            <pre>
            Controls ::= SEQUENCE OF Control
            </pre>
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Rfc2251.RfcControls.CONTROLS">
            <summary> Controls context specific tag</summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcControls.#ctor">
            <summary> Constructs a Controls object. This constructor is used in combination
            with the add() method to construct a set of Controls to send to the
            server.
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcControls.#ctor(Novell.Directory.Ldap.Asn1.Asn1Decoder,System.IO.Stream,System.Int32)">
            <summary> Constructs a Controls object by decoding it from an InputStream.</summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcControls.add(Novell.Directory.Ldap.Rfc2251.RfcControl)">
            <summary> Override add() of Asn1SequenceOf to only accept a Control type.</summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcControls.set_Renamed(System.Int32,Novell.Directory.Ldap.Rfc2251.RfcControl)">
            <summary> Override set() of Asn1SequenceOf to only accept a Control type.</summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcControls.getIdentifier">
            <summary> Override getIdentifier to return a context specific id.</summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Rfc2251.RfcDelRequest">
            <summary> Represents an Ldap Delete Request.
            
            <pre>
            DelRequest ::= [APPLICATION 10] LdapDN
            </pre>
            </summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Rfc2251.RfcLdapDN">
            <summary> Represents an Ldap DN.
            
            <pre>
            LdapDN ::= LdapString
            </pre>
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcLdapDN.#ctor(System.String)">
            <summary> </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcLdapDN.#ctor(System.SByte[])">
            <summary> </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcDelRequest.#ctor(System.String)">
            <summary> Constructs an Ldapv3 delete request protocol operation.
            
            </summary>
            <param name="dn">The Distinguished Name of the entry to delete.
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcDelRequest.#ctor(System.SByte[])">
            <summary> Constructs an Ldapv3 delete request protocol operation.
            
            </summary>
            <param name="dn">The Distinguished Name of the entry to delete.
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcDelRequest.getIdentifier">
            <summary> Override getIdentifier() to return the appropriate application-wide id
            representing this delete request. The getIdentifier() method is called
            when this object is encoded.
            
            Identifier = CLASS: APPLICATION, FORM: CONSTRUCTED, TAG: 10
            </summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Rfc2251.RfcDelResponse">
            <summary> Represents and Ldap Delete Response.
            
            <pre>
            DelResponse ::= [APPLICATION 11] LdapResult
            </pre>
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcDelResponse.#ctor(Novell.Directory.Ldap.Asn1.Asn1Decoder,System.IO.Stream,System.Int32)">
            <summary> The only time a client will create a DelResponse is when it is
            decoding it from an InputStream
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcDelResponse.#ctor(Novell.Directory.Ldap.Asn1.Asn1Enumerated,Novell.Directory.Ldap.Rfc2251.RfcLdapDN,Novell.Directory.Ldap.Rfc2251.RfcLdapString,Novell.Directory.Ldap.Rfc2251.RfcReferral)">
            <summary> Constructs an RfcDelResponse from parameters.
            
            </summary>
            <param name="resultCode">the result code of the operation
            
            </param>
            <param name="matchedDN">the matched DN returned from the server
            
            </param>
            <param name="errorMessage">the diagnostic message returned from the server
            
            </param>
            <param name="referral">the referral(s) returned by the server
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcDelResponse.getIdentifier">
            <summary> Override getIdentifier to return an application-wide id.</summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Rfc2251.RfcExtendedRequest">
            <summary> Represents an Ldap Extended Request.
            
            <pre>
            ExtendedRequest ::= [APPLICATION 23] SEQUENCE {
            requestName      [0] LdapOID,
            requestValue     [1] OCTET STRING OPTIONAL }
            </pre>
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Rfc2251.RfcExtendedRequest.REQUEST_NAME">
            <summary> Context-specific TAG for optional requestName.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Rfc2251.RfcExtendedRequest.REQUEST_VALUE">
            <summary> Context-specific TAG for optional requestValue.</summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcExtendedRequest.#ctor(Novell.Directory.Ldap.Rfc2251.RfcLdapOID)">
            <summary> Constructs an extended request.
            
            </summary>
            <param name="requestName">The OID for this extended operation.
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcExtendedRequest.#ctor(Novell.Directory.Ldap.Rfc2251.RfcLdapOID,Novell.Directory.Ldap.Asn1.Asn1OctetString)">
            <summary> Constructs an extended request.
            
            </summary>
            <param name="requestName">The OID for this extended operation.
            </param>
            <param name="requestValue">An optional request value.
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcExtendedRequest.#ctor(Novell.Directory.Ldap.Asn1.Asn1Object[])">
            <summary> Constructs an extended request from an existing request.
            
            </summary>
            <param name="origRequest">Asn1Object of existing request
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcExtendedRequest.getIdentifier">
            <summary> Override getIdentifier to return an application-wide id.
            
            <pre>
            ID = CLASS: APPLICATION, FORM: CONSTRUCTED, TAG: 23.
            </pre>
            </summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Rfc2251.RfcExtendedResponse">
            <summary> Represents an Ldap Extended Response.
            
            <pre>
            ExtendedResponse ::= [APPLICATION 24] SEQUENCE {
            COMPONENTS OF LdapResult,
            responseName     [10] LdapOID OPTIONAL,
            response         [11] OCTET STRING OPTIONAL }
            </pre>
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Rfc2251.RfcExtendedResponse.RESPONSE_NAME">
            <summary> Context-specific TAG for optional responseName.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Rfc2251.RfcExtendedResponse.RESPONSE">
            <summary> Context-specific TAG for optional response.</summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcExtendedResponse.#ctor(Novell.Directory.Ldap.Asn1.Asn1Decoder,System.IO.Stream,System.Int32)">
            <summary> The only time a client will create a ExtendedResponse is when it is
            decoding it from an InputStream
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcExtendedResponse.getResultCode">
            <summary> </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcExtendedResponse.getMatchedDN">
            <summary> </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcExtendedResponse.getErrorMessage">
            <summary> </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcExtendedResponse.getReferral">
            <summary> </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcExtendedResponse.getIdentifier">
            <summary> Override getIdentifier to return an application-wide id.</summary>
        </member>
        <member name="P:Novell.Directory.Ldap.Rfc2251.RfcExtendedResponse.ResponseName">
            <summary> </summary>
        </member>
        <member name="P:Novell.Directory.Ldap.Rfc2251.RfcExtendedResponse.Response">
            <summary> </summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Rfc2251.RfcFilter">
            <summary> Represents an Ldap Filter.
            
            This filter object can be created from a String or can be built up
            programatically by adding filter components one at a time.  Existing filter
            components can be iterated though.
            
            Each filter component has an integer identifier defined in this class.
            The following are basic filter components: {@link #EQUALITY_MATCH},
            {@link #GREATER_OR_EQUAL}, {@link #LESS_OR_EQUAL}, {@link #SUBSTRINGS},
            {@link #PRESENT}, {@link #APPROX_MATCH}, {@link #EXTENSIBLE_MATCH}.
            
            More filters can be nested together into more complex filters with the
            following filter components: {@link #AND}, {@link #OR}, {@link #NOT} 
            
            Substrings can have three components:
            <pre>
            Filter ::= CHOICE {
            and             [0] SET OF Filter,
            or              [1] SET OF Filter,
            not             [2] Filter,
            equalityMatch   [3] AttributeValueAssertion,
            substrings      [4] SubstringFilter,
            greaterOrEqual  [5] AttributeValueAssertion,
            lessOrEqual     [6] AttributeValueAssertion,
            present         [7] AttributeDescription,
            approxMatch     [8] AttributeValueAssertion,
            extensibleMatch [9] MatchingRuleAssertion }
            </pre>
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Rfc2251.RfcFilter.AND">
            <summary> Identifier for AND component.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Rfc2251.RfcFilter.OR">
            <summary> Identifier for OR component.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Rfc2251.RfcFilter.NOT">
            <summary> Identifier for NOT component.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Rfc2251.RfcFilter.EQUALITY_MATCH">
            <summary> Identifier for EQUALITY_MATCH component.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Rfc2251.RfcFilter.SUBSTRINGS">
            <summary> Identifier for SUBSTRINGS component.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Rfc2251.RfcFilter.GREATER_OR_EQUAL">
            <summary> Identifier for GREATER_OR_EQUAL component.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Rfc2251.RfcFilter.LESS_OR_EQUAL">
            <summary> Identifier for LESS_OR_EQUAL component.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Rfc2251.RfcFilter.PRESENT">
            <summary> Identifier for PRESENT component.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Rfc2251.RfcFilter.APPROX_MATCH">
            <summary> Identifier for APPROX_MATCH component.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Rfc2251.RfcFilter.EXTENSIBLE_MATCH">
            <summary> Identifier for EXTENSIBLE_MATCH component.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Rfc2251.RfcFilter.INITIAL">
            <summary> Identifier for INITIAL component.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Rfc2251.RfcFilter.ANY">
            <summary> Identifier for ANY component.</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Rfc2251.RfcFilter.FINAL">
            <summary> Identifier for FINAL component.</summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcFilter.#ctor(System.String)">
            <summary> Constructs a Filter object by parsing an RFC 2254 Search Filter String.</summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcFilter.#ctor">
            <summary> Constructs a Filter object that will be built up piece by piece.   </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcFilter.parse(System.String)">
            <summary> Parses an RFC 2251 filter string into an ASN.1 Ldap Filter object.</summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcFilter.parseFilter">
            <summary> Parses an RFC 2254 filter</summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcFilter.parseFilterComp">
            <summary> RFC 2254 filter helper method. Will Parse a filter component.</summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcFilter.parseFilterList">
            <summary> Must have 1 or more Filters</summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcFilter.hex2int(System.Char)">
            <summary> Convert hex character to an integer. Return -1 if char is something
            other than a hex char.
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcFilter.unescapeString(System.String)">
            <summary> Replace escaped hex digits with the equivalent binary representation.
            Assume either V2 or V3 escape mechanisms:
            V2: \*,  \(,  \),  \\.
            V3: \2A, \28, \29, \5C, \00.
            
            </summary>
            <param name="string">   A part of the input filter string to be converted.
            
            </param>
            <returns> octet-string encoding of the specified string.
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcFilter.addObject(Novell.Directory.Ldap.Asn1.Asn1Object)">
            <summary> Called by sequential filter building methods to add to a filter
            component.
            
            Verifies that the specified Asn1Object can be added, then adds the
            object to the filter.
            </summary>
            <param name="current">  Filter component to be added to the filter
            @throws LdapLocalException Occurs when an invalid component is added, or
            when the component is out of sequence.
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcFilter.startSubstrings(System.String)">
            <summary> Creates and addes a substrings filter component.
            
            startSubstrings must be immediatly followed by at least one
            {@link #addSubstring} method and one {@link #endSubstrings} method
            @throws Novell.Directory.Ldap.LdapLocalException
            Occurs when this component is created out of sequence.
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcFilter.addSubstring(System.Int32,System.SByte[])">
            <summary> Adds a Substring component of initial, any or final substring matching.
            
            This method can be invoked only if startSubString was the last filter-
            building method called.  A substring is not required to have an 'INITIAL'
            substring.  However, when a filter contains an 'INITIAL' substring only
            one can be added, and it must be the first substring added. Any number of
            'ANY' substrings can be added. A substring is not required to have a
            'FINAL' substrings either.  However, when a filter does contain a 'FINAL'
            substring only one can be added, and it must be the last substring added.
            
            </summary>
            <param name="type">Substring type: INITIAL | ANY | FINAL]
            </param>
            <param name="value">Value to use for matching
            @throws LdapLocalException   Occurs if this method is called out of
            sequence or the type added is out of sequence.
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcFilter.endSubstrings">
            <summary> Completes a SubString filter component.
            
            @throws LdapLocalException Occurs when this is called out of sequence,
            or the substrings filter is empty.
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcFilter.addAttributeValueAssertion(System.Int32,System.String,System.SByte[])">
            <summary> Creates and adds an AttributeValueAssertion to the filter.
            
            </summary>
            <param name="rfcType">Filter type: EQUALITY_MATCH | GREATER_OR_EQUAL
            | LESS_OR_EQUAL | APPROX_MATCH ]
            </param>
            <param name="attrName">Name of the attribute to be asserted
            </param>
            <param name="value">Value of the attribute to be asserted
            @throws LdapLocalException
            Occurs when the filter type is not a valid attribute assertion.
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcFilter.addPresent(System.String)">
            <summary> Creates and adds a present matching to the filter.
            
            </summary>
            <param name="attrName">Name of the attribute to check for presence.
            @throws LdapLocalException
            Occurs if addPresent is called out of sequence.
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcFilter.addExtensibleMatch(System.String,System.String,System.SByte[],System.Boolean)">
            <summary> Adds an extensible match to the filter.
            
            </summary>
            <param name="">matchingRule
            OID or name of the matching rule to use for comparison
            </param>
            <param name="attrName"> Name of the attribute to match.
            </param>
            <param name="value"> Value of the attribute to match against.
            </param>
            <param name="useDNMatching">Indicates whether DN matching should be used.
            @throws LdapLocalException
            Occurs when addExtensibleMatch is called out of sequence.
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcFilter.startNestedFilter(System.Int32)">
            <summary> Creates and adds the Asn1Tagged value for a nestedFilter: AND, OR, or
            NOT.
            
            Note that a Not nested filter can only have one filter, where AND
            and OR do not
            
            </summary>
            <param name="rfcType">Filter type:
            [AND | OR | NOT]
            @throws Novell.Directory.Ldap.LdapLocalException
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcFilter.endNestedFilter(System.Int32)">
            <summary> Completes a nested filter and checks for the valid filter type.</summary>
            <param name="rfcType"> Type of filter to complete.
            @throws Novell.Directory.Ldap.LdapLocalException  Occurs when the specified
            type differs from the current filter component.
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcFilter.getFilterIterator">
            <summary> Creates an iterator over the preparsed segments of a filter.
            
            The first object returned by an iterator is an integer indicating the
            type of filter components.  Subseqence values are returned.  If a
            component is of type 'AND' or 'OR' or 'NOT' then the value
            returned is another iterator.  This iterator is used by toString.
            
            </summary>
            <returns> Iterator over filter segments
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcFilter.filterToString">
            <summary> Creates and returns a String representation of this filter.</summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcFilter.stringFilter(System.Collections.IEnumerator,System.Text.StringBuilder)">
            <summary> Uses a filterIterator to create a string representation of a filter.
            
            </summary>
            <param name="itr">Iterator of filter components
            </param>
            <param name="filter">Buffer to place a string representation of the filter
            </param>
            <seealso cref="T:Novell.Directory.Ldap.Rfc2251.RfcFilter.FilterIterator">
            </seealso>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcFilter.byteString(System.SByte[])">
            <summary> Convert a UTF8 encoded string, or binary data, into a String encoded for
            a string filter.
            </summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Rfc2251.RfcFilter.FilterIterator">
            <summary> This inner class wrappers the Search Filter with an iterator.
            This iterator will give access to all the individual components
            preparsed.  The first call to next will return an Integer identifying
            the type of filter component.  Then the component values will be returned
            AND, NOT, and OR components values will be returned as Iterators.
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Rfc2251.RfcFilter.FilterIterator.tagReturned">
            <summary>indicates if the identifier for a component has been returned yet </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Rfc2251.RfcFilter.FilterIterator.index">
            <summary>indexes the several parts a component may have </summary>
        </member>
        <member name="P:Novell.Directory.Ldap.Rfc2251.RfcFilter.FilterIterator.Current">
            <summary> Returns filter identifiers and components of a filter.
            
            The first object returned is an Integer identifying
            its type.
            </summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Rfc2251.RfcFilter.FilterTokenizer">
            <summary> This inner class will tokenize the components of an RFC 2254 search filter.</summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcFilter.FilterTokenizer.#ctor(Novell.Directory.Ldap.Rfc2251.RfcFilter,System.String)">
            <summary> Constructs a FilterTokenizer for a filter.</summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcFilter.FilterTokenizer.getLeftParen">
            <summary> Reads the current char and throws an Exception if it is not a left
            parenthesis.
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcFilter.FilterTokenizer.getRightParen">
            <summary> Reads the current char and throws an Exception if it is not a right
            parenthesis.
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcFilter.FilterTokenizer.peekChar">
            <summary> Return the current char without advancing the offset pointer. This is
            used by ParseFilterList when determining if there are any more
            Filters in the list.
            </summary>
        </member>
        <member name="P:Novell.Directory.Ldap.Rfc2251.RfcFilter.FilterTokenizer.OpOrAttr">
            <summary> Reads either an operator, or an attribute, whichever is
            next in the filter string.
            
            
            If the next component is an attribute, it is read and stored in the
            attr field of this class which may be retrieved with getAttr()
            and a -1 is returned. Otherwise, the int value of the operator read is
            returned.
            </summary>
        </member>
        <member name="P:Novell.Directory.Ldap.Rfc2251.RfcFilter.FilterTokenizer.FilterType">
            <summary> Reads an RFC 2251 filter type from the filter string and returns its
            int value.
            </summary>
        </member>
        <member name="P:Novell.Directory.Ldap.Rfc2251.RfcFilter.FilterTokenizer.Value">
            <summary> Reads a value from a filter string.</summary>
        </member>
        <member name="P:Novell.Directory.Ldap.Rfc2251.RfcFilter.FilterTokenizer.Attr">
            <summary> Returns the current attribute identifier.</summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Rfc2251.RfcIntermediateResponse">
             <summary> 
             Represents an LDAP Intermediate Response.
            
            
              IntermediateResponse ::= [APPLICATION 25] SEQUENCE {
                     COMPONENTS OF LDAPResult, note: only present on incorrectly 
              encoded response from 
                                                           pre Falcon-sp1 server 
                           responseName     [10] LDAPOID OPTIONAL,
                           responseValue    [11] OCTET STRING OPTIONAL }
             </summary>
            
        </member>
        <member name="F:Novell.Directory.Ldap.Rfc2251.RfcIntermediateResponse.TAG_RESPONSE_NAME">
            Context-specific TAG for optional responseName.
        </member>
        <member name="F:Novell.Directory.Ldap.Rfc2251.RfcIntermediateResponse.TAG_RESPONSE">
            Context-specific TAG for optional response.
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcIntermediateResponse.#ctor(Novell.Directory.Ldap.Asn1.Asn1Decoder,System.IO.Stream,System.Int32)">
             The only time a client will create a IntermediateResponse is when it is
             decoding it from an InputStream. The stream contains the intermediate
             response sequence that follows the msgID in the PDU. The intermediate
             response draft defines this as:
                  IntermediateResponse ::= [APPLICATION 25] SEQUENCE {
                         responseName     [0] LDAPOID OPTIONAL,
                         responseValue    [1] OCTET STRING OPTIONAL }
            
             Until post Falcon sp1, the LDAP server was incorrectly encoding
             intermediate response as:
                  IntermediateResponse ::= [APPLICATION 25] SEQUENCE {
                         Components of LDAPResult,
                         responseName     [0] LDAPOID OPTIONAL,
                         responseValue    [1] OCTET STRING OPTIONAL }
            
             where the Components of LDAPResult are
                           resultCode      ENUMERATED {...}
                           matchedDN       LDAPDN,
                           errorMessage    LDAPString,
                           referral        [3] Referral OPTIONAL }
            
            
             (The components of LDAPResult never have the optional referral.)
             This constructor is written to handle both cases.
            
             The sequence of this intermediate response will have the element
             at index m_responseNameIndex set to an RfcLDAPOID containing the
             oid of the response. The element at m_responseValueIndex will be set
             to an ASN1OctetString containing the value bytes.
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcIntermediateResponse.getIdentifier">
            Override getIdentifier to return an application-wide id.
        </member>
        <member name="T:Novell.Directory.Ldap.Rfc2251.RfcLdapMessage">
            <summary> Represents an Ldap Message.
            
            <pre>
            LdapMessage ::= SEQUENCE {
            messageID       MessageID,
            protocolOp      CHOICE {
            bindRequest     BindRequest,
            bindResponse    BindResponse,
            unbindRequest   UnbindRequest,
            searchRequest   SearchRequest,
            searchResEntry  SearchResultEntry,
            searchResDone   SearchResultDone,
            searchResRef    SearchResultReference,
            modifyRequest   ModifyRequest,
            modifyResponse  ModifyResponse,
            addRequest      AddRequest,
            addResponse     AddResponse,
            delRequest      DelRequest,
            delResponse     DelResponse,
            modDNRequest    ModifyDNRequest,
            modDNResponse   ModifyDNResponse,
            compareRequest  CompareRequest,
            compareResponse CompareResponse,
            abandonRequest  AbandonRequest,
            extendedReq     ExtendedRequest,
            extendedResp    ExtendedResponse },
            controls       [0] Controls OPTIONAL }
            </pre>
            
            
            Note: The creation of a MessageID should be hidden within the creation of
            an RfcLdapMessage. The MessageID needs to be in sequence, and has an
            upper and lower limit. There is never a case when a user should be
            able to specify the MessageID for an RfcLdapMessage. The MessageID()
            constructor should be package protected. (So the MessageID value
            isn't arbitrarily run up.)
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcLdapMessage.#ctor(Novell.Directory.Ldap.Asn1.Asn1Object[],Novell.Directory.Ldap.Rfc2251.RfcRequest,System.String,System.String,System.Boolean)">
            <summary> Create an RfcLdapMessage by copying the content array
            
            </summary>
            <param name="origContent">the array list to copy
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcLdapMessage.#ctor(Novell.Directory.Ldap.Rfc2251.RfcRequest)">
            <summary> Create an RfcLdapMessage using the specified Ldap Request.</summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcLdapMessage.#ctor(Novell.Directory.Ldap.Rfc2251.RfcRequest,Novell.Directory.Ldap.Rfc2251.RfcControls)">
            <summary> Create an RfcLdapMessage request from input parameters.</summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcLdapMessage.#ctor(Novell.Directory.Ldap.Asn1.Asn1Sequence)">
            <summary> Create an RfcLdapMessage using the specified Ldap Response.</summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcLdapMessage.#ctor(Novell.Directory.Ldap.Asn1.Asn1Sequence,Novell.Directory.Ldap.Rfc2251.RfcControls)">
            <summary> Create an RfcLdapMessage response from input parameters.</summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcLdapMessage.#ctor(Novell.Directory.Ldap.Asn1.Asn1Decoder,System.IO.Stream,System.Int32)">
            <summary> Will decode an RfcLdapMessage directly from an InputStream.</summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcLdapMessage.getRequest">
            <summary> Returns the request associated with this RfcLdapMessage.
            Throws a class cast exception if the RfcLdapMessage is not a request.
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcLdapMessage.dupMessage(System.String,System.String,System.Boolean)">
            <summary> Duplicate this message, replacing base dn, filter, and scope if supplied
            
            </summary>
            <param name="dn">the base dn
            
            </param>
            <param name="filter">the filter
            
            </param>
            <param name="reference">true if a search reference
            
            </param>
            <returns> the object representing the new message
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.Rfc2251.RfcLdapMessage.MessageID">
            <summary> Returns this RfcLdapMessage's messageID as an int.</summary>
        </member>
        <member name="P:Novell.Directory.Ldap.Rfc2251.RfcLdapMessage.Type">
            <summary> Returns this RfcLdapMessage's message type</summary>
        </member>
        <member name="P:Novell.Directory.Ldap.Rfc2251.RfcLdapMessage.Response">
            <summary> Returns the response associated with this RfcLdapMessage.
            Can be one of RfcLdapResult, RfcBindResponse, RfcExtendedResponse
            all which extend RfcResponse. It can also be
            RfcSearchResultEntry, or RfcSearchResultReference
            </summary>
        </member>
        <member name="P:Novell.Directory.Ldap.Rfc2251.RfcLdapMessage.Controls">
            <summary> Returns the optional Controls for this RfcLdapMessage.</summary>
        </member>
        <member name="P:Novell.Directory.Ldap.Rfc2251.RfcLdapMessage.RequestDN">
            <summary> Returns the dn of the request, may be null</summary>
        </member>
        <member name="P:Novell.Directory.Ldap.Rfc2251.RfcLdapMessage.RequestingMessage">
            <summary> returns the original request in this message
            
            </summary>
            <returns> the original msg request for this response
            </returns>
            <summary> sets the original request in this message
            
            </summary>
            <param name="msg">the original request for this response
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcLdapOID.#ctor(System.String)">
            <summary> </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcLdapOID.#ctor(System.SByte[])">
            <summary> </summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Rfc2251.RfcLdapURL">
            <summary> Represents an Ldap URL.
            
            <pre>
            LdapURL ::= LdapString -- limited to characters permitted in URLs
            </pre>
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcLdapURL.#ctor(System.String)">
            <summary> </summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Rfc2251.RfcMatchingRuleAssertion">
            <summary> Represents an Ldap Matching Rule Assertion.
            
            <pre>
            MatchingRuleAssertion ::= SEQUENCE {
            matchingRule    [1] MatchingRuleId OPTIONAL,
            type            [2] AttributeDescription OPTIONAL,
            matchValue      [3] AssertionValue,
            dnAttributes    [4] BOOLEAN DEFAULT FALSE }
            </pre>
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcMatchingRuleAssertion.#ctor(Novell.Directory.Ldap.Rfc2251.RfcAssertionValue)">
            <summary> Creates a MatchingRuleAssertion with the only required parameter.
            
            </summary>
            <param name="matchValue">The assertion value.
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcMatchingRuleAssertion.#ctor(Novell.Directory.Ldap.Rfc2251.RfcMatchingRuleId,Novell.Directory.Ldap.Rfc2251.RfcAttributeDescription,Novell.Directory.Ldap.Rfc2251.RfcAssertionValue,Novell.Directory.Ldap.Asn1.Asn1Boolean)">
            <summary> Creates a MatchingRuleAssertion.
            
            The value null may be passed for an optional value that is not used.
            
            </summary>
            <param name="matchValue">The assertion value.
            </param>
            <param name="matchingRule">Optional matching rule.
            </param>
            <param name="type">Optional attribute description.
            </param>
            <param name="dnAttributes">Asn1Boolean value. (default false)
            </param>
        </member>
        <member name="T:Novell.Directory.Ldap.Rfc2251.RfcMatchingRuleId">
            <summary> Represents an Ldap Matching Rule ID.
            
            <pre>
            MatchingRuleId ::= LdapString
            </pre>
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcMatchingRuleId.#ctor(System.String)">
            <summary> Constructs a MatchingRuleId from a String.</summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Rfc2251.RfcModifyDNRequest">
            <summary> Represents an LDAM MOdify DN Request.
            
            <pre>
            ModifyDNRequest ::= [APPLICATION 12] SEQUENCE {
            entry           LdapDN,
            newrdn          RelativeLdapDN,
            deleteoldrdn    BOOLEAN,
            newSuperior     [0] LdapDN OPTIONAL }
            </pre>
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcModifyDNRequest.#ctor(Novell.Directory.Ldap.Rfc2251.RfcLdapDN,Novell.Directory.Ldap.Rfc2251.RfcRelativeLdapDN,Novell.Directory.Ldap.Asn1.Asn1Boolean)">
            <summary> </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcModifyDNRequest.#ctor(Novell.Directory.Ldap.Rfc2251.RfcLdapDN,Novell.Directory.Ldap.Rfc2251.RfcRelativeLdapDN,Novell.Directory.Ldap.Asn1.Asn1Boolean,Novell.Directory.Ldap.Rfc2251.RfcLdapDN)">
            <summary> </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcModifyDNRequest.#ctor(Novell.Directory.Ldap.Asn1.Asn1Object[],System.String)">
            <summary> Constructs a new Delete Request copying from the ArrayList of
            an existing request.
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcModifyDNRequest.getIdentifier">
            <summary> Override getIdentifier to return an application-wide id.
            
            <pre>
            ID = CLASS: APPLICATION, FORM: CONSTRUCTED, TAG: 12.
            </pre>
            </summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Rfc2251.RfcModifyDNResponse">
            <summary> Represents an Ldap Modify DN Request.
            
            <pre>
            ModifyDNResponse ::= [APPLICATION 13] LdapResult
            </pre>
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcModifyDNResponse.#ctor(Novell.Directory.Ldap.Asn1.Asn1Decoder,System.IO.Stream,System.Int32)">
            <summary> Create a ModifyDNResponse by decoding it from an InputStream</summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcModifyDNResponse.#ctor(Novell.Directory.Ldap.Asn1.Asn1Enumerated,Novell.Directory.Ldap.Rfc2251.RfcLdapDN,Novell.Directory.Ldap.Rfc2251.RfcLdapString,Novell.Directory.Ldap.Rfc2251.RfcReferral)">
            <summary> Constructs an RfcModifyDNResponse from parameters.
            
            </summary>
            <param name="resultCode">the result code of the operation
            
            </param>
            <param name="matchedDN">the matched DN returned from the server
            
            </param>
            <param name="errorMessage">the diagnostic message returned from the server
            
            </param>
            <param name="referral">the referral(s) returned by the server
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcModifyDNResponse.getIdentifier">
            <summary> Override getIdentifier to return an application-wide id.</summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Rfc2251.RfcModifyRequest">
            <summary> Represents an Ldap Modify Request.
            
            <pre>
            ModifyRequest ::= [APPLICATION 6] SEQUENCE {
            object          LdapDN,
            modification    SEQUENCE OF SEQUENCE {
            operation       ENUMERATED {
            add     (0),
            delete  (1),
            replace (2) },
            modification    AttributeTypeAndValues } }
            </pre>
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcModifyRequest.#ctor(Novell.Directory.Ldap.Rfc2251.RfcLdapDN,Novell.Directory.Ldap.Asn1.Asn1SequenceOf)">
            <summary> </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcModifyRequest.#ctor(Novell.Directory.Ldap.Asn1.Asn1Object[],System.String)">
            <summary> Constructs a new Modify Request copying from the ArrayList of
            an existing request.
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcModifyRequest.getIdentifier">
            <summary> Override getIdentifier to return an application-wide id.</summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcModifyRequest.getRequestDN">
            <summary> Return the String value of the DN associated with this request
            
            </summary>
            <returns> the DN for this request.
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.Rfc2251.RfcModifyRequest.Modifications">
            <summary> Return the Modifications for this request
            
            </summary>
            <returns> the modifications for this request.
            </returns>
        </member>
        <member name="T:Novell.Directory.Ldap.Rfc2251.RfcModifyResponse">
            <summary> Represents an Ldap Modify Response.
            
            <pre>
            ModifyResponse ::= [APPLICATION 7] LdapResult
            </pre>
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcModifyResponse.#ctor(Novell.Directory.Ldap.Asn1.Asn1Decoder,System.IO.Stream,System.Int32)">
            <summary> The only time a client will create a ModifyResponse is when it is
            decoding it from an InputStream
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcModifyResponse.#ctor(Novell.Directory.Ldap.Asn1.Asn1Enumerated,Novell.Directory.Ldap.Rfc2251.RfcLdapDN,Novell.Directory.Ldap.Rfc2251.RfcLdapString,Novell.Directory.Ldap.Rfc2251.RfcReferral)">
            <summary> Constructs an RfcModifyResponse from parameters.
            
            </summary>
            <param name="resultCode">the result code of the operation
            
            </param>
            <param name="matchedDN">the matched DN returned from the server
            
            </param>
            <param name="errorMessage">the diagnostic message returned from the server
            
            </param>
            <param name="referral">the referral(s) returned by the server
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcModifyResponse.getIdentifier">
            <summary> Override getIdentifier to return an application-wide id.</summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Rfc2251.RfcReferral">
            <summary> Represents an Ldap Referral.
            
            <pre>
            Referral ::= SEQUENCE OF LdapURL
            </pre>
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcReferral.#ctor(Novell.Directory.Ldap.Asn1.Asn1Decoder,System.IO.Stream,System.Int32)">
            <summary> The only time a Referral object is constructed, is when we are
            decoding an RfcLdapResult or COMPONENTS OF RfcLdapResult.
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcRelativeLdapDN.#ctor(System.String)">
            <summary> </summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Rfc2251.RfcSaslCredentials">
            <summary> Represents Ldap Sasl Credentials.
            
            <pre>
            SaslCredentials ::= SEQUENCE {
            mechanism               LdapString,
            credentials             OCTET STRING OPTIONAL }
            </pre>
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcSaslCredentials.#ctor(Novell.Directory.Ldap.Rfc2251.RfcLdapString)">
            <summary> </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcSaslCredentials.#ctor(Novell.Directory.Ldap.Rfc2251.RfcLdapString,Novell.Directory.Ldap.Asn1.Asn1OctetString)">
            <summary> </summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Rfc2251.RfcSearchRequest">
            <summary> Represents an Ldap Search Request.
            
            <pre>
            SearchRequest ::= [APPLICATION 3] SEQUENCE {
            baseObject      LdapDN,
            scope           ENUMERATED {
            baseObject              (0),
            singleLevel             (1),
            wholeSubtree            (2) },
            derefAliases    ENUMERATED {
            neverDerefAliases       (0),
            derefInSearching        (1),
            derefFindingBaseObj     (2),
            derefAlways             (3) },
            sizeLimit       INTEGER (0 .. maxInt),
            timeLimit       INTEGER (0 .. maxInt),
            typesOnly       BOOLEAN,
            filter          Filter,
            attributes      AttributeDescriptionList }
            </pre>
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcSearchRequest.#ctor(Novell.Directory.Ldap.Asn1.Asn1Object[],System.String,System.String,System.Boolean)">
            <summary> Constructs a new Search Request copying from an existing request.</summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcSearchRequest.getIdentifier">
            <summary> Override getIdentifier to return an application-wide id.
            
            <pre>
            ID = CLASS: APPLICATION, FORM: CONSTRUCTED, TAG: 3. (0x63)
            </pre>
            </summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Rfc2251.RfcSearchResultDone">
            <summary> Represents an Ldap Search Result Done Response.
            
            <pre>
            SearchResultDone ::= [APPLICATION 5] LdapResult
            </pre>
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcSearchResultDone.#ctor(Novell.Directory.Ldap.Asn1.Asn1Decoder,System.IO.Stream,System.Int32)">
            <summary> Decode a search result done from the input stream.</summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcSearchResultDone.#ctor(Novell.Directory.Ldap.Asn1.Asn1Enumerated,Novell.Directory.Ldap.Rfc2251.RfcLdapDN,Novell.Directory.Ldap.Rfc2251.RfcLdapString,Novell.Directory.Ldap.Rfc2251.RfcReferral)">
            <summary> Constructs an RfcSearchResultDone from parameters.
            
            </summary>
            <param name="resultCode">the result code of the operation
            
            </param>
            <param name="matchedDN">the matched DN returned from the server
            
            </param>
            <param name="errorMessage">the diagnostic message returned from the server
            
            </param>
            <param name="referral">the referral(s) returned by the server
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcSearchResultDone.getIdentifier">
            <summary> Override getIdentifier to return an application-wide id.</summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Rfc2251.RfcSearchResultEntry">
            <summary> Represents an Ldap Search Result Entry.
            
            <pre>
            SearchResultEntry ::= [APPLICATION 4] SEQUENCE {
            objectName      LdapDN,
            attributes      PartialAttributeList }
            </pre>
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcSearchResultEntry.#ctor(Novell.Directory.Ldap.Asn1.Asn1Decoder,System.IO.Stream,System.Int32)">
            <summary> The only time a client will create a SearchResultEntry is when it is
            decoding it from an InputStream
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcSearchResultEntry.getIdentifier">
            <summary> Override getIdentifier to return an application-wide id.</summary>
        </member>
        <member name="P:Novell.Directory.Ldap.Rfc2251.RfcSearchResultEntry.ObjectName">
            <summary> </summary>
        </member>
        <member name="P:Novell.Directory.Ldap.Rfc2251.RfcSearchResultEntry.Attributes">
            <summary> </summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Rfc2251.RfcSearchResultReference">
            <summary> Represents an Ldap Search Result Reference.
            
            <pre>
            SearchResultReference ::= [APPLICATION 19] SEQUENCE OF LdapURL
            </pre>
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcSearchResultReference.#ctor(Novell.Directory.Ldap.Asn1.Asn1Decoder,System.IO.Stream,System.Int32)">
            <summary> The only time a client will create a SearchResultReference is when it is
            decoding it from an InputStream
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcSearchResultReference.getIdentifier">
            <summary> Override getIdentifier to return an application-wide id.</summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Rfc2251.RfcSubstringFilter">
            <summary> Represents an Ldap Substring Filter.
            
            <pre>
            SubstringFilter ::= SEQUENCE {
            type            AttributeDescription,
            -- at least one must be present
            substrings      SEQUENCE OF CHOICE {
            initial [0] LdapString,
            any     [1] LdapString,
            final   [2] LdapString } }
            </pre>
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcSubstringFilter.#ctor(Novell.Directory.Ldap.Rfc2251.RfcAttributeDescription,Novell.Directory.Ldap.Asn1.Asn1SequenceOf)">
            <summary> </summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Rfc2251.RfcUnbindRequest">
            <summary> Represents the Ldap Unbind request.
            
            <pre>
            UnbindRequest ::= [APPLICATION 2] NULL
            </pre>
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcUnbindRequest.#ctor">
            <summary> Construct an RfCUnbind Request</summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Rfc2251.RfcUnbindRequest.getIdentifier">
            <summary> Override getIdentifier to return an application-wide id.
            <pre>
            ID = CLASS: APPLICATION, FORM: PRIMITIVE, TAG: 2. (0x42)
            </pre>
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Utilclass.ArrayEnumeration.#ctor(System.Object[])">
            <summary> Constructor to create the Enumeration
            
            </summary>
            <param name="eArray">the array to use for the Enumeration
            </param>
        </member>
        <member name="T:Novell.Directory.Ldap.Utilclass.AttributeQualifier">
            <summary> Encapsulates a qualifier in a Schema definition.  Definitions that are not
            in rfc2252.  Begins with 'X-'
            </summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Utilclass.Base64">
            <summary> The Base64 utility class performs base64 encoding and decoding.
            
            The Base64 Content-Transfer-Encoding is designed to represent
            arbitrary sequences of octets in a form that need not be humanly
            readable.  The encoding and decoding algorithms are simple, but the
            encoded data are consistently only about 33 percent larger than the
            unencoded data.  The base64 encoding algorithm is defined by
            RFC 2045.
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Utilclass.Base64.emap">
            <summary>Conversion table for encoding to base64.
            
            emap is a six-bit value to base64 (8-bit) converstion table.
            For example, the value of the 6-bit value 15
            is mapped to 0x50 which is the ASCII letter 'P', i.e. the letter P
            is the base64 encoded character that represents the 6-bit value 15.
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Utilclass.Base64.dmap">
            <summary>conversion table for decoding from base64.
            
            dmap is a base64 (8-bit) to six-bit value converstion table.
            For example the ASCII character 'P' has a value of 80.
            The value in the 80th position of the table is 0x0f or 15.
            15 is the original 6-bit value that the letter 'P' represents.
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Utilclass.Base64.#ctor">
            <summary> Default constructor, don't allow instances of the
            utility class to be created.
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Utilclass.Base64.encode(System.String)">
            <summary> Encodes the specified String into a base64 encoded String object.
            
            </summary>
            <param name="inputString"> The String object to be encoded.
            
            </param>
            <returns> a String containing the encoded value of the input.
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.Utilclass.Base64.encode(System.SByte[])">
            <summary> Encodes the specified bytes into a base64 array of bytes.
            Each byte in the return array represents a base64 character.
            
            </summary>
            <param name="inputBytes"> the byte array to be encoded.
            
            </param>
            <returns>            a String containing the base64 encoded data
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.Utilclass.Base64.decode(System.String)">
            <summary> Decodes the input base64 encoded String.
            The resulting binary data is returned as an array of bytes.
            
            </summary>
            <param name="encodedString">The base64 encoded String object.
            
            </param>
            <returns> The decoded byte array.
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.Utilclass.Base64.decode(System.Char[])">
            <summary> Decodes the input base64 encoded array of characters.
            The resulting binary data is returned as an array of bytes.
            
            </summary>
            <param name="encodedChars">The character array containing the base64 encoded data.
            
            </param>
            <returns> A byte array object containing decoded bytes.
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.Utilclass.Base64.decode(System.Text.StringBuilder,System.Int32,System.Int32)">
            <summary> Decodes a base64 encoded StringBuffer.
            Decodes all or part of the input base64 encoded StringBuffer, each
            Character value representing a base64 character. The resulting
            binary data is returned as an array of bytes.
            
            </summary>
            <param name="encodedSBuf">The StringBuffer object that contains base64
            encoded data.
            </param>
            <param name="start"> The start index of the base64 encoded data.
            </param>
            <param name="end"> The end index + 1 of the base64 encoded data.
            
            </param>
            <returns> The decoded byte array
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.Utilclass.Base64.isLDIFSafe(System.SByte[])">
            <summary> Checks if the input byte array contains only safe values, that is,
            the data does not need to be encoded for use with LDIF.
            The rules for checking safety are based on the rules for LDIF
            (Ldap Data Interchange Format) per RFC 2849.  The data does
            not need to be encoded if all the following are true:
            
            The data cannot start with the following byte values:
            <pre>
            00 (NUL)
            10 (LF)
            13 (CR)
            32 (SPACE)
            58 (:)
            60 (LESSTHAN)
            Any character with value greater than 127
            (Negative for a byte value)
            </pre>
            The data cannot contain any of the following byte values:
            <pre>
            00 (NUL)
            10 (LF)
            13 (CR)
            Any character with value greater than 127
            (Negative for a byte value)
            </pre>
            The data cannot end with a space.
            
            </summary>
            <param name="bytes">the bytes to be checked.
            
            </param>
            <returns> true if encoding not required for LDIF
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.Utilclass.Base64.isLDIFSafe(System.String)">
            <summary> Checks if the input String contains only safe values, that is,
            the data does not need to be encoded for use with LDIF.
            The rules for checking safety are based on the rules for LDIF
            (Ldap Data Interchange Format) per RFC 2849.  The data does
            not need to be encoded if all the following are true:
            
            The data cannot start with the following char values:
            <pre>
            00 (NUL)
            10 (LF)
            13 (CR)
            32 (SPACE)
            58 (:)
            60 (LESSTHAN)
            Any character with value greater than 127
            </pre>
            The data cannot contain any of the following char values:
            <pre>
            00 (NUL)
            10 (LF)
            13 (CR)
            Any character with value greater than 127
            </pre>
            The data cannot end with a space.
            
            </summary>
            <param name="str">the String to be checked.
            
            </param>
            <returns> true if encoding not required for LDIF
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.Utilclass.Base64.getByteCount(System.SByte)">
            <summary> Given the first byte in a sequence, getByteCount returns the number of
            additional bytes in a UTF-8 character sequence (not including the first
            byte).
            
            </summary>
            <param name="b"> The first byte in a UTF-8 character sequence.
            
            </param>
            <returns> the number of additional bytes in a UTF-8 character sequence.
            </returns>
        </member>
        <member name="F:Novell.Directory.Ldap.Utilclass.Base64.lowerBoundMask">
            <summary> Bit masks used to determine if a the value of UTF-8 byte sequence
            is less than the minimum value.
            
            If the value of a byte sequence is less than the minimum value then
            the number should be encoded in fewer bytes and is invalid.  For example
            If the first byte indicates that a sequence has three bytes in a
            sequence. Then the top five bits cannot be zero.  Notice the index into
            the array is one less than the number of bytes in a sequence.
            A validity test for this could be:
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Utilclass.Base64.continuationMask">
            <summary>mask to AND with a continuation byte: should equal continuationResult </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Utilclass.Base64.continuationResult">
            <summary>expected result of ANDing a continuation byte with continuationMask </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Utilclass.Base64.isValidUTF8(System.SByte[],System.Boolean)">
            <summary> Determines if an array of bytes contains only valid UTF-8 characters.
            
            UTF-8 is the standard encoding for Ldap strings.  If a value contains
            data that is not valid UTF-8 then data is lost converting the
            value to a Java String.
            
            
            In addition, Java Strings currently use UCS2 (Unicode Code Standard
            2-byte characters). UTF-8 can be encoded as USC2 and UCS4 (4-byte
            characters).  Some valid UTF-8 characters cannot be represented as UCS2
            characters. To determine if all UTF-8 sequences can be encoded into
            UCS2 characters (a Java String), specify the <code>isUCS2Only</code>
            parameter as <code>true</code>.
            
            </summary>
            <param name="array"> An array of bytes that are to be tested for valid UTF-8
            encoding.
            
            </param>
            <param name="isUCS2Only">true if the UTF-8 values must be restricted to fit
            within UCS2 encoding (2 bytes)
            </param>
            <returns> true if all values in the byte array are valid UTF-8
            sequences.  If <code>isUCS2Only</code> is
            <code>true</code>, the method returns false if a UTF-8
            sequence generates any character that cannot be
            represented as a UCS2 character (Java String)
            </returns>
        </member>
        <member name="T:Novell.Directory.Ldap.Utilclass.BindProperties">
            <summary> Encapsulates an Ldap Bind properties</summary>
        </member>
        <member name="P:Novell.Directory.Ldap.Utilclass.BindProperties.ProtocolVersion">
            <summary> gets the protocol version</summary>
        </member>
        <member name="P:Novell.Directory.Ldap.Utilclass.BindProperties.AuthenticationDN">
            <summary> Gets the authentication dn
            
            </summary>
            <returns> the authentication dn for this connection
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.Utilclass.BindProperties.AuthenticationMethod">
            <summary> Gets the authentication method
            
            </summary>
            <returns> the authentication method for this connection
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.Utilclass.BindProperties.SaslBindProperties">
            <summary> Gets the SASL Bind properties
            
            </summary>
            <returns> the sasl bind properties for this connection
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.Utilclass.BindProperties.SaslCallbackHandler">
            <summary> Gets the SASL callback handler
            
            </summary>
            <returns> the sasl callback handler for this connection
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.Utilclass.BindProperties.Anonymous">
            <summary> Indicates whether or not the bind properties specify an anonymous bind
            
            </summary>
            <returns> true if the bind properties specify an anonymous bind
            </returns>
        </member>
        <member name="T:Novell.Directory.Ldap.Utilclass.CharacterTypes">
            <summary>
            Specifies the types of Characters.
            </summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Utilclass.DN">
            <summary> A DN encapsulates a Distinguished Name (an ldap name with context). A DN
            does not need to be fully distinguished, or extend to the Root of a
            directory.  It provides methods to get information about the DN and to
            manipulate the DN.  
            
             The following are examples of valid DN:
            <ul>
            <li>cn=admin,ou=marketing,o=corporation</li>
            <li>cn=admin,ou=marketing</li>
            <li>2.5.4.3=admin,ou=marketing</li>
            <li>oid.2.5.4.3=admin,ou=marketing</li>
            </ul>
            
            Note: Multivalued attributes are all considered to be one
            component and are represented in one RDN (see RDN)
            
            
            </summary>
            <seealso cref="T:Novell.Directory.Ldap.Utilclass.RDN">
            </seealso>
        </member>
        <member name="M:Novell.Directory.Ldap.Utilclass.DN.#ctor(System.String)">
            <summary> Constructs a new DN based on the specified string representation of a
            distinguished name. The syntax of the DN must conform to that specified
            in RFC 2253.
            
            </summary>
            <param name="dnString">a string representation of the distinguished name
            </param>
            <exception>  IllegalArgumentException  if the the value of the dnString
            parameter does not adhere to the syntax described in
            RFC 2253
            </exception>
        </member>
        <member name="M:Novell.Directory.Ldap.Utilclass.DN.isAlpha(System.Char)">
            <summary> Checks a character to see if it is an ascii alphabetic character in
            ranges 65-90 or 97-122.
            
            </summary>
            <param name="ch">the character to be tested.
            </param>
            <returns>  <code>true</code> if the character is an ascii alphabetic
            character
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.Utilclass.DN.isDigit(System.Char)">
            <summary> Checks a character to see if it is an ascii digit (0-9) character in
            the ascii value range 48-57.
            
            </summary>
            <param name="ch">the character to be tested.
            </param>
            <returns>  <code>true</code> if the character is an ascii alphabetic
            character
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.Utilclass.DN.isHexDigit(System.Char)">
            <summary> Checks a character to see if it is valid hex digit 0-9, a-f, or
            A-F (ASCII value ranges 48-47, 65-70, 97-102).
            
            </summary>
            <param name="ch">the character to be tested.
            </param>
            <returns>  <code>true</code> if the character is a valid hex digit
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.Utilclass.DN.needsEscape(System.Char)">
            <summary> Checks a character to see if it must always be escaped in the
            string representation of a DN.  We must tests for space, sharp, and
            equals individually.
            
            </summary>
            <param name="ch">the character to be tested.
            </param>
            <returns>  <code>true</code> if the character needs to be escaped in at
            least some instances.
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.Utilclass.DN.hexToChar(System.Char,System.Char)">
            <summary> Converts two valid hex digit characters that form the string
            representation of an ascii character value to the actual ascii
            character.
            
            </summary>
            <param name="hex1">the hex digit for the high order byte.
            </param>
            <param name="hex0">the hex digit for the low order byte.
            </param>
            <returns>  the character whose value is represented by the parameters.
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.Utilclass.DN.ToString">
            <summary> Creates and returns a string that represents this DN.  The string
            follows RFC 2253, which describes String representation of DN's and
            RDN's
            
            </summary>
            <returns> A DN string.
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.Utilclass.DN.getrdnList">
            <summary> Compares this DN to the specified DN to determine if they are equal.
            
            </summary>
            <param name="toDN">the DN to compare to
            </param>
            <returns>  <code>true</code> if the DNs are equal; otherwise
            <code>false</code>
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.Utilclass.DN.explodeDN(System.Boolean)">
            <summary> return a string array of the individual RDNs contained in the DN
            
            </summary>
            <param name="noTypes">  If true, returns only the values of the
            components, and not the names, e.g. "Babs
            Jensen", "Accounting", "Acme", "us" - instead of
            "cn=Babs Jensen", "ou=Accounting", "o=Acme", and
            "c=us".
            </param>
            <returns>  <code>String[]</code> containing the rdns in the DN with
            the leftmost rdn in the first element of the array
            
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.Utilclass.DN.countRDNs">
            <summary> Retrieves the count of RDNs, or individule names, in the Distinguished name</summary>
            <returns> the count of RDN
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.Utilclass.DN.isDescendantOf(Novell.Directory.Ldap.Utilclass.DN)">
            <summary>Determines if this DN is <I>contained</I> by the DN passed in.  For
            example:  "cn=admin, ou=marketing, o=corporation" is contained by
            "o=corporation", "ou=marketing, o=corporation", and "ou=marketing"
            but <B>not</B> by "cn=admin" or "cn=admin,ou=marketing,o=corporation"
            Note: For users of Netscape's SDK this method is comparable to contains
            
            </summary>
            <param name="containerDN">of a container
            </param>
            <returns> true if containerDN contains this DN
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.Utilclass.DN.addRDN(Novell.Directory.Ldap.Utilclass.RDN)">
            <summary> Adds the RDN to the beginning of the current DN.</summary>
            <param name="rdn">an RDN to be added
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.Utilclass.DN.addRDNToFront(Novell.Directory.Ldap.Utilclass.RDN)">
            <summary> Adds the RDN to the beginning of the current DN.</summary>
            <param name="rdn">an RDN to be added
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.Utilclass.DN.addRDNToBack(Novell.Directory.Ldap.Utilclass.RDN)">
            <summary> Adds the RDN to the end of the current DN</summary>
            <param name="rdn">an RDN to be added
            </param>
        </member>
        <member name="P:Novell.Directory.Ldap.Utilclass.DN.RDNs">
            <summary> Retrieves a list of RDN Objects, or individual names of the DN</summary>
            <returns> list of RDNs
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.Utilclass.DN.Parent">
            <summary> Returns the Parent of this DN</summary>
            <returns> Parent DN
            </returns>
        </member>
        <member name="T:Novell.Directory.Ldap.Utilclass.EnumeratedIterator">
            <summary> wrappers a class of type Iterator and makes it act as an Enumerator.  This
            is used when the API requires enumerations be used but we may be using
            JDK1.2 collections, which return iterators instead of enumerators.  Used by
            LdapSchema and LdapSchemaElement
            
            </summary>
            <seealso cref="P:Novell.Directory.Ldap.LdapSchema.AttributeSchemas">
            </seealso>
            <seealso cref="P:Novell.Directory.Ldap.LdapSchemaElement.QualifierNames">
            </seealso>
        </member>
        <member name="M:Novell.Directory.Ldap.Utilclass.EnumeratedIterator.hasMoreElements">
            <summary> Enumeration method that maps to Iterator.hasNext()</summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Utilclass.EnumeratedIterator.nextElement">
            <summary> Enumeration method that maps to Iterator.next()</summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Utilclass.ExceptionMessages">
            <summary> This class contains strings that may be associated with Exceptions generated
            by the Ldap API libraries.
            Two entries are made for each message, a String identifier, and the
            actual error string.  Parameters are identified as {0}, {1}, etc.
            </summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Utilclass.ExtResponseFactory">
            <summary> 
            Takes an LdapExtendedResponse and returns an object
            (that implements the base class ParsedExtendedResponse)
            based on the OID.
            
            <p>You can then call methods defined in the child
            class to parse the contents of the response.  The methods available
            depend on the child class. All child classes inherit from the
            ParsedExtendedResponse.</p>
            
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Utilclass.ExtResponseFactory.convertToExtendedResponse(Novell.Directory.Ldap.Rfc2251.RfcLdapMessage)">
            <summary> Used to Convert an RfcLdapMessage object to the appropriate
            LdapExtendedResponse object depending on the operation being performed.
            
            </summary>
            <param name="inResponse">  The LdapExtendedReponse object as returned by the
            extendedOperation method in the LdapConnection object.
            </param>
            <returns> An object of base class LdapExtendedResponse.  The actual child
            class of this returned object depends on the operation being
            performed.
            </returns>
        </member>
        <member name="T:Novell.Directory.Ldap.Utilclass.IntermediateResponseFactory">
             <summary>
            
             Takes an LDAPIntermediateResponse and returns an object
             (that implements the base class LDAPIntermediateResponse)
              based on the OID.
            
              You can then call methods defined in the child
              class to parse the contents of the response.  The methods available
              depend on the child class. All child classes inherit from the
              LdapIntermediateResponse.
            
             </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Novell.Directory.Ldap.Utilclass.IntermediateResponseFactory.convertToIntermediateResponse(Novell.Directory.Ldap.Rfc2251.RfcLdapMessage)" -->
        <member name="T:Novell.Directory.Ldap.Utilclass.RDN">
            <summary> A RDN encapsulates a single object's name of a Distinguished Name(DN).
            The object name represented by this class contains no context.  Thus a
            Relative Distinguished Name (RDN) could be relative to anywhere in the
            Directories tree.
            
            For example, of following DN, 'cn=admin, ou=marketing, o=corporation', all
            possible RDNs are 'cn=admin', 'ou=marketing', and 'o=corporation'.
            
            Multivalued attributes are encapsulated in this class.  For example the
            following could be represented by an RDN: 'cn=john + l=US', or
            'cn=juan + l=ES' 
            
            </summary>
            <seealso cref="T:Novell.Directory.Ldap.Utilclass.DN">
            </seealso>
        </member>
        <member name="M:Novell.Directory.Ldap.Utilclass.RDN.#ctor(System.String)">
            <summary> Creates an RDN object from the DN component specified in the string RDN
            
            </summary>
            <param name="rdn">the DN component
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.Utilclass.RDN.equals(Novell.Directory.Ldap.Utilclass.RDN)">
            <summary> Compares the RDN to the rdn passed.  Note: If an there exist any
            mulivalues in one RDN they must all be present in the other.
            
            </summary>
            <param name="rdn">the RDN to compare to
            
            @throws IllegalArgumentException if the application compares a name
            with an OID.
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.Utilclass.RDN.equalAttrType(System.String,System.String)">
            <summary> Internal function used by equal to compare Attribute types.  Because
            attribute types could either be an OID or a name.  There needs to be a
            Translation mechanism.  This function will absract this functionality.
            
            Currently if types differ (Oid and number) then UnsupportedOperation is
            thrown, either one or the other must used.  In the future an OID to name
            translation can be used.
            
            
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Utilclass.RDN.add(System.String,System.String,System.String)">
            <summary> Adds another value to the RDN.  Only one attribute type is allowed for
            the RDN.
            </summary>
            <param name="attrType">Attribute type, could be an OID or String
            </param>
            <param name="attrValue">Attribute Value, must be normalized and escaped
            </param>
            <param name="rawValue">or text before normalization, can be Null
            </param>
        </member>
        <member name="M:Novell.Directory.Ldap.Utilclass.RDN.ToString">
            <summary> Creates a string that represents this RDN, according to RFC 2253
            
            </summary>
            <returns> An RDN string
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.Utilclass.RDN.toString(System.Boolean)">
            <summary> Creates a string that represents this RDN.
            
            If noTypes is true then Atribute types will be ommited.
            
            </summary>
            <param name="noTypes">true if attribute types will be omitted.
            
            </param>
            <returns> An RDN string
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.Utilclass.RDN.explodeRDN(System.Boolean)">
            <summary> Returns each multivalued name in the current RDN as an array of Strings.
            
            </summary>
            <param name="noTypes">Specifies whether Attribute types are included. The attribute
            type names will be ommitted if the parameter noTypes is true.
            
            </param>
            <returns> List of multivalued Attributes
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.Utilclass.RDN.RawValue">
            <summary> Returns the actually Raw String before Normalization
            
            </summary>
            <returns> The raw string
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.Utilclass.RDN.Type">
            <summary> Returns the type of this RDN.  This method assumes that only one value
            is used, If multivalues attributes are used only the first Type is
            returned.  Use GetTypes.
            </summary>
            <returns> Type of attribute
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.Utilclass.RDN.Types">
            <summary> Returns all the types for this RDN.</summary>
            <returns> list of types
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.Utilclass.RDN.Value">
            <summary> Returns the values of this RDN.  If multivalues attributes are used only
            the first Type is returned.  Use GetTypes.
            
            </summary>
            <returns> Type of attribute
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.Utilclass.RDN.Values">
            <summary> Returns all the types for this RDN.</summary>
            <returns> list of types
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.Utilclass.RDN.Multivalued">
            <summary> Determines if this RDN is multivalued or not</summary>
            <returns> true if this RDN is multivalued
            </returns>
        </member>
        <member name="T:Novell.Directory.Ldap.Utilclass.ReferralInfo">
            <summary> This class encapsulates the combination of LdapReferral URL and
            the connection opened to service this URL
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Utilclass.ReferralInfo.#ctor(Novell.Directory.Ldap.LdapConnection,System.String[],Novell.Directory.Ldap.LdapUrl)">
            <summary> Construct the ReferralInfo class
            
            </summary>
            <param name="lc">The DirectoryEntry opened to process this referral
            
            </param>
            <param name="refUrl">The URL string associated with this connection
            </param>
        </member>
        <member name="P:Novell.Directory.Ldap.Utilclass.ReferralInfo.ReferralUrl">
            <summary>Returns the referral URL
            
            </summary>
            <returns> the Referral URL
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.Utilclass.ReferralInfo.ReferralConnection">
            <summary>Returns the referral Connection
            
            </summary>
            <returns> the Referral Connection
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.Utilclass.ReferralInfo.ReferralList">
            <summary>Returns the referral list
            
            </summary>
            <returns> the Referral list
            </returns>
        </member>
        <member name="T:Novell.Directory.Ldap.Utilclass.ResourcesHandler">
            <summary>  A utility class to get strings from the ExceptionMessages and
            ResultCodeMessages resources.
            </summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Utilclass.ResourcesHandler.defaultMessages">
            <summary>  Initialized when the first Exception message string is requested</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Utilclass.ResourcesHandler.pkg">
            <summary> Package where resources are found</summary>
        </member>
        <member name="F:Novell.Directory.Ldap.Utilclass.ResourcesHandler.defaultLocale">
            <summary> The default Locale</summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Utilclass.ResourcesHandler.getMessage(System.String,System.Object[])">
            <summary> Returns a string using the MessageOrKey as a key into
            ExceptionMessages or, if the Key does not exist, returns the
            string messageOrKey.  In addition it formats the arguments into the message
            according to MessageFormat.
            
            </summary>
            <param name="messageOrKey">   Key string for the resource.
            
            </param>
            <param name="">arguments
            
            </param>
            <returns> the text for the message specified by the MessageKey or the Key
            if it there is no message for that key.
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.Utilclass.ResourcesHandler.getMessage(System.String,System.Object[],System.Globalization.CultureInfo)">
            <summary> Returns the message stored in the ExceptionMessages resource for the
            specified locale using messageOrKey and argments passed into the
            constructor.  If no string exists in the resource then this returns
            the string stored in message.  (This method is identical to
            getLdapErrorMessage(Locale locale).)
            
            </summary>
            <param name="messageOrKey">   Key string for the resource.
            
            </param>
            <param name="">arguments
            
            </param>
            <param name="locale">         The Locale that should be used to pull message
            strings out of ExceptionMessages.
            
            </param>
            <returns> the text for the message specified by the MessageKey or the Key
            if it there is no message for that key.
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.Utilclass.ResourcesHandler.getResultString(System.Int32)">
            <summary> Returns a string representing the Ldap result code from the 
            default ResultCodeMessages resource.
            
            </summary>
            <param name="code">   the result code 
            
            </param>
            <returns>        the String representing the result code.
            </returns>
        </member>
        <member name="M:Novell.Directory.Ldap.Utilclass.ResourcesHandler.getResultString(System.Int32,System.Globalization.CultureInfo)">
            <summary> Returns a string representing the Ldap result code.  The message
            is obtained from the locale specific ResultCodeMessage resource.
            
            </summary>
            <param name="code">   the result code 
            
            </param>
            <param name="locale">         The Locale that should be used to pull message
            strings out of ResultMessages.
            
            </param>
            <returns>        the String representing the result code.
            </returns>
        </member>
        <member name="T:Novell.Directory.Ldap.Utilclass.RespControlVector">
            <summary> The <code>MessageVector</code> class implements extends the
            existing Vector class so that it can be used to maintain a
            list of currently registered control responses.
            </summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Utilclass.RespControlVector.RegisteredControl">
            <summary>Inner class defined to create a temporary object to encapsulate
            all registration information about a response control.  This class
            cannot be used outside this class 
            </summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Utilclass.RespExtensionSet">
            <summary> This  class  extends the AbstractSet and Implements the Set
            so that it can be used to maintain a list of currently
            registered extended responses.
            </summary>
        </member>
        <member name="M:Novell.Directory.Ldap.Utilclass.RespExtensionSet.GetEnumerator">
            <summary> Returns an iterator over the responses in this set.  The responses
            returned from this iterator are not in any particular order.
            
            </summary>
            <returns> iterator over the responses in this set
            </returns>
        </member>
        <member name="P:Novell.Directory.Ldap.Utilclass.RespExtensionSet.Count">
            <summary> Returns the number of extensions in this set.
            
            </summary>
            <returns> number of extensions in this set.
            </returns>
        </member>
        <member name="T:Novell.Directory.Ldap.Utilclass.ResultCodeMessages">
            <summary> This class contains strings corresponding to Ldap Result Codes.
            The resources are accessed by the String representation of the result code.
            </summary>
        </member>
        <member name="T:Novell.Directory.Ldap.Utilclass.TokenTypes">
            <summary>
            Specifies the types of Tokens.
            </summary>
        </member>
    </members>
</doc>
